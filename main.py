import flet as ft
from flet import *
from datetime import datetime, timedelta
import uvicorn
import bcrypt
import re
import os
from fpdf import FPDF
from decimal import Decimal, getcontext, InvalidOperation
import math
import threading
import time
import queue
import tempfile
import random
from math import pi
from itertools import cycle
from openpyxl import Workbook
from openpyxl.styles import numbers, Font, PatternFill, Alignment
import socket
import mysql.connector
from mysql.connector import Error
from Conexionuno import *
from herramientasdos import *
from letras import *
import secrets
from cryptography.fernet import Fernet
import ipaddress
import pyotp
import hmac
import hashlib
import logging
from logging.handlers import RotatingFileHandler
import qrcode
import io
import base64
from PIL import Image

# =============================================
# CONFIGURACIÓN DE SEGURIDAD GLOBAL MEJORADA
# =============================================

# Configuración de logging para auditoría
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        RotatingFileHandler('security.log', maxBytes=5*1024*1024, backupCount=3),
        logging.StreamHandler()
    ]
)

# Generar clave para cifrado (en producción, usar una clave gestionada de forma segura)
try:
    CRYPTO_KEY = Fernet.generate_key()
    cipher_suite = Fernet(CRYPTO_KEY)
except Exception as e:
    logging.critical(f"Error al generar clave de cifrado: {str(e)}")
    raise

# Configuración de seguridad mejorada según NIST SP 800-63B
SESSION_TIMEOUT = 180 * 60  # 15 minutos de inactividad (NIST recomienda máximo 30 min)
MAX_LOGIN_ATTEMPTS = 5      # NIST recomienda al menos 10, pero podemos ajustar
LOGIN_ATTEMPT_WINDOW = 15 * 60  # 15 minutos para el bloqueo temporal
PASSWORD_MIN_LENGTH = 12    # NIST recomienda mínimo 8, mejor 12+
PASSWORD_HISTORY = 5        # Número de contraseñas anteriores a recordar
ACCOUNT_LOCKOUT_DURATION = 30 * 60  # 30 minutos de bloqueo después de intentos fallidos

# Configuración de autenticación multifactor
MFA_REQUIRED_FOR_ADMIN = True
MFA_GRACE_PERIOD = 24 * 60 * 60  # 24 horas para configurar MFA después del primer login

# =============================================
# FUNCIONES DE SEGURIDAD MEJORADAS
# =============================================

def encrypt_data(data: str) -> str:
    """Cifra datos sensibles usando Fernet con verificación de integridad"""
    if not data:
        return ""
    try:
        encrypted = cipher_suite.encrypt(data.encode())
        # Añadir HMAC para verificación de integridad
        hmac_code = hmac.new(CRYPTO_KEY, encrypted, hashlib.sha256).hexdigest()
        return f"{encrypted.decode()}:{hmac_code}"
    except Exception as e:
        logging.error(f"Error al cifrar datos: {str(e)}")
        raise

def decrypt_data(encrypted_data: str) -> str:
    """Descifra datos previamente cifrados con verificación de integridad"""
    if not encrypted_data:
        return ""
    
    try:
        if ':' not in encrypted_data:
            raise ValueError("Formato de datos cifrados inválido")
            
        encrypted, hmac_code = encrypted_data.split(':', 1)
        # Verificar integridad con HMAC
        calculated_hmac = hmac.new(CRYPTO_KEY, encrypted.encode(), hashlib.sha256).hexdigest()
        
        if not hmac.compare_digest(calculated_hmac, hmac_code):
            raise ValueError("Integridad de datos comprometida - HMAC no coincide")
            
        return cipher_suite.decrypt(encrypted.encode()).decode()
    except Exception as e:
        logging.error(f"Error al descifrar datos: {str(e)}")
        raise

def generate_csrf_token() -> str:
    """Genera un token CSRF único y seguro"""
    return secrets.token_urlsafe(64)

def validate_csrf_token(token: str, stored_token: str) -> bool:
    """Valida un token CSRF de manera segura contra timing attacks"""
    return hmac.compare_digest(token, stored_token)

def is_strong_password(password: str) -> bool:
    """
    Verifica que la contraseña cumpla con los requisitos de NIST SP 800-63B
    - Longitud mínima de 12 caracteres
    - No requiere complejidad artificial (mayúsculas, símbolos, etc.)
    - Verifica contra listas de contraseñas comunes (implementación básica)
    """
    if len(password) < PASSWORD_MIN_LENGTH:
        return False
    
    # Lista básica de contraseñas comunes (en producción usar una lista más completa)
    common_passwords = {
        'password', '123456', 'qwerty', 'letmein', 'welcome', 
        'admin', 'contraseña', 'password1', '12345678'
    }
    
    if password.lower() in common_passwords:
        return False
        
    # Verificar repetición excesiva de caracteres
    if max((password.count(c) for c in password)) > len(password) / 2:
        return False
        
    return True

def sanitize_output(text: str) -> str:
    """Sanitiza la salida para prevenir XSS (OWASP Top 10 - A03:2021)"""
    if not text:
        return ""
    return (str(text)
            .replace("&", "&amp;")
            .replace("<", "&lt;")
            .replace(">", "&gt;")
            .replace('"', "&quot;")
            .replace("'", "&#x27;")
            .replace("/", "&#x2F;"))

def log_security_event(event_type: str, description: str, user_id: int = None, 
                      ip_address: str = None, severity: str = "INFO"):
    """Registra eventos de seguridad para auditoría"""
    ip = ip_address or ip_validator.get_current_ip()
    user = f"user_id={user_id}" if user_id else "unauthenticated"
    
    log_msg = f"{event_type} - {description} - {user} - IP: {ip}"
    
    if severity == "INFO":
        logging.info(log_msg)
    elif severity == "WARNING":
        logging.warning(log_msg)
    elif severity == "ERROR":
        logging.error(log_msg)
    elif severity == "CRITICAL":
        logging.critical(log_msg)
        
    # También registrar en base de datos
    try:
        conn = CConection.ConexionBasedeDatos()
        if conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    """INSERT INTO security_logs 
                    (event_type, description, user_id, ip_address, severity) 
                    VALUES (%s, %s, %s, %s, %s)""",
                    (event_type, description, user_id, ip, severity)
                )
                conn.commit()
    except Exception as e:
        logging.error(f"Error al registrar evento de seguridad en BD: {str(e)}")

# =============================================
# MEJORAS EN LA CLASE IPValidator
# =============================================

class LoginLog:
    @staticmethod
    def log_login(user_id, ip_address):
        try:
            conn = CConection.ConexionBasedeDatos()
            if conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        "INSERT INTO ip_usage_log (user_id, ip_address, action) VALUES (%s, %s, 'login')",
                        (user_id, ip_address)
                    )
                    conn.commit()
                log_security_event("LOGIN_SUCCESS", f"User {user_id} logged in", user_id, ip_address)
        except Exception as e:
            logging.error(f"Error registrando inicio de sesión: {e}")

    @staticmethod
    def log_logout(user_id, ip_address):
        conn = None
        try:
            conn = CConection.ConexionBasedeDatos()
            if conn:
                with conn.cursor() as check_cursor:
                    check_cursor.execute("""
                        SELECT id FROM ip_usage_log 
                        WHERE user_id = %s 
                        AND action = 'login' 
                        ORDER BY timestamp DESC 
                        LIMIT 1
                        """, (user_id,))
                    last_login = check_cursor.fetchone()
                    
                if last_login:
                    with conn.cursor() as verify_cursor:
                        verify_cursor.execute("""
                            SELECT 1 FROM ip_usage_log 
                            WHERE user_id = %s 
                            AND action = 'logout' 
                            AND timestamp > (
                                SELECT timestamp FROM ip_usage_log 
                                WHERE id = %s
                            )
                            LIMIT 1
                            """, (user_id, last_login[0]))
                        has_logout = verify_cursor.fetchone()
                        
                    if not has_logout:
                        with conn.cursor() as insert_cursor:
                            insert_cursor.execute(
                                "INSERT INTO ip_usage_log (user_id, ip_address, action) VALUES (%s, %s, 'logout')",
                                (user_id, ip_address)
                            )
                        conn.commit()
                        log_security_event("LOGOUT", f"User {user_id} logged out", user_id, ip_address)
                        
        except Exception as e:
            logging.error(f"Error registrando cierre de sesión: {e}")
            if conn:
                conn.rollback()
        finally:
            if conn:
                conn.close()

    @staticmethod
    def get_login_logs():
        try:
            conn = CConection.ConexionBasedeDatos()
            if conn:
                with conn.cursor(dictionary=True) as cursor:
                    cursor.execute("""
                        SELECT 
                            u.username,
                            l.ip_address,
                            l.timestamp as login_time,
                            (SELECT MIN(lo.timestamp) 
                            FROM ip_usage_log lo 
                            WHERE lo.user_id = l.user_id 
                            AND lo.action = 'logout' 
                            AND lo.timestamp > l.timestamp
                            AND lo.ip_address = l.ip_address) as logout_time
                        FROM ip_usage_log l
                        JOIN users u ON l.user_id = u.id
                        WHERE l.action = 'login'
                        GROUP BY l.user_id, l.ip_address, l.timestamp, u.username
                        ORDER BY l.timestamp DESC
                        LIMIT 100
                    """)
                    return cursor.fetchall()
            return []
        except Exception as e:
            logging.error(f"Error obteniendo logs de inicio de sesión: {e}")
            return []

    @staticmethod
    def get_active_sessions():
        """Obtiene todas las sesiones activas (sin logout registrado)"""
        try:
            conn = CConection.ConexionBasedeDatos()
            if conn:
                with conn.cursor(dictionary=True) as cursor:
                    cursor.execute("""
                        SELECT 
                            u.username,
                            u.id as user_id,
                            l.ip_address,
                            l.timestamp as login_time
                        FROM ip_usage_log l
                        JOIN users u ON l.user_id = u.id
                        WHERE l.action = 'login'
                        AND NOT EXISTS (
                            SELECT 1 FROM ip_usage_log lo 
                            WHERE lo.user_id = l.user_id 
                            AND lo.action = 'logout' 
                            AND lo.timestamp > l.timestamp
                            AND lo.ip_address = l.ip_address
                        )
                        ORDER BY l.timestamp DESC
                    """)
                    return cursor.fetchall()
            return []
        except Exception as e:
            logging.error(f"Error obteniendo sesiones activas: {e}")
            return []

    @staticmethod
    def force_logout(user_id, ip_address=None):
        """Fuerza el cierre de sesión para un usuario específico"""
        try:
            conn = CConection.ConexionBasedeDatos()
            if conn:
                with conn.cursor() as cursor:
                    # Si se proporciona IP, cerrar solo esa sesión
                    if ip_address:
                        cursor.execute("""
                            INSERT INTO ip_usage_log (user_id, ip_address, action)
                            SELECT user_id, ip_address, 'logout' 
                            FROM ip_usage_log 
                            WHERE user_id = %s 
                            AND ip_address = %s
                            AND action = 'login'
                            AND NOT EXISTS (
                                SELECT 1 FROM ip_usage_log lo 
                                WHERE lo.user_id = ip_usage_log.user_id 
                                AND lo.ip_address = ip_usage_log.ip_address
                                AND lo.action = 'logout' 
                                AND lo.timestamp > ip_usage_log.timestamp
                            )
                            ORDER BY timestamp DESC
                            LIMIT 1
                        """, (user_id, ip_address))
                    else:
                        # Cerrar todas las sesiones activas del usuario
                        cursor.execute("""
                            INSERT INTO ip_usage_log (user_id, ip_address, action)
                            SELECT user_id, ip_address, 'logout' 
                            FROM ip_usage_log 
                            WHERE user_id = %s
                            AND action = 'login'
                            AND NOT EXISTS (
                                SELECT 1 FROM ip_usage_log lo 
                                WHERE lo.user_id = ip_usage_log.user_id 
                                AND lo.ip_address = ip_usage_log.ip_address
                                AND lo.action = 'logout' 
                                AND lo.timestamp > ip_usage_log.timestamp
                            )
                            ORDER BY timestamp DESC
                        """, (user_id,))
                    
                    conn.commit()
                    return cursor.rowcount > 0
        except Exception as e:
            logging.error(f"Error forzando cierre de sesión: {e}")
            return False

class IPValidator:
    def __init__(self):
        self.allowed_ips = set()
        self.last_update = None
        self.update_interval = 3600  # 1 hora en segundos
        self.lock = threading.Lock()
        self.login_attempts = {}  # Para rate limiting
        
        # Crear tablas si no existen
        self.create_tables()
        
        # Añadir IP por defecto
        self.add_default_ip("192.168.26.4", "IP local por defecto")

        self.load_allowed_ips()
        
        # Iniciar hilo para actualización periódica
        self.thread = threading.Thread(target=self._update_thread, daemon=True)
        self.thread.start()

    def create_tables(self):
        try:
            conn = CConection.ConexionBasedeDatos()
            if conn:
                with conn.cursor() as cursor:
                    # Tabla para IPs permitidas
                    cursor.execute("""
                    CREATE TABLE IF NOT EXISTS allowed_ips (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        ip_address VARCHAR(45) NOT NULL UNIQUE,
                        description VARCHAR(255),
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
                    """)
                    
                    # Tabla para registro de uso
                    cursor.execute("""
                    CREATE TABLE IF NOT EXISTS ip_usage_log (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        user_id INT,
                        ip_address VARCHAR(45) NOT NULL,
                        action VARCHAR(50) NOT NULL,
                        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        INDEX idx_ip_action (ip_address, action),
                        INDEX idx_timestamp (timestamp)
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
                    """)
                    
                    # Tabla para intentos fallidos
                    cursor.execute("""
                    CREATE TABLE IF NOT EXISTS failed_login_attempts (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        ip_address VARCHAR(45) NOT NULL,
                        username VARCHAR(100),
                        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        INDEX idx_ip (ip_address),
                        INDEX idx_timestamp (timestamp)
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
                    """)
                    
                    # Tabla para logs de seguridad
                    cursor.execute("""
                    CREATE TABLE IF NOT EXISTS security_logs (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        event_type VARCHAR(100) NOT NULL,
                        description TEXT,
                        user_id INT NULL,
                        ip_address VARCHAR(45) NOT NULL,
                        severity ENUM('INFO', 'WARNING', 'ERROR', 'CRITICAL') NOT NULL,
                        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        INDEX idx_event_type (event_type),
                        INDEX idx_timestamp (timestamp),
                        INDEX idx_user_id (user_id),
                        INDEX idx_ip (ip_address)
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
                    """)
                    
                    conn.commit()
        except Exception as e:
            logging.error(f"Error creando tablas de seguridad: {e}")

    def add_default_ip(self, ip, description):
        try:
            conn = CConection.ConexionBasedeDatos()
            if conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        "INSERT IGNORE INTO allowed_ips (ip_address, description) VALUES (%s, %s)",
                        (ip, description)
                    )
                    conn.commit()
        except Exception as e:
            logging.error(f"Error añadiendo IP por defecto: {e}")

    def _update_thread(self):
        while True:
            time.sleep(self.update_interval)
            self.load_allowed_ips()

    def load_allowed_ips(self):
        try:
            conn = CConection.ConexionBasedeDatos()
            if conn:
                with conn.cursor() as cursor:
                    cursor.execute("SELECT ip_address FROM allowed_ips")
                    ips = {row[0] for row in cursor.fetchall()}
                    with self.lock:
                        self.allowed_ips = ips
                        self.last_update = datetime.now()
        except Exception as e:
            logging.error(f"Error cargando IPs permitidas: {e}")

    def is_ip_allowed(self, ip_address):
        with self.lock:
            # Verificar IP exacta
            if ip_address in self.allowed_ips:
                return True
            
            # Verificar rangos CIDR
            try:
                ip = ipaddress.ip_address(ip_address)
                for allowed in self.allowed_ips:
                    if '/' in allowed:
                        network = ipaddress.ip_network(allowed, strict=False)
                        if ip in network:
                            return True
            except ValueError:
                pass
            
            return False

    def log_ip_usage(self, user_id, ip_address, action):
        try:
            conn = CConection.ConexionBasedeDatos()
            if conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        "INSERT INTO ip_usage_log (user_id, ip_address, action) VALUES (%s, %s, %s)",
                        (user_id, ip_address, action)
                    )
                    conn.commit()
        except Exception as e:
            logging.error(f"Error registrando uso de IP: {e}")

    def log_failed_attempt(self, ip_address, username=None):
        try:
            conn = CConection.ConexionBasedeDatos()
            if conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        "INSERT INTO failed_login_attempts (ip_address, username) VALUES (%s, %s)",
                        (ip_address, username)
                    )
                    conn.commit()
                    
            # Registrar evento de seguridad
            log_security_event(
                "LOGIN_FAILED", 
                f"Failed login attempt for username {username}" if username else "Failed login attempt",
                None, ip_address, "WARNING"
            )
        except Exception as e:
            logging.error(f"Error registrando intento fallido: {e}")

    def check_rate_limit(self, ip_address, max_attempts=MAX_LOGIN_ATTEMPTS, period=LOGIN_ATTEMPT_WINDOW):
        """Implementa rate limiting para prevenir ataques de fuerza bruta"""
        now = time.time()
        
        # Primero verificar en memoria
        if ip_address in self.login_attempts:
            attempts, first_attempt_time = self.login_attempts[ip_address]
            
            # Resetear si ha pasado el período
            if now - first_attempt_time > period:
                self.login_attempts[ip_address] = (1, now)
                return True
            
            # Verificar si ha excedido el límite
            if attempts >= max_attempts:
                log_security_event("RATE_LIMIT", f"IP {ip_address} blocked due to rate limiting", 
                                  None, ip_address, "WARNING")
                return False
            
            # Incrementar intentos
            self.login_attempts[ip_address] = (attempts + 1, first_attempt_time)
            return True
        
        # Si no está en memoria, verificar en base de datos
        try:
            conn = CConection.ConexionBasedeDatos()
            if conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        "SELECT COUNT(*) FROM failed_login_attempts WHERE ip_address = %s AND timestamp > DATE_SUB(NOW(), INTERVAL %s SECOND)",
                        (ip_address, period))
                    db_attempts = cursor.fetchone()[0]
                    
                    if db_attempts >= max_attempts:
                        log_security_event("RATE_LIMIT", f"IP {ip_address} blocked due to rate limiting (DB)", 
                                          None, ip_address, "WARNING")
                        return False
                    
                    # Registrar en memoria
                    self.login_attempts[ip_address] = (db_attempts + 1, now)
                    return True
        except Exception as e:
            logging.error(f"Error verificando rate limit: {e}")
            return True
        
        return True

    def get_current_ip(self):
        try:
            hostname = socket.gethostname()
            local_ip = socket.gethostbyname(hostname)
            
            try:
                s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                s.connect(("8.8.8.8", 80))
                public_ip = s.getsockname()[0]
                s.close()
                return public_ip
            except:
                return local_ip
        except:
            return "127.0.0.1"

# Instancia global del validador de IP
ip_validator = IPValidator()

# =============================================
# FUNCIONES DE GESTIÓN DE USUARIOS MEJORADAS
# =============================================

def verify_user(username, password):
    """Verifica las credenciales del usuario con protección contra timing attacks"""
    try:
        current_ip = ip_validator.get_current_ip()

        # Verificación de IP permitida
        if not ip_validator.is_ip_allowed(current_ip):
            log_security_event("UNAUTHORIZED_IP", f"Intento de acceso desde IP no permitida: {current_ip}", 
                              None, current_ip, "WARNING")
            time.sleep(random.uniform(0.1, 0.5))  # Mitigación de timing attack
            return False

        # Verificación de rate limiting
        if not ip_validator.check_rate_limit(current_ip):
            time.sleep(random.uniform(0.1, 0.5))
            return False

        conn = CConection.ConexionBasedeDatos()
        if conn is None:
            time.sleep(random.uniform(0.1, 0.5))
            return False

        with conn:
            with conn.cursor() as cursor:
                # Usar consulta parametrizada para prevenir SQL injection
                cursor.execute(
                    "SELECT id, password, failed_attempts, last_failed_attempt, account_locked, "
                    "two_factor_enabled, two_factor_secret, password_changed_at "
                    "FROM users WHERE BINARY username = %s", 
                    (username,)
                )
                result = cursor.fetchone()

        if result:
            user_id, stored_pw, failed_attempts, last_failed, locked, mfa_enabled, mfa_secret, pwd_changed = result
            
            # Verificar si la cuenta está bloqueada
            if locked and last_failed > (datetime.now() - timedelta(seconds=ACCOUNT_LOCKOUT_DURATION)):
                log_security_event("ACCOUNT_LOCKED", "Intento de acceso a cuenta bloqueada", 
                                  user_id, current_ip, "WARNING")
                time.sleep(random.uniform(0.1, 0.5))
                return False
            
            # Verificar contraseña con bcrypt (resistente a timing attacks)
            if bcrypt.checkpw(password.encode('utf-8'), stored_pw.encode('utf-8')):
                # Verificar si la contraseña necesita ser cambiada (90 días)
                if pwd_changed and (datetime.now() - pwd_changed).days > 90:
                    log_security_event("PASSWORD_EXPIRED", "Contraseña expirada", user_id, current_ip, "WARNING")
                    # En producción, redirigir a cambio de contraseña
                
                ip_validator.log_ip_usage(user_id, current_ip, 'login')
                # Registrar el logout cuando el usuario cierre sesión
                import atexit
                atexit.register(LoginLog.log_logout, user_id, current_ip)
                
                # Resetear intentos fallidos
                reset_failed_attempts(username)
                return True
            else:
                log_failed_attempt(username)
                time.sleep(random.uniform(0.1, 0.5))  # Mitigación de timing attack
                return False
        
        # Usuario no existe, pero simular verificación para evitar timing attack
        time.sleep(random.uniform(0.1, 0.5))
        return False
        
    except Exception as e:
        logging.error(f"Error verificando usuario: {e}")
        time.sleep(random.uniform(0.1, 0.5))
        return False

def log_failed_attempt(username: str):
    """Registra un intento fallido de inicio de sesión con bloqueo de cuenta"""
    try:
        conn = CConection.ConexionBasedeDatos()
        if conn is None:
            return

        with conn:
            with conn.cursor() as cursor:
                cursor.execute("SELECT id, failed_attempts FROM users WHERE BINARY username = %s", (username,))
                result = cursor.fetchone()

                if result:
                    user_id, failed_attempts = result
                    new_attempts = failed_attempts + 1
                    locked = new_attempts >= MAX_LOGIN_ATTEMPTS

                    cursor.execute(
                        "UPDATE users SET failed_attempts = %s, last_failed_attempt = %s, account_locked = %s WHERE id = %s",
                        (new_attempts, datetime.now(), locked, user_id)
                    )
                    conn.commit()
                    
                    if locked:
                        log_security_event("ACCOUNT_LOCKED", "Cuenta bloqueada por demasiados intentos fallidos", 
                                          user_id, ip_validator.get_current_ip(), "WARNING")
    except Exception as e:
        logging.error(f"Error al registrar intento fallido: {e}")

def reset_failed_attempts(username: str):
    """Resetea el contador de intentos fallidos después de un inicio de sesión exitoso"""
    try:
        conn = CConection.ConexionBasedeDatos()
        if conn is None:
            return

        with conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "UPDATE users SET failed_attempts = 0, account_locked = FALSE WHERE username = %s",
                    (username,)
                )
                conn.commit()
    except Exception as e:
        logging.error(f"Error reseteando intentos fallidos: {e}")

def is_valid_email(email: str) -> bool:
    """Valida el formato de un email según RFC 5322"""
    regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    return re.match(regex, email) is not None

def log_login_attempt(username: str, success: bool):
    """Registra un intento de inicio de sesión"""
    try:
        conn = CConection.ConexionBasedeDatos()
        if conn is None:
            return

        with conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO login_attempts (username, success, ip_address, timestamp) VALUES (%s, %s, %s, %s)",
                    (username, success, ip_validator.get_current_ip(), datetime.now())
                )
                conn.commit()
    except Exception as e:
        logging.error(f"Error al registrar intento de inicio de sesión: {e}")

def count_failed_attempts(username: str) -> int:
    """Cuenta los intentos fallidos en los últimos 15 minutos"""
    try:
        conn = CConection.ConexionBasedeDatos()
        if conn is None:
            return 0

        limit_time = datetime.now() - timedelta(minutes=15)
        with conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT COUNT(*) FROM login_attempts WHERE BINARY username=%s AND success=FALSE AND timestamp > %s",
                    (username, limit_time))
                failed_attempts = cursor.fetchone()[0]
        return failed_attempts
    except Exception as e:
        logging.error(f"Error al contar intentos fallidos: {e}")
        return 0

# =============================================
# FUNCIONES PARA GESTIÓN DE IPs MEJORADAS
# =============================================

def add_allowed_ip(ip_address: str, description: str = None) -> bool:
    """Añade una IP a la lista de permitidas con validación"""
    try:
        # Validar formato de IP
        ip_obj = ipaddress.ip_address(ip_address)
        
        # No permitir IPs privadas o reservadas (ajustar según necesidades)
        if ip_obj.is_private or ip_obj.is_reserved or ip_obj.is_loopback:
            log_security_event("INVALID_IP", f"Intento de añadir IP privada/reservada: {ip_address}", 
                              None, ip_validator.get_current_ip(), "WARNING")
            return False
        
        conn = CConection.ConexionBasedeDatos()
        if conn is None:
            return False

        with conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "INSERT IGNORE INTO allowed_ips (ip_address, description) VALUES (%s, %s)",
                    (ip_address, description)
                )
                conn.commit()
                ip_validator.load_allowed_ips()
                
                if cursor.rowcount > 0:
                    log_security_event("IP_ADDED", f"IP {ip_address} añadida a la lista permitida", 
                                      None, ip_validator.get_current_ip(), "INFO")
                    return True
                return False
    except ValueError:
        log_security_event("INVALID_IP", f"Dirección IP no válida: {ip_address}", 
                          None, ip_validator.get_current_ip(), "WARNING")
        return False
    except Exception as e:
        logging.error(f"Error añadiendo IP permitida: {e}")
        return False

def remove_allowed_ip(ip_address: str) -> bool:
    """Elimina una IP de la lista de permitidas"""
    try:
        conn = CConection.ConexionBasedeDatos()
        if conn is None:
            return False

        with conn:
            with conn.cursor() as cursor:
                cursor.execute("DELETE FROM allowed_ips WHERE ip_address = %s", (ip_address,))
                conn.commit()
                ip_validator.load_allowed_ips()
                
                if cursor.rowcount > 0:
                    log_security_event("IP_REMOVED", f"IP {ip_address} eliminada de la lista permitida", 
                                      None, ip_validator.get_current_ip(), "INFO")
                    return True
                return False
    except Exception as e:
        logging.error(f"Error eliminando IP permitida: {e}")
        return False

def get_all_allowed_ips():
    """Obtiene todas las IPs permitidas"""
    try:
        conn = CConection.ConexionBasedeDatos()
        if conn is None:
            return []

        with conn:
            with conn.cursor(dictionary=True) as cursor:
                cursor.execute("SELECT * FROM allowed_ips ORDER BY created_at DESC")
                return cursor.fetchall()
    except Exception as e:
        logging.error(f"Error obteniendo IPs permitidas: {e}")
        return []

# =============================================
# IMPLEMENTACIÓN DE AUTENTICACIÓN DE DOS FACTORES MEJORADA
# =============================================

def setup_2fa(user_id: int, username: str) -> tuple:
    """Configura el 2FA para un usuario y genera QR"""
    try:
        secret = pyotp.random_base32()
        
        conn = CConection.ConexionBasedeDatos()
        if conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "UPDATE users SET two_factor_secret = %s, two_factor_enabled = FALSE WHERE id = %s",
                    (secret, user_id)
                )
                conn.commit()
        
        # Generar URL para QR code
        provisioning_uri = pyotp.totp.TOTP(secret).provisioning_uri(
            name=username, issuer_name="Sistema de Liquidación")
            
        # Generar imagen QR
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(provisioning_uri)
        qr.make(fit=True)
        
        img = qr.make_image(fill_color="black", back_color="white")
        
        # Convertir a bytes para mostrar en Flet
        img_bytes = io.BytesIO()
        img.save(img_bytes, format='PNG')
        img_bytes.seek(0)
        
        log_security_event("2FA_SETUP", "Configuración de 2FA iniciada", 
                         user_id, ip_validator.get_current_ip(), "INFO")
        
        return provisioning_uri, img_bytes
    except Exception as e:
        logging.error(f"Error configurando 2FA: {e}")
        return None, None

def verify_2fa(user_id: int, token: str) -> bool:
    """Verifica un token de autenticación de dos factores"""
    try:
        conn = CConection.ConexionBasedeDatos()
        if conn is None:
            return False

        with conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT two_factor_secret FROM users WHERE id = %s",
                    (user_id,)
                )
                result = cursor.fetchone()
                
                if result and result[0]:
                    secret = result[0]
                    totp = pyotp.TOTP(secret)
                    is_valid = totp.verify(token.strip(), valid_window=1)
                    
                    if is_valid:
                        # Habilitar 2FA después de la primera verificación exitosa
                        cursor.execute(
                            "UPDATE users SET two_factor_enabled = TRUE WHERE id = %s",
                            (user_id,)
                        )
                        conn.commit()
                        log_security_event("2FA_ENABLED", "2FA habilitado con éxito", 
                                          user_id, ip_validator.get_current_ip(), "INFO")
                    
                    return is_valid
        return False
    except Exception as e:
        logging.error(f"Error verificando token 2FA: {e}")
        return False

def disable_2fa(user_id: int) -> bool:
    """Deshabilita la autenticación de dos factores para un usuario"""
    try:
        conn = CConection.ConexionBasedeDatos()
        if conn is None:
            return False

        with conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "UPDATE users SET two_factor_enabled = FALSE, two_factor_secret = NULL WHERE id = %s",
                    (user_id,)
                )
                conn.commit()
                log_security_event("2FA_DISABLED", "Autenticación de dos factores deshabilitada", 
                                  user_id, ip_validator.get_current_ip(), "INFO")
                return True
    except Exception as e:
        logging.error(f"Error deshabilitando 2FA: {e}")
        return False

def enable_2fa(user_id: int) -> bool:
    """Habilita la autenticación de dos factores para un usuario"""
    try:
        conn = CConection.ConexionBasedeDatos()
        if conn is None:
            return False

        with conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "UPDATE users SET two_factor_enabled = TRUE WHERE id = %s",
                    (user_id,)
                )
                conn.commit()
                log_security_event("2FA_ENABLED", "Autenticación de dos factores habilitada", 
                                  user_id, ip_validator.get_current_ip(), "INFO")
                return True
    except Exception as e:
        logging.error(f"Error habilitando 2FA: {e}")
        return False



# =============================================
# CLASE FrameUno CON MEJORAS DE SEGURIDAD
# =============================================

class FrameUno(ft.Control):
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.csrf_token = generate_csrf_token()  # Token CSRF para el formulario
        self.last_activity_time = time.time()  # Para control de tiempo de sesión
        self.qr_image = None  # Para almacenar la imagen QR
        self.create_ui_elements()
        self.start_auto_refresh()

    def start_auto_refresh(self, interval=30):
        def refresh_task():
            while True:
                time.sleep(interval)
                self.refresh_login_logs()
    
        threading.Thread(target=refresh_task, daemon=True).start()    

    def check_session_timeout(self):
        """Verifica si la sesión ha expirado por inactividad"""
        current_time = time.time()
        if current_time - self.last_activity_time > SESSION_TIMEOUT:
            self.mostrar_mensaje100("Sesión expirada por inactividad", "advertencia")
            self.page.go("/login")  # Redirigir a login
            return True
        return False

    def update_activity_time(self):
        """Actualiza el tiempo de última actividad"""
        self.last_activity_time = time.time()

    def mostrar_mensaje100(self, mensaje, tipo="error"):
        """Muestra un mensaje en un SnackBar con protección XSS"""
        sanitized_msg = sanitize_output(mensaje)
        
        # Definir el color de fondo según el tipo de mensaje
        if tipo == "éxito":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.GREEN)
        elif tipo == "advertencia":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.TEAL)
        else:  # Por defecto, es un error
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.RED)
        
        # Crear el contenido del SnackBar con sanitización
        snack_content = ft.Container(
            content=ft.Text(sanitized_msg, size=18, color=ft.Colors.WHITE),
            bgcolor=color_fondo,
            border_radius=10,
            padding=10,
        )
        
        # Crear el SnackBar
        snack_bar = ft.SnackBar(
            content=snack_content,
            open=True,
            duration=5000,
            bgcolor=ft.Colors.TRANSPARENT,
        )
        
        # Agregar el SnackBar a la página y actualizar la UI
        self.page.overlay.append(snack_bar)
        self.page.update()

    def create_ui_elements(self):
        # Sección de usuarios con protección CSRF
        self.csrf_token_input = ft.TextField(value=self.csrf_token, visible=False)
        
        # Campos de formulario con validación mejorada
        self.username_input = ft.TextField(
            label="Nombre de usuario", 
            width=300, 
            border_color="teal", 
            border_radius=10,
            on_change=lambda e: self.update_activity_time(),
            autocorrect=False,
            enable_suggestions=False
        )
        
        self.password_input = ft.TextField(
            label="Contraseña", 
            password=True, 
            can_reveal_password=False,  # Deshabilitar visualización
            width=300, 
            border_color="teal", 
            border_radius=10,
            on_change=lambda e: self.update_activity_time(),
            autocorrect=False,
            enable_suggestions=False
        )
        
        self.email_input = ft.TextField(
            label="Correo electrónico", 
            width=300, 
            border_color="teal", 
            border_radius=10,
            on_change=lambda e: self.update_activity_time(),
            autocorrect=False,
            enable_suggestions=False
        )
        
        # Sección de IPs
        self.ip_address_input = ft.TextField(
            label="Dirección IP", 
            width=300, 
            border_color="blue", 
            border_radius=10,
            on_change=lambda e: self.update_activity_time()
        )
        
        self.ip_description_input = ft.TextField(
            label="Descripción", 
            width=300, 
            border_color="blue", 
            border_radius=10,
            on_change=lambda e: self.update_activity_time()
        )
        
        # Botones de IPs
        self.add_ip_button = ft.ElevatedButton(
            "Añadir IP", 
            on_click=self.add_ip_click, 
            width=150, 
            bgcolor=ft.Colors.BLUE, 
            color=ft.Colors.WHITE
        )
        
        self.remove_ip_button = ft.ElevatedButton(
            "Eliminar IP", 
            on_click=self.remove_ip_click, 
            width=150, 
            bgcolor=ft.Colors.RED, 
            color=ft.Colors.WHITE
        )

        # Lista de IPs permitidas
        self.allowed_ips_list = ft.ListView(expand=True, spacing=10, padding=20)
        self.refresh_ip_list()
        
        # Checkboxes de acceso
        self.access_frame_uno = ft.Checkbox(label="Acceso a Usuarios", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_dos = ft.Checkbox(label="Acceso a Clientes", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_tres = ft.Checkbox(label="Acceso a Proveedores", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_cuatro = ft.Checkbox(label="Acceso a Cotizaciones", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_cinco = ft.Checkbox(label="Acceso a Recepcion", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_seis = ft.Checkbox(label="Acceso a Leyes", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_siete = ft.Checkbox(label="Acceso a Liquidacion", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_ocho = ft.Checkbox(label="Acceso Caja Uno", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_ocho_uno = ft.Checkbox(label="Acceso Tipo de Cuenta", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_ocho_dos = ft.Checkbox(label="Acceso Caja", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_ocho_tres = ft.Checkbox(label="Acceso Reportes General", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_ocho_cuatro = ft.Checkbox(label="Acceso Reporte Tipo de Cuenta", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_nueve = ft.Checkbox(label="Acceso a Caja Dos", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_nueve_uno = ft.Checkbox(label="Acceso a Reporte 1", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_nueve_dos = ft.Checkbox(label="Acceso a Reporte 2", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_nueve_tres = ft.Checkbox(label="Acceso a Reporte 3", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_nueve_cuatro = ft.Checkbox(label="Acceso a Reporte 4", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_diez = ft.Checkbox(label="Acceso a Frame Tres", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_once = ft.Checkbox(label="Acceso Configuraciones", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_doce = ft.Checkbox(label="Acceso a doce", value=False)
        
        # Botón para habilitar/deshabilitar 2FA
        self.toggle_2fa_button = ft.ElevatedButton(
            "Habilitar 2FA", 
            on_click=self.toggle_2fa_click, 
            width=150, 
            bgcolor=ft.Colors.PURPLE, 
            color=ft.Colors.WHITE
        )
        
        self.register_button = ft.ElevatedButton(
            "REGISTRAR", 
            on_click=self.register_click, 
            width=150, 
            bgcolor=ft.Colors.TEAL, 
            color=ft.Colors.WHITE,
            on_hover=self.on_hover
        )
        self.delete_button = ft.ElevatedButton(
            "ELIMINAR", 
            on_click=self.eliminar_usuario, 
            width=150, 
            bgcolor=ft.Colors.RED, 
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_delete
        )

        self.qr_container = ft.Container(
            content=ft.Column(
                controls=[
                    ft.Text("Código QR para 2FA", size=16, weight="bold"),
                    ft.Image(
                        src_base64="",  # Se actualizará cuando se genere el QR
                        width=200,
                        height=200,
                        visible=False,
                        fit=ft.ImageFit.CONTAIN
                    ),
                    ft.Text("Escanea con tu app de autenticación", size=12, color=ft.Colors.GREY)
                ],
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                spacing=5
            ),
            padding=10,
            visible=False,
            alignment=ft.alignment.center
        )

        self.login_logs_list = ft.ListView(expand=True, spacing=10, padding=20)
        self.refresh_login_logs()

        self.controls = [
            ft.Tabs(
                selected_index=0,
                tabs=[
                    ft.Tab(
                        text="Usuarios",
                        content=ft.Container(
                            content=ft.Column(
                                controls=[
                                    ft.Text(sanitize_output("REGISTRO DE USUARIOS"), 
                                        size=24, 
                                        weight="bold", 
                                        text_align="center", 
                                        color=ft.Colors.TEAL_700),
                                    
                                    self.csrf_token_input,
                                    
                                    ft.ResponsiveRow(
                                        controls=[
                                            ft.Column(
                                                col={"xs": 12, "sm": 4},
                                                controls=[self.username_input],
                                                alignment=ft.alignment.center
                                            ),
                                            ft.Column(
                                                col={"xs": 12, "sm": 4},
                                                controls=[self.password_input],
                                                alignment=ft.alignment.center
                                            ),
                                            ft.Column(
                                                col={"xs": 12, "sm": 4},
                                                controls=[self.email_input],
                                                alignment=ft.alignment.center
                                            )
                                        ],
                                        alignment=ft.MainAxisAlignment.CENTER,
                                        spacing=10,
                                        run_spacing=10
                                    ),
                                    
                                    ft.ResponsiveRow(
                                        controls=[
                                            ft.Container(
                                                content=self.register_button,
                                                col={"xs": 12, "sm": 6, "md": 3, "lg": 2},
                                                padding=10,
                                                alignment=ft.alignment.center
                                            ),
                                            ft.Container(
                                                content=self.delete_button,
                                                col={"xs": 12, "sm": 6, "md": 3, "lg": 2},
                                                padding=10,
                                                alignment=ft.alignment.center
                                            ),
                                            ft.Container(
                                                content=self.toggle_2fa_button,
                                                col={"xs": 12, "sm": 6, "md": 3, "lg": 2},
                                                padding=10,
                                                alignment=ft.alignment.center
                                            )
                                        ],
                                        alignment=ft.MainAxisAlignment.CENTER,
                                        spacing=10,
                                        run_spacing=10
                                    ),
                                    self.qr_container,

                                    ft.Divider(),
                                    ft.Container(
                                        content=ft.ResponsiveRow(
                                            controls=[
                                                ft.Column(
                                                    col={"xs": 12, "sm": 6, "md": 3},
                                                    controls=[
                                                        self.access_frame_uno,
                                                        self.access_frame_dos,
                                                        self.access_frame_tres,
                                                        self.access_frame_cuatro,
                                                        self.access_frame_cinco,
                                                    ],
                                                    spacing=5
                                                ),
                                                ft.Column(
                                                    col={"xs": 12, "sm": 6, "md": 3},
                                                    controls=[
                                                        self.access_frame_seis,
                                                        self.access_frame_siete,
                                                        self.access_frame_ocho,
                                                        self.access_frame_ocho_uno,
                                                        self.access_frame_ocho_dos,
                                                    ],
                                                    spacing=5
                                                ),
                                                ft.Column(
                                                    col={"xs": 12, "sm": 6, "md": 3},
                                                    controls=[
                                                        self.access_frame_ocho_tres,
                                                        self.access_frame_ocho_cuatro,
                                                        self.access_frame_nueve,
                                                        self.access_frame_nueve_uno,
                                                        self.access_frame_nueve_dos,
                                                    ],
                                                    spacing=5
                                                ),
                                                ft.Column(
                                                    col={"xs": 12, "sm": 6, "md": 3},
                                                    controls=[
                                                        self.access_frame_nueve_tres,
                                                        self.access_frame_nueve_cuatro,
                                                        self.access_frame_diez,
                                                        self.access_frame_once,
                                                        self.access_frame_doce,
                                                    ],
                                                    spacing=5
                                                )
                                            ],
                                            spacing=10,
                                            alignment=ft.MainAxisAlignment.CENTER
                                        ),
                                        height=250,
                                        border_radius=10,
                                        padding=10
                                    )
                                ],
                                scroll=ft.ScrollMode.AUTO,
                                spacing=20,
                                horizontal_alignment=ft.CrossAxisAlignment.CENTER
                            ),
                            padding=10,
                            alignment=ft.alignment.center
                        )
                    ),
                    
                    ft.Tab(
                        text="IPs Permitidas",
                        content=ft.Container(
                            content=ft.Column(
                                controls=[
                                    ft.Container(
                                        content=ft.Text(sanitize_output("GESTIÓN DE IPs PERMITIDAS"), 
                                        size=24, weight="bold", text_align="center", color=ft.Colors.BLUE),
                                        alignment=ft.alignment.center,
                                        padding=ft.padding.all(10)),
                                    ft.Row(
                                        controls=[
                                            self.ip_address_input,
                                            self.ip_description_input
                                        ],
                                        alignment=ft.MainAxisAlignment.CENTER
                                    ),
                                    ft.Row(
                                        controls=[
                                            self.add_ip_button,
                                            self.remove_ip_button
                                        ],
                                        alignment=ft.MainAxisAlignment.CENTER,
                                        spacing=60
                                    ),
                                    ft.Divider(),
                                    ft.Text("IPs Permitidas:", size=16, weight="bold"),
                                    self.allowed_ips_list
                                ],
                                scroll=ft.ScrollMode.AUTO
                            ),
                            padding=20
                        )
                    ),
                    ft.Tab(
                        text="Registro de Sesiones",
                        content=ft.Container(
                            content=ft.Column(
                                controls=[
                                    ft.Container(
                                        content=ft.Text(sanitize_output("REGISTRO DE INICIOS DE SESIÓN"), 
                                                       size=24, weight="bold", 
                                                       text_align="center", 
                                                       color=ft.Colors.PURPLE),
                                        alignment=ft.alignment.center,
                                        padding=ft.padding.all(10)
                                    ),
                                    ft.Row(
                                        controls=[
                                            ft.ElevatedButton(
                                                "Actualizar",
                                                on_click=lambda e: self.refresh_login_logs(),
                                                icon=ft.Icons.REFRESH,
                                                bgcolor=ft.Colors.PURPLE,
                                                color=ft.Colors.WHITE
                                            )
                                        ],
                                        alignment=ft.MainAxisAlignment.CENTER
                                    ),
                                    ft.Divider(),
                                    self.login_logs_list
                                ],
                                scroll=ft.ScrollMode.AUTO
                            ),
                            padding=20
                        )
                    )
                ],
                expand=True
            )
        ]
        
    def toggle_2fa_click(self, e):
        """Maneja el clic para habilitar/deshabilitar 2FA"""
        username = self.username_input.value.strip()
        if not username:
            self.mostrar_mensaje100("Debe ingresar un nombre de usuario", "error")
            return
            
        try:
            conn = CConection.ConexionBasedeDatos()
            if conn is None:
                self.mostrar_mensaje100("Error de conexión a la base de datos", "error")
                return
                
            with conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        "SELECT id, two_factor_enabled FROM users WHERE BINARY username = %s",
                        (username,)
                    )
                    result = cursor.fetchone()
                    
                    if not result:
                        self.mostrar_mensaje100("Usuario no encontrado", "error")
                        return
                        
                    user_id, is_enabled = result
                    
                    if is_enabled:
                        if disable_2fa(user_id):
                            self.toggle_2fa_button.text = "Habilitar 2FA"
                            if hasattr(self, 'qr_container'):
                                self.qr_container.visible = False
                            self.mostrar_mensaje100("Autenticación de dos factores deshabilitada", "éxito")
                        else:
                            self.mostrar_mensaje100("Error al deshabilitar 2FA", "error")
                    else:
                        provisioning_uri, qr_img_bytes = setup_2fa(user_id, username)
                        if provisioning_uri and qr_img_bytes:
                            self.show_qr_in_ui(username, qr_img_bytes, provisioning_uri)
                            self.show_qr_dialog(username, qr_img_bytes, provisioning_uri)
                            self.toggle_2fa_button.text = "Deshabilitar 2FA"
                        else:
                            self.mostrar_mensaje100("Error al configurar 2FA", "error")
                            
                    self.page.update()
                    
        except Exception as e:
            logging.error(f"Error al manejar 2FA: {e}")
            self.mostrar_mensaje100("Error al manejar 2FA", "error")

    def show_qr_dialog(self, username, qr_img_bytes, provisioning_uri):
        qr_image = ft.Image(
            src_base64=base64.b64encode(qr_img_bytes.getvalue()).decode('utf-8'),
            width=300,
            height=300,
            fit=ft.ImageFit.CONTAIN
        )
        
        content = ft.Column(
            controls=[
                ft.Text("Configuración de Autenticación en Dos Pasos", size=20, weight="bold"),
                ft.Divider(),
                ft.Text(f"Usuario: {username}"),
                ft.Text("Escanea este código QR con tu aplicación de autenticación:"),
                qr_image,
                ft.Text("O ingresa manualmente este código:"),
                ft.Text(provisioning_uri, selectable=True),
                ft.Text("Aplicaciones recomendadas: Google Authenticator, Authy o Microsoft Authenticator"),
                ft.ElevatedButton(
                    "Cerrar",
                    on_click=lambda e: self.close_dialog(e),
                    width=200
                )
            ],
            spacing=10,
            horizontal_alignment=ft.CrossAxisAlignment.CENTER
        )
        
        self.dialog = ft.AlertDialog(
            title=ft.Text("Configurar 2FA"),
            content=content,
            modal=True
        )
        
        self.page.dialog = self.dialog
        self.dialog.open = True
        self.page.update()

    def close_dialog(self, e):
        if hasattr(self, 'dialog'):
            self.dialog.open = False
            self.page.update()

    def show_qr_in_ui(self, username, qr_img_bytes, provisioning_uri):
        qr_image = self.qr_container.content.controls[1]
        qr_image.src_base64 = base64.b64encode(qr_img_bytes.getvalue()).decode('utf-8')
        qr_image.visible = True
        
        instruction_text = self.qr_container.content.controls[2]
        instruction_text.value = f"Escanea con tu app de autenticación o usa: {provisioning_uri}"
        
        self.qr_container.visible = True
        self.show_qr_dialog(username, qr_img_bytes, provisioning_uri)
        self.page.update()

    def show_mfa_verification(self):
        self.page.controls.clear()
        
        mfa_token_input = ft.TextField(
            label="Código de autenticación", 
            width=300, 
            border_color="teal", 
            border_radius=10,
            autofocus=True
        )
        
        def verify_mfa_click(e):
            token = mfa_token_input.value
            if verify_2fa(self.user_id, token):
                self.mfa_pending = False
                log_security_event("2FA_SUCCESS", "Verificación MFA exitosa", 
                                self.user_id, self.current_ip, "INFO")
            else:
                log_security_event("2FA_FAILED", "Código MFA incorrecto", 
                                self.user_id, self.current_ip, "WARNING")
                self.page.add(ft.Text("Código de autenticación inválido", color=ft.Colors.RED, size=20))
                self.page.update()
        
        self.page.add(
            ft.Container(
                content=ft.Column(
                    controls=[
                        ft.Text("Autenticación de Dos Factores", size=24, weight="bold", text_align="center"),
                        ft.Text("Ingresa el código de 6 dígitos de tu aplicación de autenticación", 
                            size=16, text_align="center"),
                        mfa_token_input,
                        ft.ElevatedButton(
                            "Verificar",
                            on_click=verify_mfa_click,
                            width=300,
                            bgcolor=ft.Colors.TEAL,
                            color=ft.Colors.WHITE
                        ),
                        ft.Text("Si perdiste acceso a tu autenticador, contacta al administrador.",
                            size=12, color=ft.Colors.GREY)
                    ],
                    alignment=ft.MainAxisAlignment.CENTER,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                    spacing=20
                ),
                padding=20,
                alignment=ft.alignment.center
            )
        )
        self.page.update()

    def refresh_login_logs(self):
        self.login_logs_list.controls.clear()
        logs = LoginLog.get_login_logs()
        
        if not logs:
            self.login_logs_list.controls.append(
                ft.Text("No hay registros de inicio de sesión", color=ft.Colors.GREY)
            )
        else:
            for log in logs:
                login_time = log['login_time'].strftime("%Y-%m-%d %H:%M:%S") if log['login_time'] else "N/A"
                logout_time = log['logout_time'].strftime("%Y-%m-%d %H:%M:%S") if log['logout_time'] else "Activo"
                
                self.login_logs_list.controls.append(
                    ft.ListTile(
                        title=ft.Text(f"Usuario: {log['username']}"),
                        subtitle=ft.Column([
                            ft.Text(f"IP: {log['ip_address']}"),
                            ft.Text(f"Inicio: {login_time}"),
                            ft.Text(f"Fin: {logout_time}")
                        ]),
                        leading=ft.Icon(ft.Icons.LOGIN, color=ft.Colors.PURPLE),
                        trailing=ft.Icon(ft.Icons.LOGOUT, color=ft.Colors.PURPLE) if log['logout_time'] else 
                                ft.Icon(ft.Icons.CHECK_CIRCLE, color=ft.Colors.GREEN),
                    )
                )
        self.page.update()

    def refresh_ip_list(self):
        self.allowed_ips_list.controls.clear()
        ips = get_all_allowed_ips()
        
        if not ips:
            self.allowed_ips_list.controls.append(
                ft.Text("No hay IPs registradas", color=ft.colors.GREY)
            )
        else:
            for ip in ips:
                self.allowed_ips_list.controls.append(
                    ft.ListTile(
                        title=ft.Text(ip['ip_address']),
                        subtitle=ft.Text(ip['description'] or "Sin descripción"),
                        trailing=ft.Icon(ft.Icons.CHECK_CIRCLE, color=ft.Colors.GREEN)
                    )
                )
        self.page.update()

    def add_ip_click(self, e):
        ip = self.ip_address_input.value.strip()
        desc = self.ip_description_input.value.strip() or None
        
        if not ip:
            self.show_snackbar("Debe ingresar una dirección IP", ft.colors.RED)
            return
        
        if add_allowed_ip(ip, desc):
            self.show_snackbar(f"IP {ip} añadida correctamente", ft.Colors.GREEN)
            self.ip_address_input.value = ""
            self.ip_description_input.value = ""
            self.refresh_ip_list()
        else:
            self.show_snackbar(f"La IP {ip} ya existe o hubo un error", ft.Colors.RED)

    def remove_ip_click(self, e):
        ip = self.ip_address_input.value.strip()
        
        if not ip:
            self.show_snackbar("Debe ingresar una dirección IP", ft.Colors.RED)
            return
        
        if remove_allowed_ip(ip):
            self.show_snackbar(f"IP {ip} eliminada correctamente", ft.Colors.GREEN)
            self.ip_address_input.value = ""
            self.ip_description_input.value = ""
            self.refresh_ip_list()
        else:
            self.show_snackbar(f"No se encontró la IP {ip}", ft.Colors.RED)

    def show_snackbar(self, message, color):
        self.page.snack_bar = ft.SnackBar(
            content=ft.Text(message),
            bgcolor=color
        )
        self.page.snack_bar.open = True
        self.page.update()

    def on_hover(self, e):
        if e.data == "true":
            self.register_button.bgcolor = "white"
        else:
            self.register_button.bgcolor = "teal"
        self.register_button.update()

    def on_hover_delete(self, e):
        if e.data == "true":
            self.delete_button.bgcolor = "darkred"
        else:
            self.delete_button.bgcolor = "red"
        self.delete_button.update()

    def is_valid_email(self, email):
        regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
        return re.match(regex, email) is not None    

    def register_click(self, e):
        if not validate_csrf_token(self.csrf_token_input.value, self.csrf_token):
            self.mostrar_mensaje100("Token CSRF inválido", "error")
            return
            
        username = self.username_input.value.strip()
        password = self.password_input.value
        email = self.email_input.value
        access_frame_uno = self.access_frame_uno.value
        access_frame_dos = self.access_frame_dos.value
        access_frame_tres = self.access_frame_tres.value
        access_frame_cuatro = self.access_frame_cuatro.value
        access_frame_cinco = self.access_frame_cinco.value
        access_frame_seis = self.access_frame_seis.value
        access_frame_siete = self.access_frame_siete.value
        access_frame_ocho = self.access_frame_ocho.value
        access_frame_ocho_uno = self.access_frame_ocho_uno.value
        access_frame_ocho_dos = self.access_frame_ocho_dos.value
        access_frame_ocho_tres = self.access_frame_ocho_tres.value
        access_frame_ocho_cuatro = self.access_frame_ocho_cuatro.value 
        access_frame_nueve = self.access_frame_nueve.value
        access_frame_nueve_uno = self.access_frame_nueve_uno.value
        access_frame_nueve_dos = self.access_frame_nueve_dos.value
        access_frame_nueve_tres = self.access_frame_nueve_tres.value
        access_frame_nueve_cuatro = self.access_frame_nueve_cuatro.value
        access_frame_diez = self.access_frame_diez.value
        access_frame_once = self.access_frame_once.value
        access_frame_doce = self.access_frame_doce.value

        if not all([username, password, email]):
            self.mostrar_mensaje100("Por favor, completa todos los campos.", "error")
            return

        if not self.is_valid_username(username):
            self.mostrar_mensaje100("Nombre de usuario inválido. Solo se permiten letras, números y guiones bajos.", "error")
            return

        if not is_strong_password(password):
            self.mostrar_mensaje100(
                f"La contraseña debe tener al menos {PASSWORD_MIN_LENGTH} caracteres y no ser común.", 
                "error")
            return

        if not self.is_valid_email(email):
            self.mostrar_mensaje100("Correo electrónico no válido.", "error")
            return
        
        result = self.register_user(
            username=username,
            password=password,
            email=email,
            access_frame_uno=access_frame_uno,
            access_frame_dos=access_frame_dos,
            access_frame_tres=access_frame_tres,
            access_frame_cuatro=access_frame_cuatro,
            access_frame_cinco=access_frame_cinco,
            access_frame_seis=access_frame_seis,
            access_frame_siete=access_frame_siete,
            access_frame_ocho=access_frame_ocho,
            access_frame_ocho_uno=access_frame_ocho_uno,
            access_frame_ocho_dos=access_frame_ocho_dos,
            access_frame_ocho_tres=access_frame_ocho_tres,
            access_frame_ocho_cuatro=access_frame_ocho_cuatro,
            access_frame_nueve=access_frame_nueve,
            access_frame_nueve_uno=access_frame_nueve_uno,
            access_frame_nueve_dos=access_frame_nueve_dos,
            access_frame_nueve_tres=access_frame_nueve_tres,
            access_frame_nueve_cuatro=access_frame_nueve_cuatro,
            access_frame_diez=access_frame_diez,
            access_frame_once=access_frame_once,
            access_frame_doce=access_frame_doce
        )
        
        if "exitoso" in result:
            self.mostrar_mensaje100(result, "éxito")
            self._clear_form()
        else:
            self.mostrar_mensaje100(result, "error")
        self.page.update()

    def is_valid_username(self, username):
        return re.match(r'^[a-zA-Z0-9_]{4,30}$', username) is not None

    def register_user(self, username, password, email, access_frame_uno, access_frame_dos, access_frame_tres, 
                    access_frame_cuatro, access_frame_cinco, access_frame_seis, access_frame_siete, 
                    access_frame_ocho, access_frame_ocho_uno, access_frame_ocho_dos, access_frame_ocho_tres, 
                    access_frame_ocho_cuatro, access_frame_nueve, access_frame_nueve_uno, access_frame_nueve_dos, 
                    access_frame_nueve_tres, access_frame_nueve_cuatro, access_frame_diez, access_frame_once, 
                    access_frame_doce):
        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor(prepared=True) as cursor:
                    cursor.execute("SELECT username FROM users WHERE BINARY username = %s", (username,))
                    if cursor.fetchone():
                        return "El nombre de usuario ya existe"

                    hashed_pw = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt(14)).decode('utf-8')
                    
                    cursor.execute(
                        """INSERT INTO users 
                        (username, password, email, access_frame_uno, access_frame_dos, access_frame_tres, 
                        access_frame_cuatro, access_frame_cinco, access_frame_seis, access_frame_siete, 
                        access_frame_ocho, access_frame_ocho_uno, access_frame_ocho_dos, access_frame_ocho_tres, 
                        access_frame_ocho_cuatro, access_frame_nueve, access_frame_nueve_uno, access_frame_nueve_dos, 
                        access_frame_nueve_tres, access_frame_nueve_cuatro, access_frame_diez, access_frame_once, 
                        access_frame_doce, password_changed_at) 
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)""",
                        (username, hashed_pw, email, access_frame_uno, access_frame_dos, access_frame_tres, 
                        access_frame_cuatro, access_frame_cinco, access_frame_seis, access_frame_siete, 
                        access_frame_ocho, access_frame_ocho_uno, access_frame_ocho_dos, access_frame_ocho_tres, 
                        access_frame_ocho_cuatro, access_frame_nueve, access_frame_nueve_uno, access_frame_nueve_dos, 
                        access_frame_nueve_tres, access_frame_nueve_cuatro, access_frame_diez, access_frame_once, 
                        access_frame_doce, datetime.now())
                    )
                    cnx.commit()
                    
                    log_security_event("USER_REGISTERED", "Nuevo usuario registrado", None, 
                                      ip_validator.get_current_ip(), "INFO")
                    return "Usuario registrado exitosamente"
        except Error as e:
            logging.error('Error de Mostrar Datos: {}'.format(e))
            return f"Error de base de datos: {str(e)}"
        except Exception as e:
            logging.error(f"Error inesperado al registrar usuario: {str(e)}")
            return f"Error inesperado: {str(e)}"

    def _clear_form(self):
        self.username_input.value = ""
        self.password_input.value = ""
        self.email_input.value = ""
        self.access_frame_uno.value = False
        self.access_frame_dos.value = False
        self.access_frame_tres.value = False
        self.access_frame_cuatro.value = False
        self.access_frame_cinco.value = False
        self.access_frame_seis.value = False
        self.access_frame_siete.value = False
        self.access_frame_ocho.value = False
        self.access_frame_ocho_uno.value = False
        self.access_frame_ocho_dos.value = False
        self.access_frame_ocho_tres.value = False
        self.access_frame_ocho_cuatro.value = False
        self.access_frame_nueve.value = False
        self.access_frame_nueve_uno.value = False
        self.access_frame_nueve_dos.value = False
        self.access_frame_nueve_tres.value = False
        self.access_frame_nueve_cuatro.value = False
        self.access_frame_diez.value = False
        self.access_frame_once.value = False
        self.access_frame_doce.value = False

    def eliminar_usuario(self, e):
        if not validate_csrf_token(self.csrf_token_input.value, self.csrf_token):
            self.mostrar_mensaje100("Token CSRF inválido", "error")
            return
            
        username = self.username_input.value

        if username:
            result = self.delete_user(username)
            if "exitoso" in result:
                self.mostrar_mensaje100(result, "éxito")
            else:
                self.mostrar_mensaje100(result, "error")
            self._clear_form()
            self.page.update()
        else:
            self.mostrar_mensaje100("Por favor, ingresa el nombre de usuario.", "error")

    def delete_user(self, username):
        cnx = CConection.ConexionBasedeDatos()
        if cnx is None:
            return "Error de conexión a la base de datos."

        cursor = cnx.cursor()
        try:
            cursor.execute("SELECT id FROM users WHERE BINARY username = %s", (username,))
            user_id = cursor.fetchone()
            
            if not user_id:
                return "Usuario no encontrado"
                
            user_id = user_id[0]
            
            cursor.execute("DELETE FROM users WHERE BINARY username = %s", (username,))
            cnx.commit()
            
            log_security_event("USER_DELETED", f"Usuario {username} eliminado", user_id, 
                             ip_validator.get_current_ip(), "WARNING")
            return "Usuario eliminado exitosamente"
        except Error as e:
            logging.error(f"Error al eliminar usuario: {e}")
            return f"El error '{e}' ocurrió"
        finally:
            cursor.close()
            cnx.close()

    def build(self):
        return ft.Column(controls=self.controls)



class SideMenu(ft.Control):
    def __init__(self, page, navigate, user_access):
        super().__init__()
        self.page = page
        self.navigate = navigate
        self.user_access = user_access
        self.menu_visible = True  # Inicia visible
        self.submenu_visible = False
        self.submenu_nueve_visible = False  # Para frame_nueve
        self.submenu_diez_visible = False  # Para frame_diez
        self.submenu_once_visible = False  # Para frame_once
        self.username = None  # Propiedad para almacenar el nombre de usuario
        self.create_ui_elements()

    def create_ui_elements(self):
        #print("Creando elementos de la interfaz...")  # Depuración
        self.menu_items = [
            ft.Container(
                content=ft.ListTile(
                    leading=ft.Icon(ft.Icons.HOME, color=ft.Colors.BLACK),
                    title=ft.Text("Home", size=12, color=ft.Colors.BLACK),
                    bgcolor="white",
                    #bgcolor=ft.Colors.WHITE,
                    on_click=lambda e: self.navigate("login"),
                ),
                border_radius=ft.border_radius.all(10),
            ),
        ]

        if self.user_access.get("access_frame_uno"):
            self.menu_items.append(
                ft.Container(
                    content=ft.ListTile(
                        leading=ft.Icon(ft.Icons.PERSON, color=ft.Colors.BLACK),
                        title=ft.Text("Usuarios", size=12, color=ft.Colors.BLACK),
                        bgcolor=ft.Colors.WHITE,
                        on_click=lambda e: self.navigate("frame_uno"),
                    ),
                    border_radius=ft.border_radius.all(10),
                )
            )

        if self.user_access.get("access_frame_dos"):
            self.menu_items.append(
                ft.Container(
                    content=ft.ListTile(
                        leading=ft.Icon(ft.Icons.TABLE_CHART, color=ft.Colors.BLACK),
                        title=ft.Text("Clientes", size=12, color=ft.Colors.BLACK),
                        bgcolor=ft.Colors.WHITE,
                        on_click=lambda e: self.navigate("frame_dos"),
                    ),
                    border_radius=ft.border_radius.all(10),
                )
            )

        if self.user_access.get("access_frame_tres"):
            self.menu_items.append(
                ft.Container(
                    content=ft.ListTile(
                        leading=ft.Icon(ft.Icons.TABLE_ROWS, color=ft.Colors.BLACK),
                        title=ft.Text("Cotizaciones", size=12, color=ft.Colors.BLACK),
                        bgcolor=ft.Colors.WHITE,
                        on_click=lambda e: self.navigate("frame_tres"),
                    ),
                    border_radius=ft.border_radius.all(10),
                )
            )

        if self.user_access.get("access_frame_cuatro"):
            self.menu_items.append(
                ft.Container(
                    content=ft.ListTile(
                        leading=ft.Icon(ft.Icons.TABLE_BAR, color=ft.Colors.BLACK),
                        title=ft.Text("Recepcion", size=12, color=ft.Colors.BLACK),
                        bgcolor=ft.Colors.WHITE,
                        on_click=lambda e: self.navigate("frame_cuatro"),
                    ),
                    border_radius=ft.border_radius.all(10),
                )
            )

        if self.user_access.get("access_frame_cinco"):
            self.menu_items.append(
                ft.Container(
                    content=ft.ListTile(
                        leading=ft.Icon(ft.Icons.TABLE_VIEW, color=ft.Colors.BLACK),
                        title=ft.Text("Leyes", size=12, color=ft.Colors.BLACK),
                        bgcolor=ft.Colors.WHITE,
                        on_click=lambda e: self.navigate("frame_cinco"),
                    ),
                    border_radius=ft.border_radius.all(10),
                )
            )

        if self.user_access.get("access_frame_seis"):
            self.menu_items.append(
                ft.Container(
                    content=ft.ListTile(
                        leading=ft.Icon(ft.Icons.TABLET_ANDROID, color=ft.Colors.BLACK),
                        title=ft.Text("Liquidaciones", size=12, color=ft.Colors.BLACK),
                        bgcolor=ft.Colors.WHITE,
                        on_click=lambda e: self.navigate("frame_seis"),
                    ),
                    border_radius=ft.border_radius.all(10),
                )
            )

        if self.user_access.get("access_frame_siete"):
            self.menu_items.append(
                ft.Container(
                    content=ft.ListTile(
                        leading=ft.Icon(ft.Icons.PIVOT_TABLE_CHART_OUTLINED, color=ft.Colors.BLACK),
                        title=ft.Text("B. Metalurgico", size=12, color=ft.Colors.BLACK),
                        bgcolor=ft.Colors.WHITE,
                        on_click=lambda e: self.navigate("frame_siete"),
                    ),
                    border_radius=ft.border_radius.all(10),
                )
            )

        if self.user_access.get("access_frame_ocho"):
            submenu_items = []

            if self.user_access.get("access_frame_ocho_uno"):
                submenu_items.append(
                    ft.Container(
                        content=ft.ListTile(
                            leading=ft.Icon(ft.Icons.ARROW_RIGHT, color=ft.Colors.BLACK),
                            title=ft.Text("Caja Uno", size=12, color=ft.Colors.BLACK),
                            bgcolor=ft.Colors.WHITE,
                            on_click=lambda e: self.navigate("frame_ocho_uno"),
                        ),
                        border_radius=ft.border_radius.all(10),
                    )
                )
            if self.user_access.get("access_frame_ocho_dos"):
                submenu_items.append(
                    ft.Container(
                        content=ft.ListTile(
                            leading=ft.Icon(ft.Icons.ARROW_RIGHT, color=ft.Colors.BLACK),
                            title=ft.Text("Tipos de Gasto", size=12, color=ft.Colors.BLACK),
                            bgcolor=ft.Colors.WHITE,
                            on_click=lambda e: self.navigate("frame_ocho_dos"),
                        ),
                        border_radius=ft.border_radius.all(10),
                    )
                )
            if self.user_access.get("access_frame_ocho_tres"):
                submenu_items.append(
                    ft.Container(
                        content=ft.ListTile(
                            leading=ft.Icon(ft.Icons.ARROW_RIGHT, color=ft.Colors.BLACK),
                            title=ft.Text("Reportes Caja", size=12, color=ft.Colors.BLACK),
                            bgcolor=ft.Colors.WHITE,
                            on_click=lambda e: self.navigate("frame_ocho_tres"),
                        ),
                        border_radius=ft.border_radius.all(10),
                    )
                )
            if self.user_access.get("access_frame_ocho_cuatro"):
                submenu_items.append(
                    ft.Container(
                        content=ft.ListTile(
                            leading=ft.Icon(ft.Icons.ARROW_RIGHT, color=ft.Colors.BLACK),
                            title=ft.Text("Tipos de Gasto", size=12, color=ft.Colors.BLACK),
                            bgcolor=ft.Colors.WHITE,
                            on_click=lambda e: self.navigate("frame_ocho_cuatro"),
                        ),
                        border_radius=ft.border_radius.all(10),
                    )
                )

            if submenu_items:
                self.menu_items.append(
                    ft.Container(
                        content=ft.Column(
                            [
                                ft.ListTile(
                                    leading=ft.Icon(ft.Icons.ACCOUNT_CIRCLE, color=ft.Colors.BLACK),
                                    title=ft.Text("Caja Uno", size=12, color=ft.Colors.BLACK),
                                    bgcolor=ft.Colors.WHITE,
                                    #on_click=lambda e: self.navigate("frame_ocho"),
                                    on_click=self.combined_actions  # Alternar submenú al hacer clic
                                ),
                                # Submenú (inicialmente oculto)
                                ft.Column(
                                    submenu_items,
                                    visible=self.submenu_visible,  # Controlar visibilidad del submenú
                                    spacing=5,
                                ),
                            ],#self.navigate("frame_ocho"),
                            spacing=5,
                        ),
                        border_radius=ft.border_radius.all(10),
                    )
                )

        if self.user_access.get("access_frame_nueve"):
            submenu_nueve_items = []

            if self.user_access.get("access_frame_nueve_uno"):
                submenu_nueve_items.append(
                    ft.Container(
                        content=ft.ListTile(
                            leading=ft.Icon(ft.Icons.ARROW_RIGHT, color=ft.Colors.BLACK),
                            title=ft.Text("Frame Nueve Uno", size=12, color=ft.Colors.BLACK),
                            bgcolor=ft.Colors.WHITE,
                            on_click=lambda e: self.navigate("frame_nueve_uno"),
                        ),
                        border_radius=ft.border_radius.all(10),
                    )
                )
            if self.user_access.get("access_frame_nueve_dos"):
                submenu_nueve_items.append(
                    ft.Container(
                        content=ft.ListTile(
                            leading=ft.Icon(ft.Icons.ARROW_RIGHT, color=ft.Colors.BLACK),
                            title=ft.Text("Frame Nueve Dos", size=12, color=ft.Colors.BLACK),
                            bgcolor=ft.Colors.WHITE,
                            on_click=lambda e: self.navigate("frame_nueve_dos"),
                        ),
                        border_radius=ft.border_radius.all(10),
                    )
                )
            if self.user_access.get("access_frame_nueve_tres"):
                submenu_nueve_items.append(
                    ft.Container(
                        content=ft.ListTile(
                            leading=ft.Icon(ft.Icons.ARROW_RIGHT, color=ft.Colors.BLACK),
                            title=ft.Text("Frame Nueve Tres", size=12, color=ft.Colors.BLACK),
                            bgcolor=ft.Colors.WHITE,
                            on_click=lambda e: self.navigate("frame_nueve_tres"),
                        ),
                        border_radius=ft.border_radius.all(10),
                    )
                )
            if self.user_access.get("access_frame_nueve_cuatro"):
                submenu_nueve_items.append(
                    ft.Container(
                        content=ft.ListTile(
                            leading=ft.Icon(ft.Icons.ARROW_RIGHT, color=ft.Colors.BLACK),
                            title=ft.Text("Frame Nueve Cuatro", size=12, color=ft.Colors.BLACK),
                            bgcolor=ft.Colors.WHITE,
                            on_click=lambda e: self.navigate("frame_nueve_cuatro"),
                        ),
                        border_radius=ft.border_radius.all(10),
                    )
                )

            if submenu_nueve_items:
                self.menu_items.append(
                    ft.Container(
                        content=ft.Column(
                            [
                                ft.ListTile(
                                    leading=ft.Icon(ft.Icons.ABC_OUTLINED, color=ft.Colors.BLACK),
                                    title=ft.Text("Caja Dos", size=12, color=ft.Colors.BLACK),
                                    bgcolor=ft.Colors.WHITE,
                                    on_click=self.combined_actions_nueve  # Alternar submenú al hacer clic
                                ),
                                # Submenú (inicialmente oculto)
                                ft.Column(
                                    submenu_nueve_items,
                                    visible=self.submenu_nueve_visible,  # Controlar visibilidad del submenú
                                    spacing=5,
                                ),
                            ],
                            spacing=5,
                        ),
                        border_radius=ft.border_radius.all(10),
                    )
                )

        if self.user_access.get("access_frame_diez"):
            submenu_diez_items = [
                ft.Container(
                    content=ft.ListTile(
                        leading=ft.Icon(ft.Icons.ARROW_RIGHT, color=ft.Colors.BLACK),
                        title=ft.Text("Frame Diez Uno", size=12, color=ft.Colors.BLACK),
                        bgcolor=ft.Colors.WHITE,
                        on_click=lambda e: self.navigate("frame_diez_uno"),
                    ),
                    border_radius=ft.border_radius.all(10),
                ),
                ft.Container(
                    content=ft.ListTile(
                        leading=ft.Icon(ft.Icons.ARROW_RIGHT, color=ft.Colors.BLACK),
                        title=ft.Text("Frame Diez Dos", size=12, color=ft.Colors.BLACK),
                        bgcolor=ft.Colors.WHITE,
                        on_click=lambda e: self.navigate("frame_diez_dos"),
                    ),
                    border_radius=ft.border_radius.all(10),
                ),
                ft.Container(
                    content=ft.ListTile(
                        leading=ft.Icon(ft.Icons.ARROW_RIGHT, color=ft.Colors.BLACK),
                        title=ft.Text("Frame Diez Tres", size=12, color=ft.Colors.BLACK),
                        bgcolor=ft.Colors.WHITE,
                        on_click=lambda e: self.navigate("frame_diez_tres"),
                    ),
                    border_radius=ft.border_radius.all(10),
                ),
                ft.Container(
                    content=ft.ListTile(
                        leading=ft.Icon(ft.Icons.ARROW_RIGHT, color=ft.Colors.BLACK),
                        title=ft.Text("Frame Diez Cuatro", size=12, color=ft.Colors.BLACK),
                        bgcolor=ft.Colors.WHITE,
                        on_click=lambda e: self.navigate("frame_diez_cuatro"),
                    ),
                    border_radius=ft.border_radius.all(10),
                ),
                ft.Container(
                    content=ft.ListTile(
                        leading=ft.Icon(ft.Icons.ARROW_RIGHT, color=ft.Colors.BLACK),
                        title=ft.Text("Frame Diez Cinco", size=12, color=ft.Colors.BLACK),
                        bgcolor=ft.Colors.WHITE,
                        on_click=lambda e: self.navigate("frame_diez_cinco"),
                    ),
                    border_radius=ft.border_radius.all(10),
                ),
                ft.Container(
                    content=ft.ListTile(
                        leading=ft.Icon(ft.Icons.ARROW_RIGHT, color=ft.Colors.BLACK),
                        title=ft.Text("Frame Diez Seis", size=12, color=ft.Colors.BLACK),
                        bgcolor=ft.Colors.WHITE,
                        on_click=lambda e: self.navigate("frame_diez_seis"),
                    ),
                    border_radius=ft.border_radius.all(10),
                ),
                ft.Container(
                    content=ft.ListTile(
                        leading=ft.Icon(ft.Icons.ARROW_RIGHT, color=ft.Colors.BLACK),
                        title=ft.Text("Frame Diez Siete", size=12, color=ft.Colors.BLACK),
                        bgcolor=ft.Colors.WHITE,
                        on_click=lambda e: self.navigate("frame_diez_siete"),
                    ),
                    border_radius=ft.border_radius.all(10),
                ),
                ft.Container(
                    content=ft.ListTile(
                        leading=ft.Icon(ft.Icons.ARROW_RIGHT, color=ft.Colors.BLACK),
                        title=ft.Text("Frame Diez Ocho", size=12, color=ft.Colors.BLACK),
                        bgcolor=ft.Colors.WHITE,
                        on_click=lambda e: self.navigate("frame_diez_ocho"),
                    ),
                    border_radius=ft.border_radius.all(10),
                ),
            ]

            self.menu_items.append(
                ft.Container(
                    content=ft.Column(
                        [
                            ft.ListTile(
                                leading=ft.Icon(ft.Icons.REPLY_ALL_OUTLINED, color=ft.Colors.BLACK),
                                title=ft.Text("Reportes", size=12, color=ft.Colors.BLACK),
                                bgcolor=ft.Colors.WHITE,
                                on_click=self.combined_actions_diez  # Alternar submenú al hacer clic
                            ),
                            # Submenú (inicialmente oculto)
                            ft.Column(
                                submenu_diez_items,
                                visible=self.submenu_diez_visible,  # Controlar visibilidad del submenú
                                spacing=5,
                            ),
                        ],
                        spacing=5,
                    ),
                    border_radius=ft.border_radius.all(10),
                )
            )

        if self.user_access.get("access_frame_once"):
            submenu_once_items = [
                ft.Container(
                    content=ft.ListTile(
                        leading=ft.Icon(ft.Icons.ARROW_RIGHT, color=ft.Colors.BLACK),
                        title=ft.Text("Frame Once Uno", size=12, color=ft.Colors.BLACK),
                        bgcolor=ft.Colors.WHITE,
                        on_click=lambda e: self.navigate("frame_once_uno"),
                    ),
                    border_radius=ft.border_radius.all(10),
                ),
                ft.Container(
                    content=ft.ListTile(
                        leading=ft.Icon(ft.Icons.ARROW_RIGHT, color=ft.Colors.BLACK),
                        title=ft.Text("Frame Once Dos", size=12, color=ft.Colors.BLACK),
                        bgcolor=ft.Colors.WHITE,
                        on_click=lambda e: self.navigate("frame_once_dos"),
                    ),
                    border_radius=ft.border_radius.all(10),
                ),
                ft.Container(
                    content=ft.ListTile(
                        leading=ft.Icon(ft.Icons.ARROW_RIGHT, color=ft.Colors.BLACK),
                        title=ft.Text("Frame Once Tres", size=12, color=ft.Colors.BLACK),
                        bgcolor=ft.Colors.WHITE,
                        on_click=lambda e: self.navigate("frame_once_tres"),
                    ),
                    border_radius=ft.border_radius.all(10),
                ),
                ft.Container(
                    content=ft.ListTile(
                        leading=ft.Icon(ft.Icons.ARROW_RIGHT, color=ft.Colors.BLACK),
                        title=ft.Text("Frame Once Cuatro", size=12, color=ft.Colors.BLACK),
                        bgcolor=ft.Colors.WHITE,
                        on_click=lambda e: self.navigate("frame_once_cuatro"),
                    ),
                    border_radius=ft.border_radius.all(10),
                ),
            ]

            self.menu_items.append(
                ft.Container(
                    content=ft.Column(
                        [
                            ft.ListTile(
                                leading=ft.Icon(ft.Icons.SETTINGS, color=ft.Colors.BLACK),
                                title=ft.Text("Configuraciones", size=12, color=ft.Colors.BLACK),
                                bgcolor=ft.Colors.WHITE,
                                on_click=self.combined_actions_once  # Alternar submenú al hacer clic
                            ),
                            # Submenú (inicialmente oculto)
                            ft.Column(
                                submenu_once_items,
                                visible=self.submenu_once_visible,  # Controlar visibilidad del submenú
                                spacing=5,
                            ),
                        ],
                        spacing=5,
                    ),
                    border_radius=ft.border_radius.all(10),
                )
            )

        if self.user_access.get("access_frame_doce"):
            self.menu_items.append(
                ft.Container(
                    content=ft.Image(
                        src="logo.png",  # Ruta de la imagen
                        width=200,  # Ancho de la imagen
                        height=200,  # Alto de la imagen
                        fit=ft.ImageFit.CONTAIN,  # Ajustar la imagen al contenedor,
                        #title=ft.Text("Cooperativas", size=12, color=ft.Colors.BLACK),
                        #bgcolor=ft.Colors.WHITE,
                        #on_click=lambda e: self.navigate("frame_doce"),
                    ),
                    border_radius=ft.border_radius.all(10),
                )
            )

        self.menu = ft.Container(
            content=ft.Column(
                self.menu_items,
                spacing=7,
                scroll=ft.ScrollMode.AUTO
            ),
            width=180,
            border_radius=10,
            visible=self.menu_visible,
            bgcolor=ft.Colors.TEAL,
            padding=7,
        )

    def combined_actions(self, e):
        # Navegar a "frame_ocho" y alternar la visibilidad del submenú
        self.navigate("frame_ocho")
        self.toggle_submenu(e)

    def combined_actions_nueve(self, e):
        # Navegar a "frame_nueve" y alternar la visibilidad del submenú
        self.navigate("frame_nueve")
        self.toggle_submenu_nueve(e)

    def combined_actions_diez(self, e):
        # Navegar a "frame_diez" y alternar la visibilidad del submenú
        self.navigate("frame_diez")
        self.toggle_submenu_diez(e)

    def combined_actions_once(self, e):
        # Navegar a "frame_once" y alternar la visibilidad del submenú
        self.navigate("frame_once")
        self.toggle_submenu_once(e)

    def toggle_submenu(self, e):
        # Alternar la visibilidad del submenú de frame_ocho
        self.submenu_visible = not self.submenu_visible
        self.submenu_visible = self.submenu_visible
        self.create_ui_elements()  # Recrear la interfaz para reflejar los cambios
        self.page.update()  # Actualizar la página

    def toggle_submenu_nueve(self, e):
        # Alternar la visibilidad del submenú de frame_nueve
        self.submenu_nueve_visible = not self.submenu_nueve_visible
        self.submenu_nueve_visible = self.submenu_nueve_visible
        self.create_ui_elements()  # Recrear la interfaz para reflejar los cambios
        self.page.update()  # Actualizar la página

    def toggle_submenu_diez(self, e):
        # Alternar la visibilidad del submenú de frame_diez
        self.submenu_diez_visible = not self.submenu_diez_visible
        self.submenu_diez_visible = self.submenu_diez_visible
        self.create_ui_elements()  # Recrear la interfaz para reflejar los cambios
        self.page.update()  # Actualizar la página

    def toggle_submenu_once(self, e):
        # Alternar la visibilidad del submenú de frame_once
        self.submenu_once_visible = not self.submenu_once_visible
        self.submenu_once_visible = self.submenu_once_visible
        self.create_ui_elements()  # Recrear la interfaz para reflejar los cambios
        self.page.update()  # Actualizar la página

    def toggle_menu(self, e):
        # Alternar la visibilidad del menú
        self.menu_visible = not self.menu_visible
        self.menu.visible = self.menu_visible
        self.page.update()

    def toggle_theme(self, e):
        # Alternar el tema entre claro y oscuro
        if self.page.theme_mode == ft.ThemeMode.DARK:
            self.page.theme_mode = ft.ThemeMode.LIGHT
        else:
            self.page.theme_mode = ft.ThemeMode.DARK
        self.page.update()

    def set_username(self, username):
        # Actualizar el nombre de usuario
        self.username = username
        self.create_ui_elements()

    def show_side_menu(self, content):
        # Mostrar el menú lateral y el contenido principal
        self.page.controls.clear()
        self.page.add(
            ft.Column(
                [
                    ft.Container(
                        content=ft.Row(
                            [
                                ft.IconButton(
                                    icon=ft.Icons.MENU,
                                    on_click=self.toggle_menu,
                                    icon_color=ft.Colors.WHITE,
                                ),
                                ft.Text("EMPRESA MINERA VIRGEN DE COTOCA S.R.L.", size=12, color=ft.Colors.WHITE),
                                ft.Row(
                                    controls=[
                                        ft.Text(f"Usuario: {self.username}", size=12, color=ft.Colors.WHITE) if self.username else ft.Text(""),
                                        ft.IconButton(
                                            icon=ft.Icons.BRIGHTNESS_6,
                                            on_click=self.toggle_theme,
                                            icon_color=ft.Colors.WHITE,
                                            tooltip="Toggle Theme"
                                        )
                                    ],
                                    alignment=ft.MainAxisAlignment.END,
                                    expand=True
                                )
                            ],
                            vertical_alignment=ft.CrossAxisAlignment.CENTER,
                            height=35,
                        ),
                        bgcolor=ft.Colors.TEAL,
                        border_radius=10,
                        padding=ft.padding.symmetric(horizontal=2),
                    ),
                    ft.Row(
                        [
                            self.menu,
                            ft.Container(
                                content=content,
                                expand=True,
                                padding=20,
                                border_radius=10
                            ),
                        ],
                        expand=True,
                    ),
                ],
                expand=True,
            )
        )
        self.page.update()


# =============================================
# CLASE FrameUno CON MEJORAS DE SEGURIDAD
# =============================================

    
class FrameUno(ft.Control):
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.csrf_token = generate_csrf_token()
        self.last_activity_time = time.time()
        self.qr_image = None
        self.current_user_id = None
        

        # Para la validación de contraseña
        self.password_strength = ft.ProgressBar(width=600, height=7,value=0)
        self.password_strength_text = ft.Text("", size=12)
        self.password_blacklist = ["password", "123456", "qwerty", "admin"]  # Lista de contraseñas débiles

        self.access_controls = {}

        self.create_ui_elements()
        self.start_auto_refresh()

        # Configurar el manejador para cerrar sesión al salir
        import atexit
        atexit.register(self.logout_user)

    def logout_user(self):
        """Registra el cierre de sesión cuando la aplicación se cierra"""
        if hasattr(self, 'current_user_id') and self.current_user_id:
            current_ip = ip_validator.get_current_ip()
            LoginLog.log_logout(self.current_user_id, current_ip)    

    def start_auto_refresh(self, interval=30):
        """Inicia un hilo para actualizar periódicamente los logs de inicio de sesión"""
        def refresh_task():
            while True:
                time.sleep(interval)
                self.refresh_login_logs()
                self.refresh_active_sessions()
    
        threading.Thread(target=refresh_task, daemon=True).start()

    def check_session_timeout(self):
        """Verifica si la sesión ha expirado por inactividad"""
        current_time = time.time()
        if current_time - self.last_activity_time > SESSION_TIMEOUT:
            self.mostrar_mensaje("Sesión expirada por inactividad", "advertencia")
            self.page.go("/login")
            return True
        return False

    def update_activity_time(self):
        """Actualiza el tiempo de última actividad"""
        self.last_activity_time = time.time()

    def validate_username_input(self, e):
        """Valida el nombre de usuario en tiempo real"""
        username = self.username_input.value.strip()
        if not username:
            self.username_input.error_text = None
        elif len(username) < 4:
            self.username_input.error_text = "Mínimo 4 caracteres"
        elif not re.match(r'^[a-zA-Z0-9_]+$', username):
            self.username_input.error_text = "Solo letras, números y _"
        else:
            self.username_input.error_text = None
        self.update_activity_time()
        self.username_input.update()

    def validate_password_strength(self, e):
        """Evalúa y muestra la fortaleza de la contraseña"""
        password = self.password_input.value
        strength = 0
        
        # Longitud mínima
        if len(password) >= 8:
            strength += 0.2
        if len(password) >= 12:
            strength += 0.2
            
        # Complejidad
        if re.search(r'[A-Z]', password):
            strength += 0.2
        if re.search(r'[a-z]', password):
            strength += 0.1
        if re.search(r'[0-9]', password):
            strength += 0.2
        if re.search(r'[^A-Za-z0-9]', password):
            strength += 0.3
            
        # Contraseñas comunes
        if password.lower() in self.password_blacklist:
            strength = 0.1
            
        self.password_strength.value = strength
        
        # Texto descriptivo
        if strength == 0:
            self.password_strength_text.value = ""
            self.password_strength.color = "red"
        elif strength < 0.4:
            self.password_strength_text.value = "Débil"
            self.password_strength.color = "red"
        elif strength < 0.7:
            self.password_strength_text.value = "Moderada"
            self.password_strength.color = "orange"
        else:
            self.password_strength_text.value = "Fuerte"
            self.password_strength.color = "green"
            
        self.update_activity_time()
        self.password_strength.update()
        self.password_strength_text.update()

    def validate_email_input(self, e):
        """Valida el formato del email"""
        email = self.email_input.value
        if not email:
            self.email_input.error_text = None
        elif not is_valid_email(email):
            self.email_input.error_text = "Formato de email inválido"
        else:

            self.email_input.error_text = None
        self.update_activity_time()
        self.email_input.update()

    def validate_ip_input(self, e):
        """Valida el formato de la dirección IP"""
        ip = self.ip_address_input.value.strip()
        if not ip:
            self.ip_address_input.error_text = None
        else:
            try:
                ipaddress.ip_address(ip)
                self.ip_address_input.error_text = None
            except ValueError:
                try:
                    ipaddress.ip_network(ip, strict=False)
                    self.ip_address_input.error_text = None
                except ValueError:
                    self.ip_address_input.error_text = "IP o rango inválido"
        self.update_activity_time()
        self.ip_address_input.update()


    def create_ui_elements(self):
        """Crea todos los elementos de la interfaz de usuario"""
        # Sección de usuarios con protección CSRF
        self.csrf_token_input = ft.TextField(value=self.csrf_token, visible=False)
        
        # Campos de formulario con validación mejorada
        self.username_input = ft.TextField(
            label="Nombre de usuario", 
            width=300, 
            border_color="teal", 
            border_radius=10,
            on_change=self.validate_username_input,
            autocorrect=False,
            enable_suggestions=False
        )
        
        self.password_input = ft.TextField(
            label="Contraseña", 
            password=True, 
            can_reveal_password=False,
            width=300, 
            border_color="teal", 
            border_radius=10,
            on_change=self.validate_password_strength,
            autocorrect=False,
            enable_suggestions=False
        )
        
        self.email_input = ft.TextField(
            label="Correo electrónico", 
            width=300, 
            border_color="teal", 
            border_radius=10,
            on_change=self.validate_email_input,
            autocorrect=False,
            enable_suggestions=False,
        )

        # Sección de IPs
        self.ip_address_input = ft.TextField(
            label="Dirección IP", 
            width=300, 
            border_color="blue", 
            border_radius=10,
            on_change=self.validate_ip_input
        )
        
        self.ip_description_input = ft.TextField(
            label="Descripción", 
            width=300, 
            border_color="blue", 
            border_radius=10,
            on_change=lambda e: self.update_activity_time()
        )
        
        # Botones de IPs
        self.add_ip_button = ft.ElevatedButton(
            "Añadir IP", 
            on_click=self.add_ip_click, 
            width=150, 
            bgcolor=ft.Colors.BLUE, 
            color=ft.Colors.WHITE
        )
        
        self.remove_ip_button = ft.ElevatedButton(
            "Eliminar IP", 
            on_click=self.remove_ip_click, 
            width=150, 
            bgcolor=ft.Colors.RED, 
            color=ft.Colors.WHITE
        )

        # Botón para habilitar/deshabilitar 2FA
        self.toggle_2fa_button = ft.ElevatedButton(
            "Habilitar 2FA", 
            on_click=self.toggle_2fa_click, 
            width=150, 
            bgcolor=ft.Colors.PURPLE, 
            color=ft.Colors.WHITE
        )
        
        # Botones de registro y eliminación
        self.register_button = ft.ElevatedButton(
            "REGISTRAR", 
            on_click=self.register_click, 
            width=150, 
            bgcolor=ft.Colors.TEAL, 
            color=ft.Colors.WHITE,
            on_hover=self.on_hover
        )
        
        self.delete_button = ft.ElevatedButton(
            "ELIMINAR", 
            on_click=self.eliminar_usuario, 
            width=150, 
            bgcolor=ft.Colors.RED, 
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_delete
        )

        # Campo para código 2FA
        self.mfa_code_input = ft.TextField(
            label="Código de verificación",
            width=200,
            visible=False,
            #id="mfa_code_input_field"
        )
        
        self.verify_mfa_button = ft.ElevatedButton(
            "Verificar Código",
            on_click=self.verify_mfa_code,
            width=200,
            visible=False
        )

    # Botón de cierre de sesión
        self.logout_button = ft.ElevatedButton(
            "Cerrar Sesión",
            icon=ft.Icons.LOGOUT,  # Corregido
            on_click=self.logout_click,
            bgcolor=ft.Colors.RED,
            color=ft.Colors.WHITE,
            width=200
        )
        
        # Lista de sesiones activas (solo visible para administradores)
        self.active_sessions_list = ft.ListView(expand=True, spacing=10, padding=20)
        self.refresh_active_sessions()    

        # Contenedor QR
        self.qr_container = ft.Container(
            content=ft.Column(
                controls=[
                    ft.Text("Código QR para 2FA", size=16, weight="bold"),
                    ft.Image(
                        src_base64="",
                        width=200,
                        height=200,
                        visible=False,
                        fit=ft.ImageFit.CONTAIN
                    ),
                    ft.Text("Escanea con tu app de autenticación", size=12, color=ft.Colors.GREY),
                    self.mfa_code_input,
                    self.verify_mfa_button
                ],
                horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                spacing=5
            ),
            padding=10,
            visible=False,
            alignment=ft.alignment.center
        )

        # Checkboxes de acceso
        self.access_frame_uno = ft.Checkbox(label="Acceso a Usuarios", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_dos = ft.Checkbox(label="Acceso a Clientes", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_tres = ft.Checkbox(label="Acceso a Cotizaciones", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_cuatro = ft.Checkbox(label="Acceso a Recepcion", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_cinco = ft.Checkbox(label="Acceso a Leyes", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_seis = ft.Checkbox(label="Acceso a Liquidacion", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_siete = ft.Checkbox(label="Acceso a B Metalurgico", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_ocho = ft.Checkbox(label="Acceso Caja Uno", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_ocho_uno = ft.Checkbox(label="Acceso Caja", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_ocho_dos = ft.Checkbox(label="Acceso Tipos de Cuenta", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_ocho_tres = ft.Checkbox(label="Acceso Reportes Caja", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_ocho_cuatro = ft.Checkbox(label="Acceso Reporte por Tipo de Cuenta", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_nueve = ft.Checkbox(label="Acceso a Caja Dos", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_nueve_uno = ft.Checkbox(label="Acceso a Reporte 1", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_nueve_dos = ft.Checkbox(label="Acceso a Reporte 2", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_nueve_tres = ft.Checkbox(label="Acceso a Reporte 3", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_nueve_cuatro = ft.Checkbox(label="Acceso a Reporte 4", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_diez = ft.Checkbox(label="Acceso a Reportes", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_once = ft.Checkbox(label="Acceso Configuraciones", value=False, on_change=lambda e: self.update_activity_time())
        self.access_frame_doce = ft.Checkbox(label="Acceso a doce", value=False, on_change=lambda e: self.update_activity_time())

        # Lista de IPs permitidas
        self.allowed_ips_list = ft.ListView(expand=True, spacing=10, padding=20)
        self.refresh_ip_list()

        # Lista de logs de inicio de sesión
        self.login_logs_list = ft.ListView(expand=True, spacing=10, padding=20)
        self.refresh_login_logs()

        # Estructura principal con pestañas
        self.controls = [
            ft.Tabs(
                selected_index=0,
                tabs=[
                    ft.Tab(
                        text="Usuarios",
                        content=ft.Container(
                            content=ft.Column(
                                controls=[
                                    ft.Text("REGISTRO DE USUARIOS", 
                                        size=24, weight="bold", 
                                        text_align="center", 
                                        color=ft.Colors.TEAL_700),
                                    self.csrf_token_input,
                                    
                                    # Campos de usuario responsive
                                    ft.ResponsiveRow(
                                        controls=[
                                            ft.Column(
                                                col={"xs": 12, "sm": 6, "md": 4, "lg": 4, "xl": 4},
                                                controls=[self.username_input]
                                            ),
                                            ft.Column(
                                                col={"xs": 12, "sm": 6, "md": 4, "lg": 4, "xl": 4},
                                                controls=[self.password_input]
                                            ),
                                            ft.Column(
                                                col={"xs": 12, "sm": 12, "md": 4, "lg": 4, "xl": 4},
                                                controls=[self.email_input]
                                            )
                                        ],
                                        alignment=ft.MainAxisAlignment.CENTER,
                                        spacing=10,
                                        run_spacing=10
                                    ),

                                    # Indicador de fortaleza de contraseña
                                    ft.ResponsiveRow(
                                        controls=[
                                            ft.Column(
                                                col={"xs": 12, "sm": 8, "md": 6, "lg": 6, "xl": 6},
                                                controls=[
                                                    self.password_strength,
                                                    self.password_strength_text
                                                ],
                                                alignment=ft.MainAxisAlignment.CENTER
                                            )
                                        ],
                                        alignment=ft.MainAxisAlignment.CENTER,
                                        spacing=5
                                    ),

                                    # Botones principales responsive
                                    ft.ResponsiveRow(
                                        controls=[
                                            ft.Container(
                                                col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 2},
                                                content=self.register_button,
                                                padding=5
                                            ),
                                            ft.Container(
                                                col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 2},
                                                content=self.delete_button,
                                                padding=5
                                            ),
                                            ft.Container(
                                                col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 2},
                                                content=self.toggle_2fa_button,
                                                padding=5
                                            )
                                        ],
                                        alignment=ft.MainAxisAlignment.CENTER,
                                        spacing=10,
                                        run_spacing=10
                                    ),
                                    
                                    # Contenedor QR
                                    ft.ResponsiveRow(
                                        controls=[
                                            ft.Column(
                                                col={"xs": 12, "sm": 10, "md": 8, "lg": 6, "xl": 6},
                                                controls=[self.qr_container],
                                                alignment=ft.CrossAxisAlignment.CENTER
                                            )
                                        ],
                                        alignment=ft.MainAxisAlignment.CENTER
                                    ),
                                    
                                    ft.Divider(),
                                    
                                    # Checkboxes de acceso - Diseño responsive mejorado
                                    ft.Container(
                                        content=ft.ResponsiveRow(
                                            controls=[
                                                # Primera columna
                                                ft.Column(
                                                    col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 2},
                                                    controls=[
                                                        self.access_frame_uno,
                                                        self.access_frame_dos,
                                                        self.access_frame_tres,
                                                        self.access_frame_cuatro,
                                                        self.access_frame_cinco
                                                    ],
                                                    spacing=5
                                                ),
                                                # Segunda columna
                                                ft.Column(
                                                    col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 2},
                                                    controls=[
                                                        self.access_frame_seis,
                                                        self.access_frame_siete,
                                                        self.access_frame_ocho,
                                                        self.access_frame_ocho_uno,
                                                        self.access_frame_ocho_dos
                                                    ],
                                                    spacing=5
                                                ),
                                                # Tercera columna
                                                ft.Column(
                                                    col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 2},
                                                    controls=[
                                                        self.access_frame_ocho_tres,
                                                        self.access_frame_ocho_cuatro,
                                                        self.access_frame_nueve,
                                                        self.access_frame_nueve_uno,
                                                        self.access_frame_nueve_dos
                                                    ],
                                                    spacing=5
                                                ),
                                                # Cuarta columna
                                                ft.Column(
                                                    col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 2},
                                                    controls=[
                                                        self.access_frame_nueve_tres,
                                                        self.access_frame_nueve_cuatro,
                                                        self.access_frame_diez,
                                                        self.access_frame_once,
                                                        self.access_frame_doce
                                                    ],
                                                    spacing=5
                                                )
                                            ],
                                            spacing=10,
                                            run_spacing=10,
                                            alignment=ft.MainAxisAlignment.CENTER
                                        ),
                                        padding=3,
                                        margin=ft.margin.symmetric(vertical=3)
                                    )
                                ],
                                scroll=ft.ScrollMode.AUTO,
                                spacing=20,
                                horizontal_alignment=ft.CrossAxisAlignment.CENTER
                            ),
                            padding=10,
                            alignment=ft.alignment.center
                        )
                    ),
                    
                    # Pestaña de IPs Permitidas - Ahora responsive
                    ft.Tab(
                        text="IPs Permitidas",
                        content=ft.Container(
                            content=ft.Column(
                                controls=[
                                    ft.Container(
                                        content=ft.Text("GESTIÓN DE IPs PERMITIDAS", 
                                        size=24, weight="bold", text_align="center", color=ft.Colors.BLUE),
                                        alignment=ft.alignment.center,
                                        padding=ft.padding.all(10)
                                    ),
                                    
                                    # Campos de IP responsive
                                    ft.ResponsiveRow(
                                        controls=[
                                            ft.Column(
                                                col={"xs": 12, "sm": 6, "md": 6, "lg": 6, "xl": 4},
                                                controls=[self.ip_address_input],
                                                alignment=ft.CrossAxisAlignment.CENTER
                                            ),
                                            ft.Column(
                                                col={"xs": 12, "sm": 6, "md": 6, "lg": 6, "xl": 4},
                                                controls=[self.ip_description_input],
                                                alignment=ft.CrossAxisAlignment.CENTER
                                            )
                                        ],
                                        alignment=ft.MainAxisAlignment.CENTER,
                                        spacing=10,
                                        run_spacing=10
                                    ),
                                    
                                    # Botones de IP responsive
                                    ft.ResponsiveRow(
                                        controls=[
                                            ft.Container(
                                                col={"xs": 12, "sm": 6, "md": 3, "lg": 3, "xl": 2},
                                                content=self.add_ip_button,
                                                padding=5
                                            ),
                                            ft.Container(
                                                col={"xs": 12, "sm": 6, "md": 3, "lg": 3, "xl": 2},
                                                content=self.remove_ip_button,
                                                padding=5
                                            )
                                        ],
                                        alignment=ft.MainAxisAlignment.CENTER,
                                        spacing=10,
                                        run_spacing=10
                                    ),
                                    
                                    ft.Divider(),
                                    
                                    # Lista de IPs
                                    ft.ResponsiveRow(
                                        controls=[
                                            ft.Column(
                                                col={"xs": 12, "sm": 12, "md": 12, "lg": 10, "xl": 8},
                                                controls=[
                                                    ft.Text("IPs Permitidas:", size=16, weight="bold"),
                                                    self.allowed_ips_list
                                                ]
                                            )
                                        ],
                                        alignment=ft.MainAxisAlignment.CENTER
                                    )
                                ],
                                scroll=ft.ScrollMode.AUTO
                            ),
                            padding=20
                        )
                    ),
                    
                    # Pestaña de Registro de Sesiones - Responsive
                    ft.Tab(
                        text="Registro de Sesiones",
                        content=ft.Container(
                            content=ft.Column(
                                controls=[
                                    ft.Container(
                                        content=ft.Text("REGISTRO DE INICIOS DE SESIÓN", 
                                                    size=24, weight="bold", 
                                                    text_align="center", 
                                                    color=ft.Colors.PURPLE),
                                        alignment=ft.alignment.center,
                                        padding=ft.padding.all(10)
                                    ),
                                    
                                    # Botón de actualización responsive
                                    ft.ResponsiveRow(
                                        controls=[
                                            ft.Container(
                                                col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 2},
                                                content=ft.ElevatedButton(
                                                    "Actualizar",
                                                    on_click=lambda e: self.refresh_login_logs(),
                                                    icon=ft.Icons.REFRESH,
                                                    bgcolor=ft.Colors.PURPLE,
                                                    color=ft.Colors.WHITE
                                                ),
                                                alignment=ft.alignment.center
                                            )
                                        ],
                                        alignment=ft.MainAxisAlignment.CENTER
                                    ),
                                    
                                    ft.Divider(),
                                    
                                    # Lista de logs responsive
                                    ft.ResponsiveRow(
                                        controls=[
                                            ft.Column(
                                                col={"xs": 12, "sm": 12, "md": 12, "lg": 10, "xl": 8},
                                                controls=[self.login_logs_list]
                                            )
                                        ],
                                        alignment=ft.MainAxisAlignment.CENTER
                                    )
                                ],
                                scroll=ft.ScrollMode.AUTO
                            ),
                            padding=20
                        )
                    ),
                    
                    # Pestaña de Sesiones Activas - Responsive
                    ft.Tab(
                        text="Sesiones Activas",
                        content=ft.Container(
                            content=ft.Column(
                                controls=[
                                    ft.Container(
                                        content=ft.Text("ADMINISTRACIÓN DE SESIONES ACTIVAS", 
                                                    size=24, weight="bold", 
                                                    text_align="center", 
                                                    color=ft.Colors.ORANGE),
                                        alignment=ft.alignment.center,
                                        padding=ft.padding.all(10)
                                    ),
                                    
                                    # Botones de sesión responsive
                                    ft.ResponsiveRow(
                                        controls=[
                                            ft.Container(
                                                col={"xs": 12, "sm": 6, "md": 3, "lg": 3, "xl": 2},
                                                content=ft.ElevatedButton(
                                                    "Actualizar",
                                                    on_click=lambda e: self.refresh_active_sessions(),
                                                    icon=ft.Icons.REFRESH,
                                                    bgcolor=ft.Colors.ORANGE,
                                                    color=ft.Colors.WHITE
                                                ),
                                                padding=5
                                            ),
                                            ft.Container(
                                                col={"xs": 12, "sm": 6, "md": 3, "lg": 3, "xl": 2},
                                                #content=self.logout_button,
                                                padding=5
                                            )
                                        ],
                                        alignment=ft.MainAxisAlignment.CENTER,
                                        spacing=10,
                                        run_spacing=10
                                    ),
                                    
                                    ft.Divider(),
                                    
                                    # Lista de sesiones responsive
                                    ft.ResponsiveRow(
                                        controls=[
                                            ft.Column(
                                                col={"xs": 12, "sm": 12, "md": 12, "lg": 10, "xl": 8},
                                                controls=[self.active_sessions_list]
                                            )
                                        ],
                                        alignment=ft.MainAxisAlignment.CENTER
                                    )
                                ],
                                scroll=ft.ScrollMode.AUTO
                            ),
                            padding=20
                        )
                    )
                ],
                expand=True
            )
        ]

    def refresh_active_sessions(self):
        """Actualiza la lista de sesiones activas"""
        self.active_sessions_list.controls.clear()
        sessions = LoginLog.get_active_sessions()
        
        if not sessions:
            self.active_sessions_list.controls.append(
                ft.Text("No hay sesiones activas", color=ft.Colors.GREY)
            )
        else:
            for session in sessions:
                login_time = session['login_time'].strftime("%Y-%m-%d %H:%M:%S") if session['login_time'] else "N/A"
                
                # Crear botón para forzar cierre de sesión - CORREGIDO
                force_logout_btn = ft.IconButton(
                    icon=ft.Icons.LOGOUT,  # Corregido
                    icon_color=ft.Colors.RED,
                    tooltip="Forzar cierre de sesión",
                    on_click=lambda e, user_id=session['user_id'], ip=session['ip_address']: self.force_logout_click(user_id, ip)
                )
                
                self.active_sessions_list.controls.append(
                    ft.ListTile(
                        title=ft.Text(f"Usuario: {session['username']}"),
                        subtitle=ft.Column([
                            ft.Text(f"IP: {session['ip_address']}"),
                            ft.Text(f"Inicio: {login_time}"),
                            ft.Text("Estado: Activo", color=ft.Colors.GREEN)
                        ]),
                        leading=ft.Icon(ft.Icons.PERSON, color=ft.Colors.BLUE),  # Corregido
                        trailing=force_logout_btn
                    )
                )
        self.page.update()


    def force_logout_click(self, user_id, ip_address):
        """Maneja el clic para forzar el cierre de sesión"""
        if LoginLog.force_logout(user_id, ip_address):
            self.mostrar_mensaje(f"Sesión forzada a cerrar para usuario ID {user_id}", "éxito")
            log_security_event("FORCED_LOGOUT", f"Sesión terminada por admin para usuario {user_id}", 
                              self.current_user_id, ip_validator.get_current_ip(), "WARNING")
        else:
            self.mostrar_mensaje("Error al forzar cierre de sesión", "error")
        
        self.refresh_active_sessions()

    def logout_click(self, e):
        """Maneja el cierre de sesión normal del usuario actual"""
        if hasattr(self, 'current_user_id') and self.current_user_id:
            current_ip = ip_validator.get_current_ip()
            LoginLog.log_logout(self.current_user_id, current_ip)
            
            # Limpiar datos de sesión
            self.current_user_id = None
            self.username = None
            self.user_access = {}
            
            # Redirigir a la página de login
            self.page.go("/login")
            
            log_security_event("USER_LOGOUT", "Usuario cerró sesión", 
                             self.current_user_id, current_ip, "INFO")
    

    def toggle_2fa_click(self, e):
        """Maneja el clic para habilitar/deshabilitar 2FA"""
        username = self.username_input.value.strip()
        if not username:
            self.mostrar_mensaje("Debe ingresar un nombre de usuario", "error")
            return
            
        try:
            conn = CConection.ConexionBasedeDatos()
            if conn is None:
                self.mostrar_mensaje("Error de conexión a la base de datos", "error")
                return
                
            with conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        "SELECT id, two_factor_enabled FROM users WHERE BINARY username = %s",
                        (username,)
                    )
                    result = cursor.fetchone()
                    
                    if not result:
                        self.mostrar_mensaje("Usuario no encontrado", "error")
                        return
                        
                    user_id, is_enabled = result
                    self.current_user_id = user_id
                    
                    if is_enabled:
                        if self.disable_2fa(user_id):
                            self.toggle_2fa_button.text = "Habilitar 2FA"
                            self.qr_container.visible = False
                            self.mostrar_mensaje("2FA deshabilitado", "éxito")
                        else:
                            self.mostrar_mensaje("Error al deshabilitar 2FA", "error")
                    else:
                        provisioning_uri, qr_img_bytes = self.setup_2fa(user_id, username)
                        if provisioning_uri and qr_img_bytes:
                            self.show_qr_in_ui(username, qr_img_bytes, provisioning_uri)
                            self.show_qr_dialog(username, qr_img_bytes, provisioning_uri)
                            self.toggle_2fa_button.text = "Deshabilitar 2FA"
                        else:
                            self.mostrar_mensaje("Error al configurar 2FA", "error")
                            
                    self.page.update()
                    
        except Exception as e:
            logging.error(f"Error al manejar 2FA: {e}")
            self.mostrar_mensaje("Error al manejar 2FA", "error")

    def setup_2fa(self, user_id: int, username: str) -> tuple:
        """Configura el 2FA para un usuario y genera QR"""
        try:
            secret = pyotp.random_base32()
            
            conn = CConection.ConexionBasedeDatos()
            if conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        "UPDATE users SET two_factor_secret = %s, two_factor_enabled = FALSE WHERE id = %s",
                        (secret, user_id)
                    )
                    conn.commit()
            
            # Generar URL para QR code
            provisioning_uri = pyotp.totp.TOTP(secret).provisioning_uri(
                name=username, issuer_name="Sistema de Liquidación")
                
            # Generar imagen QR
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=10,
                border=4,
            )
            qr.add_data(provisioning_uri)
            qr.make(fit=True)
            
            img = qr.make_image(fill_color="black", back_color="white")
            
            # Convertir a bytes para mostrar en Flet
            img_bytes = io.BytesIO()
            img.save(img_bytes, format='PNG')
            img_bytes.seek(0)
            
            log_security_event("2FA_SETUP", "Configuración de 2FA iniciada", 
                             user_id, ip_validator.get_current_ip(), "INFO")
            
            return provisioning_uri, img_bytes
        except Exception as e:
            logging.error(f"Error configurando 2FA: {e}")
            return None, None

    def verify_2fa(self, user_id: int, token: str) -> bool:
        """Verifica un token de autenticación de dos factores"""
        try:
            conn = CConection.ConexionBasedeDatos()
            if conn is None:
                return False

            with conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        "SELECT two_factor_secret FROM users WHERE id = %s",
                        (user_id,)
                    )
                    result = cursor.fetchone()
                    
                    if result and result[0]:
                        secret = result[0]
                        totp = pyotp.TOTP(secret)
                        is_valid = totp.verify(token.strip(), valid_window=1)
                        
                        if is_valid:
                            # Habilitar 2FA después de la primera verificación exitosa
                            cursor.execute(
                                "UPDATE users SET two_factor_enabled = TRUE WHERE id = %s",
                                (user_id,)
                            )
                            conn.commit()
                            log_security_event("2FA_ENABLED", "2FA habilitado con éxito", 
                                              user_id, ip_validator.get_current_ip(), "INFO")
                        
                        return is_valid
            return False
        except Exception as e:
            logging.error(f"Error verificando token 2FA: {e}")
            return False

    def disable_2fa(self, user_id: int) -> bool:
        """Deshabilita la autenticación de dos factores para un usuario"""
        try:
            conn = CConection.ConexionBasedeDatos()
            if conn is None:
                return False

            with conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        "UPDATE users SET two_factor_enabled = FALSE, two_factor_secret = NULL WHERE id = %s",
                        (user_id,)
                    )
                    conn.commit()
                    log_security_event("2FA_DISABLED", "2FA deshabilitado", 
                                      user_id, ip_validator.get_current_ip(), "INFO")
                    return True
        except Exception as e:
            logging.error(f"Error deshabilitando 2FA: {e}")
            return False

    def show_qr_in_ui(self, username, qr_img_bytes, provisioning_uri):
        """Muestra el código QR en la interfaz"""
        qr_image = self.qr_container.content.controls[1]
        qr_image.src_base64 = base64.b64encode(qr_img_bytes.getvalue()).decode('utf-8')
        qr_image.visible = True
        
        self.mfa_code_input.visible = True
        self.verify_mfa_button.visible = True
        self.qr_container.visible = True
        
        self.page.update()

    def show_qr_dialog(self, username, qr_img_bytes, provisioning_uri):
        """Muestra un diálogo con el código QR y las instrucciones"""
        qr_image = ft.Image(
            src_base64=base64.b64encode(qr_img_bytes.getvalue()).decode('utf-8'),
            width=300,
            height=300,
            fit=ft.ImageFit.CONTAIN
        )
        
        content = ft.Column(
            controls=[
                ft.Text("Configuración de Autenticación en Dos Pasos", size=20, weight="bold"),
                ft.Divider(),
                ft.Text(f"Usuario: {username}"),
                ft.Text("Escanea este código QR con tu aplicación de autenticación:"),
                qr_image,
                ft.Text("O ingresa manualmente este código:"),
                ft.Text(provisioning_uri, selectable=True),
                ft.Text("Aplicaciones recomendadas: Google Authenticator, Authy o Microsoft Authenticator"),
                ft.ElevatedButton(
                    "Cerrar",
                    on_click=lambda e: self.close_dialog(e),
                    width=200
                )
            ],
            spacing=10,
            horizontal_alignment=ft.CrossAxisAlignment.CENTER
        )
        
        self.dialog = ft.AlertDialog(
            title=ft.Text("Configurar 2FA"),
            content=content,
            modal=True
        )
        
        self.page.dialog = self.dialog
        self.dialog.open = True
        self.page.update()

    def close_dialog(self, e):
        """Cierra el diálogo del QR"""
        if hasattr(self, 'dialog'):
            self.dialog.open = False
            self.page.update()

    def verify_mfa_code(self, e):
        """Versión corregida del método de verificación"""
        if not self.current_user_id:
            self.mostrar_mensaje("No hay usuario seleccionado", "error")
            return
            
        # Acceder directamente al campo en lugar de buscarlo por ID
        code = self.mfa_code_input.value.strip()
        
        if len(code) != 6 or not code.isdigit():
            self.mostrar_mensaje("El código debe tener 6 dígitos", "error")
            return
            
        if self.verify_2fa(self.current_user_id, code):
            self.mostrar_mensaje("2FA verificado y habilitado correctamente", "éxito")
            self.qr_container.visible = False
            self.mfa_code_input.value = ""
            self.mfa_code_input.visible = False
            self.verify_mfa_button.visible = False
        else:
            self.mostrar_mensaje("Código incorrecto", "error")
            
        self.page.update()

    def refresh_login_logs(self):
        """Actualiza la lista de logs de inicio de sesión"""
        self.login_logs_list.controls.clear()
        logs = LoginLog.get_login_logs()
        
        if not logs:
            self.login_logs_list.controls.append(
                ft.Text("No hay registros de inicio de sesión", color=ft.Colors.GREY)
            )
        else:
            for log in logs:
                login_time = log['login_time'].strftime("%Y-%m-%d %H:%M:%S") if log['login_time'] else "N/A"
                logout_time = log['logout_time'].strftime("%Y-%m-%d %H:%M:%S") if log['logout_time'] else "Activo"
                
                self.login_logs_list.controls.append(
                    ft.ListTile(
                        title=ft.Text(f"Usuario: {log['username']}"),
                        subtitle=ft.Column([
                            ft.Text(f"IP: {log['ip_address']}"),
                            ft.Text(f"Inicio: {login_time}"),
                            ft.Text(f"Fin: {logout_time}")
                        ]),
                        leading=ft.Icon(ft.Icons.LOGIN, color=ft.Colors.PURPLE),  # Corregido
                        trailing=ft.Icon(ft.Icons.LOGOUT, color=ft.Colors.PURPLE) if log['logout_time'] else  # Corregido
                                ft.Icon(ft.Icons.CHECK_CIRCLE, color=ft.Colors.GREEN),  # Corregido
                    )
                )
        self.page.update()

    def refresh_ip_list(self):
        """Actualiza la lista de IPs permitidas"""
        self.allowed_ips_list.controls.clear()
        ips = get_all_allowed_ips()
        
        if not ips:
            self.allowed_ips_list.controls.append(
                ft.Text("No hay IPs registradas", color=ft.colors.GREY)
            )
        else:
            for ip in ips:
                self.allowed_ips_list.controls.append(
                    ft.ListTile(
                        title=ft.Text(ip['ip_address']),
                        subtitle=ft.Text(ip['description'] or "Sin descripción"),
                        trailing=ft.Icon(ft.Icons.CHECK_CIRCLE, color=ft.Colors.GREEN)
                    )
                )
        self.page.update()

    def add_ip_click(self, e):
        """Maneja el clic para añadir una IP permitida"""
        ip = self.ip_address_input.value.strip()
        desc = self.ip_description_input.value.strip() or None
        
        if not ip:
            self.show_snackbar("Debe ingresar una dirección IP", ft.colors.RED)
            return
        
        if add_allowed_ip(ip, desc):
            self.show_snackbar(f"IP {ip} añadida correctamente", ft.Colors.GREEN)
            self.ip_address_input.value = ""
            self.ip_description_input.value = ""
            self.refresh_ip_list()
        else:
            self.show_snackbar(f"La IP {ip} ya existe o hubo un error", ft.Colors.RED)

    def remove_ip_click(self, e):
        """Maneja el clic para eliminar una IP permitida"""
        ip = self.ip_address_input.value.strip()
        
        if not ip:
            self.show_snackbar("Debe ingresar una dirección IP", ft.Colors.RED)
            return
        
        if remove_allowed_ip(ip):
            self.show_snackbar(f"IP {ip} eliminada correctamente", ft.Colors.GREEN)
            self.ip_address_input.value = ""
            self.ip_description_input.value = ""
            self.refresh_ip_list()
        else:
            self.show_snackbar(f"No se encontró la IP {ip}", ft.Colors.RED)

    def show_snackbar(self, message, color):
        """Muestra un mensaje emergente"""
        self.page.snack_bar = ft.SnackBar(
            content=ft.Text(message),
            bgcolor=color
        )
        self.page.snack_bar.open = True
        self.page.update()

    def on_hover(self, e):
        """Efecto hover para el botón de registro"""
        if e.data == "true":
            self.register_button.bgcolor = "white"
        else:
            self.register_button.bgcolor = "teal"
        self.register_button.update()

    def on_hover_delete(self, e):
        """Efecto hover para el botón de eliminación"""
        if e.data == "true":
            self.delete_button.bgcolor = "darkred"
        else:
            self.delete_button.bgcolor = "red"
        self.delete_button.update()

    def is_valid_email(self, email):
        """Valida el formato de un email"""
        regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
        return re.match(regex, email) is not None

    def register_click(self, e):
        """Maneja el registro de un nuevo usuario"""
        if not validate_csrf_token(self.csrf_token_input.value, self.csrf_token):
            self.mostrar_mensaje("Token CSRF inválido", "error")
            return
            
        username = self.username_input.value.strip()
        password = self.password_input.value
        email = self.email_input.value
        access_frame_uno = self.access_frame_uno.value
        access_frame_dos = self.access_frame_dos.value
        access_frame_tres = self.access_frame_tres.value
        access_frame_cuatro = self.access_frame_cuatro.value
        access_frame_cinco = self.access_frame_cinco.value
        access_frame_seis = self.access_frame_seis.value
        access_frame_siete = self.access_frame_siete.value
        access_frame_ocho = self.access_frame_ocho.value
        access_frame_ocho_uno = self.access_frame_ocho_uno.value
        access_frame_ocho_dos = self.access_frame_ocho_dos.value
        access_frame_ocho_tres = self.access_frame_ocho_tres.value
        access_frame_ocho_cuatro = self.access_frame_ocho_cuatro.value 
        access_frame_nueve = self.access_frame_nueve.value
        access_frame_nueve_uno = self.access_frame_nueve_uno.value
        access_frame_nueve_dos = self.access_frame_nueve_dos.value
        access_frame_nueve_tres = self.access_frame_nueve_tres.value
        access_frame_nueve_cuatro = self.access_frame_nueve_cuatro.value
        access_frame_diez = self.access_frame_diez.value
        access_frame_once = self.access_frame_once.value
        access_frame_doce = self.access_frame_doce.value

        if not all([username, password, email]):
            self.mostrar_mensaje("Por favor, completa todos los campos.", "error")
            return

        if not self.is_valid_username(username):
            self.mostrar_mensaje("Nombre de usuario inválido. Solo se permiten letras, números y guiones bajos.", "error")
            return

        if not is_strong_password(password):
            self.mostrar_mensaje(
                f"La contraseña debe tener al menos {PASSWORD_MIN_LENGTH} caracteres y no ser común.", 
                "error")
            return

        if not self.is_valid_email(email):
            self.mostrar_mensaje("Correo electrónico no válido.", "error")
            return
        
        result = self.register_user(
            username=username,
            password=password,
            email=email,
            access_frame_uno=access_frame_uno,
            access_frame_dos=access_frame_dos,
            access_frame_tres=access_frame_tres,
            access_frame_cuatro=access_frame_cuatro,
            access_frame_cinco=access_frame_cinco,
            access_frame_seis=access_frame_seis,
            access_frame_siete=access_frame_siete,
            access_frame_ocho=access_frame_ocho,
            access_frame_ocho_uno=access_frame_ocho_uno,
            access_frame_ocho_dos=access_frame_ocho_dos,
            access_frame_ocho_tres=access_frame_ocho_tres,
            access_frame_ocho_cuatro=access_frame_ocho_cuatro,
            access_frame_nueve=access_frame_nueve,
            access_frame_nueve_uno=access_frame_nueve_uno,
            access_frame_nueve_dos=access_frame_nueve_dos,
            access_frame_nueve_tres=access_frame_nueve_tres,
            access_frame_nueve_cuatro=access_frame_nueve_cuatro,
            access_frame_diez=access_frame_diez,
            access_frame_once=access_frame_once,
            access_frame_doce=access_frame_doce
        )
        
        if "exitoso" in result:
            self.mostrar_mensaje(result, "éxito")
            self._clear_form()
        else:
            self.mostrar_mensaje(result, "error")
        self.page.update()

    def is_valid_username(self, username):
        """Valida el formato del nombre de usuario"""
        return re.match(r'^[a-zA-Z0-9_]{4,30}$', username) is not None

    def register_user(self, username, password, email, access_frame_uno, access_frame_dos, access_frame_tres, 
                    access_frame_cuatro, access_frame_cinco, access_frame_seis, access_frame_siete, 
                    access_frame_ocho, access_frame_ocho_uno, access_frame_ocho_dos, access_frame_ocho_tres, 
                    access_frame_ocho_cuatro, access_frame_nueve, access_frame_nueve_uno, access_frame_nueve_dos, 
                    access_frame_nueve_tres, access_frame_nueve_cuatro, access_frame_diez, access_frame_once, 
                    access_frame_doce):
        """Registra un nuevo usuario en la base de datos"""
        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor(prepared=True) as cursor:
                    cursor.execute("SELECT username FROM users WHERE BINARY username = %s", (username,))
                    if cursor.fetchone():
                        return "El nombre de usuario ya existe"

                    hashed_pw = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt(14)).decode('utf-8')
                    
                    cursor.execute(
                        """INSERT INTO users 
                        (username, password, email, access_frame_uno, access_frame_dos, access_frame_tres, 
                        access_frame_cuatro, access_frame_cinco, access_frame_seis, access_frame_siete, 
                        access_frame_ocho, access_frame_ocho_uno, access_frame_ocho_dos, access_frame_ocho_tres, 
                        access_frame_ocho_cuatro, access_frame_nueve, access_frame_nueve_uno, access_frame_nueve_dos, 
                        access_frame_nueve_tres, access_frame_nueve_cuatro, access_frame_diez, access_frame_once, 
                        access_frame_doce, password_changed_at) 
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)""",
                        (username, hashed_pw, email, access_frame_uno, access_frame_dos, access_frame_tres, 
                        access_frame_cuatro, access_frame_cinco, access_frame_seis, access_frame_siete, 
                        access_frame_ocho, access_frame_ocho_uno, access_frame_ocho_dos, access_frame_ocho_tres, 
                        access_frame_ocho_cuatro, access_frame_nueve, access_frame_nueve_uno, access_frame_nueve_dos, 
                        access_frame_nueve_tres, access_frame_nueve_cuatro, access_frame_diez, access_frame_once, 
                        access_frame_doce, datetime.now())
                    )
                    cnx.commit()
                    
                    log_security_event("USER_REGISTERED", "Nuevo usuario registrado", None, 
                                      ip_validator.get_current_ip(), "INFO")
                    return "Usuario registrado exitosamente"
        except Error as e:
            logging.error('Error de Mostrar Datos: {}'.format(e))
            return f"Error de base de datos: {str(e)}"
        except Exception as e:
            logging.error(f"Error inesperado al registrar usuario: {str(e)}")
            return f"Error inesperado: {str(e)}"

    def _clear_form(self):
        """Limpia todos los campos del formulario"""
        self.username_input.value = ""
        self.password_input.value = ""
        self.email_input.value = ""
        self.access_frame_uno.value = False
        self.access_frame_dos.value = False
        self.access_frame_tres.value = False
        self.access_frame_cuatro.value = False
        self.access_frame_cinco.value = False
        self.access_frame_seis.value = False
        self.access_frame_siete.value = False
        self.access_frame_ocho.value = False
        self.access_frame_ocho_uno.value = False
        self.access_frame_ocho_dos.value = False
        self.access_frame_ocho_tres.value = False
        self.access_frame_ocho_cuatro.value = False
        self.access_frame_nueve.value = False
        self.access_frame_nueve_uno.value = False
        self.access_frame_nueve_dos.value = False
        self.access_frame_nueve_tres.value = False
        self.access_frame_nueve_cuatro.value = False
        self.access_frame_diez.value = False
        self.access_frame_once.value = False
        self.access_frame_doce.value = False

    def eliminar_usuario(self, e):
        """Maneja la eliminación de un usuario"""
        if not validate_csrf_token(self.csrf_token_input.value, self.csrf_token):
            self.mostrar_mensaje("Token CSRF inválido", "error")
            return
            
        username = self.username_input.value

        if username:
            result = self.delete_user(username)
            if "exitoso" in result:
                self.mostrar_mensaje(result, "éxito")
            else:
                self.mostrar_mensaje(result, "error")
            self._clear_form()
            self.page.update()
        else:
            self.mostrar_mensaje("Por favor, ingresa el nombre de usuario.", "error")

    def delete_user(self, username):
        """Elimina un usuario de la base de datos"""
        cnx = CConection.ConexionBasedeDatos()
        if cnx is None:
            return "Error de conexión a la base de datos."

        cursor = cnx.cursor()
        try:
            cursor.execute("SELECT id FROM users WHERE BINARY username = %s", (username,))
            user_id = cursor.fetchone()
            
            if not user_id:
                return "Usuario no encontrado"
                
            user_id = user_id[0]
            
            cursor.execute("DELETE FROM users WHERE BINARY username = %s", (username,))
            cnx.commit()
            
            log_security_event("USER_DELETED", f"Usuario {username} eliminado", user_id, 
                             ip_validator.get_current_ip(), "WARNING")
            return "Usuario eliminado exitosamente"
        except Error as e:
            logging.error(f"Error al eliminar usuario: {e}")
            return f"El error '{e}' ocurrió"
        finally:
            cursor.close()
            cnx.close()

    def mostrar_mensaje(self, mensaje, tipo="error"):
        """Muestra un mensaje en un SnackBar con protección XSS"""
        sanitized_msg = sanitize_output(mensaje)
        
        color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.RED)
        if tipo == "éxito":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.GREEN)
        elif tipo == "advertencia":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.TEAL)
        
        snack_content = ft.Container(
            content=ft.Text(sanitized_msg, size=18, color=ft.Colors.WHITE),
            bgcolor=color_fondo,
            border_radius=10,
            padding=10,
        )
        
        snack_bar = ft.SnackBar(
            content=snack_content,
            open=True,
            duration=5000,
            bgcolor=ft.Colors.TRANSPARENT,
        )
        
        self.page.overlay.append(snack_bar)
        self.page.update()

    def build(self):
        """Construye la interfaz de usuario"""
        return ft.Column(controls=self.controls)


class FrameDos(ft.Control):
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.data_entries = []
        self.selected_index = None
        self.create_ui_elements()
        self.actualizarListView()  # Cargar datos al inicializar

    def create_ui_elements(self):
        # Crear los widgets con tamaños ajustados
        self.texBoxIdCliente = TextField(label="ID Cliente", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL), disabled=True)
        self.texBoxDenominacion = TextField(label="Denominación", width=300, border_color="teal", border_radius=10,  border=ft.border.all(10, ft.Colors.TEAL),on_blur=self.on_text_blur)
        self.texBoxDepartamento = TextField(label="Departamento", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL),on_blur=self.on_text_blur )
        self.texBoxMunicipio = TextField(label="Municipio", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL),on_blur=self.on_text_blur  )
        self.texBoxCodigo_Municipio = TextField(label="Código Municipio", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxNim = TextField(label="NIM", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxPrecio = TextField(label="Precio", width=300,height=50, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL),suffix=ft.IconButton(icon=ft.Icons.SEARCH,icon_color=Colors.TEAL,on_click= self.precios))
        
        self.texBoxCns = TextField(label="CNS", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxComibol = TextField(label="Comibol", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxFencomin = TextField(label="Fencomin", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxFedecomin = TextField(label="Fedecomin", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxRegalias = TextField(label="Regalías", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxCooperativa = TextField(label="Cooperativa", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxComunidad = TextField(label="Comunidad", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL),value=0)
        self.texBoxDeporte = TextField(label="Deporte", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL),value=0)
        self.texBoxAfp = TextField(label="AFP", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL),value=0) #, bgcolor="teal"

        # Títulos de las columnas
        self.column_titles = ft.Row(
            controls=[
                ft.Text("Numero", width=50, weight="bold", size=12),
                ft.Text("Nombre", width=170, weight="bold", size=12),
                ft.Text("Departamento", width=100, weight="bold", size=12),
                ft.Text("Municipio", width=100, weight="bold", size=12),
                ft.Text("Codigo Municipio", width=80, weight="bold", size=12),
                ft.Text("Nim", width=50, weight="bold", size=12),
                ft.Text("Precio", width=110, weight="bold", size=12),
                ft.Text("C.N.S.", width=80, weight="bold", size=12),
                ft.Text("Comibol", width=80, weight="bold", size=12),
                ft.Text("Fencomin", width=80, weight="bold", size=12),
                ft.Text("Fedecomin", width=80, weight="bold", size=12),
                ft.Text("Regalias", width=80, weight="bold", size=12),
                ft.Text("Cooperativa", width=80, weight="bold", size=12),
                #ft.Text("Comunidad", width=80, weight="bold", size=12),
                #ft.Text("Deporte", width=70, weight="bold", size=12),
                #ft.Text("Afp", width=70, weight="bold", size=12),
            ],
            spacing=10,
        )

        # ListView para mostrar los datos
        self.listview = ft.ListView(
            expand=True,
            spacing=10,
            padding=10,
            auto_scroll=True
        )

        # Botones con el mismo tamaño
        self.boton_guardar = ft.ElevatedButton(text="GUARDAR", on_click=self.guardarregistros, width=200, bgcolor=ft.Colors.TEAL, color=ft.Colors.WHITE, on_hover=self.on_hover_boton_guardar)
        self.boton_editar = ft.ElevatedButton(text="EDITAR", on_click=self.ModificarClientes, width=200, bgcolor=ft.Colors.TEAL, color=ft.Colors.WHITE, on_hover=self.on_hover_boton_editar)
        self.boton_eliminar = ft.ElevatedButton(text="ELIMINAR", on_click=self.EliminarClientes, width=200, bgcolor=ft.Colors.TEAL, color=ft.Colors.WHITE, on_hover=self.on_hover_boton_eliminar)

        self.selected_row_index = None

        # Agregar todos los componentes a la columna con scroll
        self.controls = [
            ft.Column(
                controls=[
                    ft.Container(
                        content=ft.Text("REGISTRO DE COOPERATIVAS", size=24, weight="bold", text_align="center", color=ft.Colors.TEAL),
                        alignment=ft.alignment.center,
                        padding=ft.padding.all(0),
                    ),
                    ft.ResponsiveRow(
                        controls=[
                            #ft.Column(controls=[self.texBoxIdCliente], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxDenominacion], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxDepartamento], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxMunicipio], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxCodigo_Municipio], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxNim], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxPrecio], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxCns], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxComibol], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxFencomin], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxFedecomin], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxRegalias], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxCooperativa], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            #ft.Column(controls=[self.texBoxComunidad], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            #ft.Column(controls=[self.texBoxDeporte], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            #ft.Column(controls=[self.texBoxAfp], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                        ],
                        spacing=7,
                    ),
                    ft.ResponsiveRow(
                        controls=[
                            ft.Column(controls=[self.boton_guardar], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.boton_editar], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.boton_eliminar], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                        ],
                        alignment=ft.MainAxisAlignment.CENTER,
                        spacing=60,
                    ),
                    self.column_titles,
                    ft.Column(
                        controls=[self.listview],
                        scroll=ft.ScrollMode.AUTO,
                        height=290,  # Ajusta la altura según sea necesario
                    ),
                ],
                scroll=ft.ScrollMode.AUTO,
                height=600,  # Ajusta la altura según sea necesario
            )
        ]


    def on_hover_boton_guardar(self, e):
        self.boton_guardar.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_guardar.update()

    def on_hover_boton_editar(self, e):
        self.boton_editar.bgcolor = "orange" if e.data == "true" else "teal"
        self.boton_editar.update()

    def on_hover_boton_eliminar(self, e):
        self.boton_eliminar.bgcolor = "red" if e.data == "true" else "teal"
        self.boton_eliminar.update()
   
    def on_text_blur(self, e):
        # Convertir el texto a mayúsculas cuando el campo pierde el foco
        e.control.value = e.control.value.upper()
        self.page.update()    

    def guardarregistros(self, e):
        # Verificar que todos los widgets estén inicializados
        if any(var is None for var in [self.texBoxDenominacion, self.texBoxDepartamento, self.texBoxMunicipio,self.texBoxCodigo_Municipio, self.texBoxNim, self.texBoxPrecio,self.texBoxCns, self.texBoxComibol, self.texBoxFencomin,self.texBoxFedecomin, self.texBoxRegalias, self.texBoxCooperativa,self.texBoxComunidad, self.texBoxDeporte, self.texBoxAfp]):
            self.mostrar_mensaje("Los widgets no están inicializados", tipo="advertencia")            
            #self.page.add(ft.SnackBar(ft.Text('Los widgets no están inicializados'), open=True))
            return

        # Obtener valores de los widgets
        values = []
        for widget in [self.texBoxDenominacion, self.texBoxDepartamento, self.texBoxMunicipio,self.texBoxCodigo_Municipio, self.texBoxNim, self.texBoxPrecio,self.texBoxCns, self.texBoxComibol, self.texBoxFencomin,self.texBoxFedecomin, self.texBoxRegalias, self.texBoxCooperativa,self.texBoxComunidad, self.texBoxDeporte, self.texBoxAfp ]:
            value = widget.value
            if value is None or value == '':
                self.mostrar_mensaje(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                return
            values.append(value)
        Denominacion = self.texBoxDenominacion.value
        try:
            # Insertar valores en la base de datos
            CClientes.IngresarClientes(self.page,*values)
            self.actualizarListView()
            
            # Limpiar todos los widgets
            self.limpiarCampos()
                      
        except Exception as e:
            self.mostrar_mensaje(f"La Cooperativa '{Denominacion}' esta Duplicado {e}", tipo="error")

    def actualizarListView(self):
        try:
            # Limpiar la lista
            self.listview.controls.clear()

            # Obtener los nuevos datos
            datos = CClientes.mostrarClientes()

            # Insertar los nuevos datos en la lista
            for index, row in enumerate(datos):
                self.listview.controls.append(
                    ft.GestureDetector(
                        content=ft.Container(
                            content=ft.Row(
                                controls=[
                                    ft.Text(row[0], width=50),
                                    ft.Text(row[1], width=170),
                                    ft.Text(row[2], width=100),
                                    ft.Text(row[3], width=100),
                                    ft.Text(row[4], width=80),
                                    ft.Text(row[5], width=50),
                                    ft.Text(row[6], width=100),
                                    ft.Text(row[7], width=80),
                                    ft.Text(row[8], width=80),
                                    ft.Text(row[9], width=80),
                                    ft.Text(row[10], width=80),
                                    ft.Text(row[11], width=80),
                                    ft.Text(row[12], width=80),
                                    #ft.Text(row[13], width=80),
                                    #ft.Text(row[14], width=70),
                                    #ft.Text(row[15], width=70),
                                ],
                                alignment=ft.MainAxisAlignment.START,
                            ),
                            padding=10,
                            border=ft.border.all(1, ft.Colors.TEAL),
                            border_radius=10,

                        ),
                        on_tap=lambda e, row=row, index=index: self.seleccionarRegistro(row, index)
                    )
                )
            self.page.update()
        except ValueError as error:
            print('Error al Actualizar Lista {}'.format(error))

    def seleccionarRegistro(self,row, index):
        try:
            #nonlocal selected_row_index
            self.selected_row_index = index

            # Establecer los valores en los campos de texto
            self.texBoxIdCliente.value = row[0]
            self.texBoxDenominacion.value = row[1]
            self.texBoxDepartamento.value = row[2]
            self.texBoxMunicipio.value = row[3]
            self.texBoxCodigo_Municipio.value = row[4]
            self.texBoxNim.value = row[5]
            self.texBoxPrecio.value = row[6]
            self.texBoxCns.value = row[7]
            self.texBoxComibol.value = row[8]
            self.texBoxFencomin.value = row[9]
            self.texBoxFedecomin.value = row[10]
            self.texBoxRegalias.value = row[11]
            self.texBoxCooperativa.value = row[12]
            self.texBoxComunidad.value = row[13]
            self.texBoxDeporte.value = row[14]
            self.texBoxAfp.value = row[15]

            # Marcar la fila seleccionada
            for i, control in enumerate(self.listview.controls):
                if i == self.selected_row_index:  # Ajuste del índice
                    control.content.border = ft.border.all(2, ft.Colors.TEAL)
                    for cell in control.content.content.controls:
                        cell.color = ft.Colors.TEAL
                else:
                    control.content.border = ft.border.all(1, ft.Colors.TEAL)
                    for cell in control.content.content.controls:
                        cell.color = ft.Colors.BLACK
            self.page.update()
        except Exception as error:
            print(f'Error al seleccionar Registro {error}')

    def ModificarClientes(self, e):
        # Verificar si los widgets están inicializados  
        if any(var is None for var in [self.texBoxIdCliente, self.texBoxDenominacion, self.texBoxDepartamento, self.texBoxMunicipio, self.texBoxCodigo_Municipio, self.texBoxNim, self.texBoxPrecio, self.texBoxCns, self.texBoxComibol, self.texBoxFencomin, self.texBoxFedecomin, self.texBoxRegalias, self.texBoxCooperativa, self.texBoxComunidad, self.texBoxDeporte, self.texBoxAfp]):
            self.mostrar_mensaje("Los widgets no están inicializados", tipo="advertencia")            
            return

        values = []
        for widget in [self.texBoxIdCliente, self.texBoxDenominacion, self.texBoxDepartamento, self.texBoxMunicipio, self.texBoxCodigo_Municipio, self.texBoxNim, self.texBoxPrecio, self.texBoxCns, self.texBoxComibol, self.texBoxFencomin, self.texBoxFedecomin, self.texBoxRegalias, self.texBoxCooperativa, self.texBoxComunidad, self.texBoxDeporte, self.texBoxAfp]:
            value = widget.value
            if value is None or value == '':
                self.mostrar_mensaje(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                return
            values.append(value)

        Denominacion = self.texBoxDenominacion.value
        
        try:
            CClientes.ModificarClientes(self.page, *values)
            self.actualizarListView()
            self.limpiarCampos()
            
        except Exception as e:
            self.mostrar_mensaje(f"La Cooperativa '{Denominacion}' esta Duplicado {e}", tipo="error")

    def EliminarClientes(self, e):
        # Verificar si los widgets están inicializados
        if any(var is None for var in [self.texBoxIdCliente, self.texBoxDenominacion]):
            self.mostrar_mensaje("Los widgets no están inicializados", tipo="advertencia")            
            return

        # Obtener valores de los widgets
        values = []
        for widget in [self.texBoxIdCliente, self.texBoxDenominacion]:
            value = widget.value
            if not value:
                self.mostrar_mensaje(f'Seleccione Una Cooperativa', tipo="advertencia")                           
                return
            values.append(value)

        try:
            # Intentar eliminar la cooperativa
            CClientes.EliminarClientes(self.page, *values)
            
            # Actualizar la lista y limpiar los campos
            self.actualizarListView()
            self.limpiarCampos()

            # Mostrar mensaje de éxito
            #self.mostrar_mensaje(f"La Cooperativa '{Denominacion}' se eliminó exitosamente", tipo="éxito")

        except ValueError as e:
            self.mostrar_mensaje(f"Error de Eliminacion: {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje(f"Error: No se eliminaron los registros. Error: {e}", tipo="error")
    
    def mostrar_mensaje(self, mensaje, tipo="error"):
        """
        Muestra un mensaje en un SnackBar.
        
        Parámetros:
            mensaje (str): El mensaje a mostrar.
            tipo (str): Tipo de mensaje ("éxito", "error" o "advertencia").
        """
        # Definir el color de fondo según el tipo de mensaje
        if tipo == "éxito":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.GREEN)  # 70% de opacidad
        elif tipo == "advertencia":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.TEAL)   # 70% de opacidad
        else:  # Por defecto, es un error
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.RED)    # 70% de opacidad
        
        # Crear el contenido del SnackBar con bordes redondeados y transparencia
        snack_content = ft.Container(
            content=ft.Text(mensaje, size=18, color=ft.Colors.WHITE),  # Texto del mensaje en blanco
            bgcolor=color_fondo,                              # Color de fondo con transparencia
            border_radius=10,                                 # Bordes redondeados de 10
            padding=10,                                       # Espaciado interno
        )
        
        # Crear el SnackBar
        snack_bar = ft.SnackBar(
            content=snack_content,  # Usar el contenedor con bordes redondeados y transparencia
            open=True,              # Abrir automáticamente
            duration=5000,          # Duración de 5 segundos
            bgcolor=ft.Colors.TRANSPARENT,  # Fondo transparente para el SnackBar
        )
        
        # Agregar el SnackBar a la página y actualizar la UI
        self.page.overlay.append(snack_bar)
        self.page.update()

    def limpiarCampos(self):
        # Lista de widgets
        widgets = [self.texBoxDenominacion, self.texBoxDepartamento, self.texBoxMunicipio, self.texBoxCodigo_Municipio, self.texBoxNim, self.texBoxPrecio, self.texBoxCns, self.texBoxComibol, self.texBoxFencomin, self.texBoxFedecomin, self.texBoxRegalias, self.texBoxCooperativa]
        
        # Limpiar todos los widgets
        for widget in widgets:
            widget.value = ""
        self.page.update()

    def precios(self, e):
        def create_table(e):
            table_name = self.conboboxpreciocomplejo.value
            if not table_name:
                self.mostrar_mensaje("Por favor, selecciona un nombre para la tabla.", tipo="error")
                return

            try:
                with CConection.ConexionBasedeDatos() as cnx:
                    with cnx.cursor() as cursor:
                        cursor.execute(f"""
                            CREATE TABLE IF NOT EXISTS {table_name} (
                                number DOUBLE,
                                precio1 DOUBLE,
                                precio2 DOUBLE,
                                precio3 DOUBLE
                            )
                        """)
                        cnx.commit()
                        self.mostrar_mensaje("Tabla creada con éxito!", tipo="éxito")
            except mysql.connector.Error as err:
                self.mostrar_mensaje(f"Error al crear tabla: {err}", tipo="error")

        def insert_data(e):
            table_name = self.conboboxpreciocomplejo.value
            if not table_name:
                self.mostrar_mensaje("Por favor, selecciona un nombre para la tabla.", tipo="error")
                return

            data = []
            for row_entries in self.data_entries:
                row_data = [entry.value for entry in row_entries]
                if any(row_data):  # Solo agregar filas con datos
                    data.append(tuple(row_data))

            if not data:
                self.mostrar_mensaje("No hay datos para guardar.", tipo="advertencia")
                return

            try:
                with CConection.ConexionBasedeDatos() as cnx:
                    with cnx.cursor() as cursor:
                        placeholders = ', '.join(['%s'] * 4)
                        query = f"INSERT INTO {table_name} (number, precio1, precio2, precio3) VALUES ({placeholders})"
                        cursor.executemany(query, data)
                        cnx.commit()
                        self.mostrar_mensaje("Datos guardados con éxito!", tipo="éxito")
            except mysql.connector.Error as err:
                self.mostrar_mensaje(f"Error al insertar datos: {err}", tipo="error")

        def eliminar_tabla(e):
            table_name = self.conboboxpreciocomplejo.value
            if not table_name:
                self.mostrar_mensaje("Por favor, selecciona un nombre para la tabla.", tipo="error")
                return

            try:
                with CConection.ConexionBasedeDatos() as cnx:
                    with cnx.cursor() as cursor:
                        query = f"DROP TABLE IF EXISTS {table_name}"
                        cursor.execute(query)
                        cnx.commit()
                        self.mostrar_mensaje(f"Tabla {table_name} eliminada con éxito!", tipo="éxito")
            except mysql.connector.Error as err:
                self.mostrar_mensaje(f"Error al eliminar tabla: {err}", tipo="error")

        def actualizar_combobox_precio():
            try:
                with CConection.ConexionBasedeDatos() as cnx:
                    with cnx.cursor() as cursor:
                        sql = "SELECT * FROM Clientes;"
                        cursor.execute(sql)
                        resultados = cursor.fetchall()
                        self.conboboxpreciocomplejo.options = [ft.dropdown.Option(resultado[6]) for resultado in resultados]
                        self.page.update()
            except mysql.connector.Error as err:
                self.mostrar_mensaje(f"Error al actualizar combobox: {err}", tipo="error")

        def move_focus_down(e):
            current_entry = e.control
            for i, row_entries in enumerate(self.data_entries):
                if current_entry in row_entries:
                    current_index = row_entries.index(current_entry)
                    next_index = i + 1
                    if next_index < len(self.data_entries):
                        next_row = self.data_entries[next_index]
                        next_row[current_index].focus()
                    break

        # Configuración de la interfaz
        self.conboboxpreciocomplejo = ft.Dropdown(
            label="Nombre Precio",
            width=340,
            border_color="teal",
            border_radius=10,
            border=ft.border.all(1, ft.Colors.TEAL),
            options=[]
        )

        create_table_button = ft.ElevatedButton(
            text="CREAR",
            on_click=create_table,
            width=105,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
        )

        insert_data_button = ft.ElevatedButton(
            text="GUARDAR",
            on_click=insert_data,
            width=105,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE
        )

        eliminar_tabla_button = ft.ElevatedButton(
            text="ELIMINAR",
            on_click=eliminar_tabla,
            width=105,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE
        )

        # Crear filas de entradas de datos
        self.data_entries = []
        num_row = 1
        for _ in range(35):
            row_entries = []
            for j in range(4):
                if j == 0:
                    entry = ft.TextField(
                        value=str(num_row),
                        width=60,
                        height=45,
                        border_color="teal",
                        border_radius=10,
                        border=ft.border.all(1, ft.Colors.TEAL),
                        read_only=True
                    )
                    num_row += 1
                else:
                    entry = ft.TextField(
                        width=85,
                        height=45,
                        label="Punto",
                        border_color="teal",
                        border_radius=10,
                        border=ft.border.all(1, ft.Colors.TEAL),
                        on_submit=move_focus_down
                    )
                row_entries.append(entry)
            self.data_entries.append(row_entries)

        # Contenido principal
        precios_content = ft.Column(
            controls=[
                ft.Row([self.conboboxpreciocomplejo]),
                ft.Row(controls=[
                    ft.Column(controls=[create_table_button], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                    ft.Column(controls=[insert_data_button], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                    ft.Column(controls=[eliminar_tabla_button], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                ]),
                ft.Row([ft.Text("No", width=60), ft.Text("Precio Ag", width=90), ft.Text("Precio PB", width=90), ft.Text("Precio Zn", width=90)]),
                ft.Column([ft.Row(row_entries) for row_entries in self.data_entries], scroll="auto", height=400)
            ]
        )

        # Diálogo
        self.groupBox = ft.AlertDialog(
            title=ft.Text("INGRESO DE PRECIOS", size=24, color=ft.Colors.TEAL, weight="bold", text_align=ft.TextAlign.CENTER),
            content=precios_content,
            actions=[
                ft.ElevatedButton(text="Cerrar", on_click=lambda e: self.close_dialog())
            ]
        )

        self.page.overlay.append(self.groupBox)
        self.groupBox.open = True
        self.page.update()

        actualizar_combobox_precio()


    def close_dialog(self):
        self.groupBox.open = False
        self.page.update()

class FrameTres(ft.Control):
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.data_entries = []
        self.selected_index = None
        self.create_ui_elements()
        self.actualizarListView()  # Cargar datos al inicializar


    def create_ui_elements(self):
        # Crear los widgets con tamaños ajustados
        self.texBoxFecha = ft.TextField(label="Fecha Cot. (YYYY-MM-DD)",value=datetime.today().strftime('%Y-%m-%d'),width=300,border_color="teal", border_radius=10,)
        self.texBoxCotQuincenalAg = ft.TextField(label="Cot. Quincenal Ag", width=300, border_color="teal", border_radius=10,  border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxCotDiaAg = ft.TextField(label="Cot. Dia Ag", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxCotQuincenalPb = ft.TextField(label="Cot. Quincenal Pb", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxCotDiaPb = ft.TextField(label="Cot. Dia Pb", width=300,border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxCotQuincenalZn = ft.TextField(label="Cot. Quincenal Zn", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxCotDiaZn = ft.TextField(label="Cot. Dia Zn", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxAlicuotaRMAg = ft.TextField(label="Alicuota R.M. Ag", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxAlicuotaRMPb = ft.TextField(label="Alicuota R.M. Pb", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxAlicuotaRMZn = ft.TextField(label="Alicuota R.M. Zn", width=300,border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxTCSusSem = ft.TextField(label="TC Sus Sem", width=300,border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxTCSusDia = ft.TextField(label="TC Sus Dia", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))

        # Títulos de las columnas
        self.column_titles = ft.Row(
            controls=[
                ft.Text("Fecha", width=100, weight="bold", size=12),
                ft.Text("Cot. Quincenal Ag", width=85, weight="bold", size=12),
                ft.Text("Cot Dia Ag", width=100, weight="bold", size=12),
                ft.Text("Cot Quincenal Pb", width=100, weight="bold", size=12),
                ft.Text("Cot Dia Pb", width=100, weight="bold", size=12),
                ft.Text("Cot Quincenal Zn", width=100, weight="bold", size=12),
                ft.Text("Cot Dia Zn", width=100, weight="bold", size=12),
                ft.Text("R.M. Ag", width=100, weight="bold", size=12),
                ft.Text("R.M. Pb", width=100, weight="bold", size=12),
                ft.Text("R.M. Zn", width=100, weight="bold", size=12),
                ft.Text("TC Sus Sem", width=100, weight="bold", size=12),
                ft.Text("TC Sus Dia", width=100, weight="bold", size=12),
            ],
            spacing=10,
        )

        # ListView para mostrar los datos
        self.listview = ft.ListView(
            expand=True,
            spacing=10,
            padding=10,
            auto_scroll=True
        )

        # Botones con el mismo tamaño
        self.boton_guardar_cot = ft.ElevatedButton(text="GUARDAR", on_click=self.guardarregistros, width=200, bgcolor=ft.Colors.TEAL, color=ft.Colors.WHITE, on_hover=self.on_hover_boton_guardar1)
        self.boton_editar = ft.ElevatedButton(text="EDITAR", on_click=self.ModificarCotizaciones, width=200, bgcolor=ft.Colors.TEAL, color=ft.Colors.WHITE, on_hover=self.on_hover_boton_editar)
        self.boton_eliminar = ft.ElevatedButton(text="ELIMINAR", on_click=self.EliminarCotizaciones, width=200, bgcolor=ft.Colors.TEAL, color=ft.Colors.WHITE, on_hover=self.on_hover_boton_eliminar)

        self.selected_row_index = None

        # Agregar todos los componentes a la columna con scroll
        self.controls = [
            ft.Column(
                controls=[
                    ft.Container(
                        content=ft.Text("REGISTRO DE COTIZACIONES", size=24, weight="bold", text_align="center", color=ft.Colors.TEAL),
                        alignment=ft.alignment.center,
                        padding=ft.padding.all(0),
                    ),
                    ft.ResponsiveRow(
                        controls=[
                            ft.Column(controls=[self.texBoxFecha], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxCotQuincenalAg], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxCotDiaAg], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxCotQuincenalPb], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxCotDiaPb], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxCotQuincenalZn], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxCotDiaZn], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxAlicuotaRMAg], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxAlicuotaRMPb], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxAlicuotaRMZn], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxTCSusSem], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.texBoxTCSusDia], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                        ],
                        spacing=7,
                    ),
                    ft.ResponsiveRow(
                        controls=[
                            ft.Column(controls=[self.boton_guardar_cot], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.boton_editar], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            ft.Column(controls=[self.boton_eliminar], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                        ],
                        alignment=ft.MainAxisAlignment.CENTER,
                        spacing=60,
                    ),
                    self.column_titles,
                    ft.Column(
                        controls=[self.listview],
                        scroll=ft.ScrollMode.AUTO,
                        height=250,  # Ajusta la altura según sea necesario
                    ),
                ],
                scroll=ft.ScrollMode.AUTO,
                height=600,  # Ajusta la altura según sea necesario
            )
        ]

    def on_hover_boton_guardar1(self, e):
        self.boton_guardar_cot.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_guardar_cot.update()

    def on_hover_boton_editar(self, e):
        self.boton_editar.bgcolor = "orange" if e.data == "true" else "teal"
        self.boton_editar.update()

    def on_hover_boton_eliminar(self, e):
        self.boton_eliminar.bgcolor = "red" if e.data == "true" else "teal"
        self.boton_eliminar.update()

    def mostrar_mensaje2(self, mensaje, tipo="error"):
        """
        Muestra un mensaje en un SnackBar.
        
        Parámetros:
            mensaje (str): El mensaje a mostrar.
            tipo (str): Tipo de mensaje ("éxito", "error" o "advertencia").
        """
        # Definir el color de fondo según el tipo de mensaje
        if tipo == "éxito":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.GREEN)  # 70% de opacidad
        elif tipo == "advertencia":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.TEAL)   # 70% de opacidad
        else:  # Por defecto, es un error
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.RED)    # 70% de opacidad
        
        # Crear el contenido del SnackBar con bordes redondeados y transparencia
        snack_content = ft.Container(
            content=ft.Text(mensaje, size=18, color=ft.Colors.WHITE),  # Texto del mensaje en blanco
            bgcolor=color_fondo,                              # Color de fondo con transparencia
            border_radius=10,                                 # Bordes redondeados de 10
            padding=10,                                       # Espaciado interno
        )
        
        # Crear el SnackBar
        snack_bar = ft.SnackBar(
            content=snack_content,  # Usar el contenedor con bordes redondeados y transparencia
            open=True,              # Abrir automáticamente
            duration=5000,          # Duración de 5 segundos
            bgcolor=ft.Colors.TRANSPARENT,  # Fondo transparente para el SnackBar
        )
        
        # Agregar el SnackBar a la página y actualizar la UI
        self.page.overlay.append(snack_bar)
        self.page.update()

    def guardarregistros(self, e):
        # Verificar que todos los widgets estén inicializados
        if any(var is None for var in [self.texBoxFecha, self.texBoxCotQuincenalAg, self.texBoxCotDiaAg, self.texBoxCotQuincenalPb, self.texBoxCotDiaPb, self.texBoxCotQuincenalZn, self.texBoxCotDiaZn, self.texBoxAlicuotaRMAg, self.texBoxAlicuotaRMPb, self.texBoxAlicuotaRMZn, self.texBoxTCSusSem, self.texBoxTCSusDia]):
            self.mostrar_mensaje2("Los widgets no están inicializados", tipo="advertencia")            
            return

        # Obtener valores de los widgets
        values = []
        for widget in [self.texBoxFecha, self.texBoxCotQuincenalAg, self.texBoxCotDiaAg, self.texBoxCotQuincenalPb, self.texBoxCotDiaPb, self.texBoxCotQuincenalZn, self.texBoxCotDiaZn, self.texBoxAlicuotaRMAg, self.texBoxAlicuotaRMPb, self.texBoxAlicuotaRMZn, self.texBoxTCSusSem, self.texBoxTCSusDia]:
            value = widget.value
            if value is None or value == '':
                self.mostrar_mensaje2(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                return
            values.append(value)

        fecha= self.texBoxFecha.value

        try:
            # Insertar valores en la base de datos
            CCotizaciones.IngresarCotizaciones(self.page,*values)
            self.actualizarListView()
            
            # Limpiar todos los widgets
            self.limpiarCampos()
            
        except Exception as e:
            self.mostrar_mensaje2(f"La Cooperativa '{fecha}' esta Duplicado {e}", tipo="error")

    def actualizarListView(self):
        try:
            # Limpiar la lista
            self.listview.controls.clear()

            # Obtener los nuevos datos
            datos = CCotizaciones.mostrarCotizaciones()

            # Insertar los nuevos datos en la lista
            for index, row in enumerate(datos):
                self.listview.controls.append(
                    ft.GestureDetector(
                        content=ft.Container(
                            content=ft.Row(
                                controls=[
                                    ft.Text(row[0], width=100),
                                    ft.Text(row[1], width=100),
                                    ft.Text(row[2], width=100),
                                    ft.Text(row[3], width=100),
                                    ft.Text(row[4], width=100),
                                    ft.Text(row[5], width=100),
                                    ft.Text(row[6], width=100),
                                    ft.Text(row[7], width=100),
                                    ft.Text(row[8], width=100),
                                    ft.Text(row[9], width=100),
                                    ft.Text(row[10], width=100),
                                    ft.Text(row[11], width=100),
                                ],
                                alignment=ft.MainAxisAlignment.START,
                            ),
                            padding=10,
                            border=ft.border.all(1, ft.Colors.TEAL),
                            border_radius=10,
                        ),
                        on_tap=lambda e, row=row, index=index: self.seleccionarRegistro(row, index)
                    )
                )
            self.page.update()
        except ValueError as error:
            print('Error al Actualizar Lista {}'.format(error))

    def seleccionarRegistro(self, row, index):
        try:
            self.selected_row_index = index

            # Establecer los valores en los campos de texto
            self.texBoxFecha.value = row[0]
            self.texBoxCotQuincenalAg.value = row[1]
            self.texBoxCotDiaAg.value = row[2]
            self.texBoxCotQuincenalPb.value = row[3]
            self.texBoxCotDiaPb.value = row[4]
            self.texBoxCotQuincenalZn.value = row[5]
            self.texBoxCotDiaZn.value = row[6]
            self.texBoxAlicuotaRMAg.value = row[7]
            self.texBoxAlicuotaRMPb.value = row[8]
            self.texBoxAlicuotaRMZn.value = row[9]
            self.texBoxTCSusSem.value = row[10]
            self.texBoxTCSusDia.value = row[11]

            # Marcar la fila seleccionada
            for i, control in enumerate(self.listview.controls):
                if i == self.selected_row_index:  # Ajuste del índice
                    control.content.border = ft.border.all(2, ft.Colors.TEAL)
                    for cell in control.content.content.controls:
                        cell.color = ft.Colors.TEAL
                else:
                    control.content.border = ft.border.all(1, ft.Colors.TEAL)
                    for cell in control.content.content.controls:
                        cell.color = ft.Colors.BLACK
            self.page.update()
        except Exception as error:
            print(f'Error al seleccionar Registro {error}')

    def ModificarCotizaciones(self, e):
        # Verificar si los widgets están inicializados  
        if any(var is None for var in [self.texBoxFecha, self.texBoxCotQuincenalAg, self.texBoxCotDiaAg, self.texBoxCotQuincenalPb, self.texBoxCotDiaPb, self.texBoxCotQuincenalZn, self.texBoxCotDiaZn, self.texBoxAlicuotaRMAg, self.texBoxAlicuotaRMPb, self.texBoxAlicuotaRMZn, self.texBoxTCSusSem, self.texBoxTCSusDia]):
            self.mostrar_mensaje2("Los widgets no están inicializados", tipo="advertencia")            
            return

        values = []
        for widget in [self.texBoxFecha, self.texBoxCotQuincenalAg, self.texBoxCotDiaAg, self.texBoxCotQuincenalPb, self.texBoxCotDiaPb, self.texBoxCotQuincenalZn, self.texBoxCotDiaZn, self.texBoxAlicuotaRMAg, self.texBoxAlicuotaRMPb, self.texBoxAlicuotaRMZn, self.texBoxTCSusSem, self.texBoxTCSusDia]:
            value = widget.value
            if value is None or value == '':
                self.mostrar_mensaje2(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                return
            values.append(value)

        fecha =self.texBoxFecha.value

        try:
            CCotizaciones.ModificarCotizaciones(self.page,*values)
            self.actualizarListView()
            self.limpiarCampos()

        except ValueError as e:
            self.mostrar_mensaje2(f"La '{fecha}' esta Duplicado {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje2(f"La '{fecha}' esta Duplicado {e}", tipo="error")

    def EliminarCotizaciones(self, e):
        # Verificar si los widgets están inicializados  
        if any(var is None for var in [self.texBoxFecha]):
            self.mostrar_mensaje2("Los widgets no están inicializados", tipo="advertencia")            
            return

        values = []
        for widget in [self.texBoxFecha]:
            value = widget.value
            if not value:
                self.mostrar_mensaje2(f'Seleccione Una Cooperativa', tipo="advertencia")                           
                return
            values.append(value)

        try:
            CCotizaciones.EliminarCotizaciones(self.page,*values)
            self.actualizarListView()
            self.limpiarCampos()

        except ValueError as e:
            self.mostrar_mensaje2(f"Error de Eliminacion: {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje2(f"Error: No se eliminaron los registros: {e}", tipo="error")

    def limpiarCampos(self):
        # Lista de widgets
        widgets = [
            self.texBoxFecha, self.texBoxCotQuincenalAg, self.texBoxCotDiaAg, self.texBoxCotQuincenalPb,
            self.texBoxCotDiaPb, self.texBoxCotQuincenalZn, self.texBoxCotDiaZn, self.texBoxAlicuotaRMAg,
            self.texBoxAlicuotaRMPb, self.texBoxAlicuotaRMZn, self.texBoxTCSusSem, self.texBoxTCSusDia
        ]
        
        # Limpiar todos los widgets
        for widget in widgets:
            widget.value = ""
        self.page.update()
    
class FrameCuatro(ft.Control):
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.data_entries = []
        self.selected_index = None
        self.filtered_entries = []
        self.dropdownAntiguoNombre = None  # Inicializa el atributo aquí
        self.create_ui_elements()
        self.actualizarListView() 
        self.start_auto_update()  # Iniciar la actualización automática

    def start_auto_update(self):
        def update_loop():
            while True:
                self.actualizarListView()  # Actualizar el ListView
                time.sleep(10)  # Esperar 10 segundos antes de la próxima actualización

        # Crear un hilo para ejecutar el bucle de actualización
        threading.Thread(target=update_loop, daemon=True).start()

    def create_ui_elements(self):
        # Crear los widgets con tamaños ajustados
        
        self.texBoxNumLote = TextField(label="Numero Lote",width=300,height=50,border_color="teal",border_radius=10,border=ft.border.all(5, Colors.TEAL),suffix=ft.IconButton(icon=ft.Icons.SEARCH,icon_color=Colors.TEAL,on_click=self.buscadorrecepcion,),on_submit=self.buscarNumeroLoteRecepcion)
        self.conboBoxFechaRecepcion = TextField(label="Fecha Recepcion (YYYY-MM-DD)", width=300, value=datetime.today().strftime('%Y-%m-%d'),border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL))
        self.conboBoxNombresApellidos1 = TextField(label="Nombres Apellidos",width=300,height=50,border_color="teal",border_radius=10,border=ft.border.all(5, Colors.TEAL),suffix=ft.IconButton(icon=ft.Icons.SEARCH,icon_color=Colors.TEAL,on_click=self.frame_tres_dialog,),on_change=self.buscar_proveedor, on_submit=self.seleccionar_proveedor )
        self.texBoxCarnet_Identidad = TextField(label="Carnet de Identidad", width=300, border_color="teal", border_radius=10,border=ft.border.all(5, Colors.TEAL),read_only=True)
        self.texBoxDenominacion1 = TextField(label="Cooperativa Minera", width=300, border_color="teal", border_radius=10,border=ft.border.all(5, Colors.TEAL),read_only=True)
        self.texBoxMunicipio1 = TextField(label="Municipio", width=300, border_color="teal", border_radius=10,border=ft.border.all(5, Colors.TEAL),read_only=True)
        self.texBoxNumeroOrden = TextField(label="Tiket", width=300, border_color="teal", border_radius=10,border=ft.border.all(5, Colors.TEAL))
        self.texBoxProcedencia = TextField(label="Mina", width=300, border_color="teal", border_radius=10,border=ft.border.all(5, Colors.TEAL) )
        self.texBoxFormulario_101 = TextField(label="Formulario-101", width=300, border_color="teal", border_radius=10,border=ft.border.all(5, Colors.TEAL))
        self.texBoxConcesion = TextField(label="Concesion", width=300, border_color="teal", border_radius=10,border=ft.border.all(5, Colors.TEAL), value=0,read_only=True)
        self.texBoxPeso = TextField(label="Peso", width=300, border_color="teal", border_radius=10,border=ft.border.all(5, Colors.TEAL))
        self.texBoxestado = TextField(label="Estado", width=300, border_color="teal", border_radius=10,border=ft.border.all(5, Colors.TEAL), value="No Liquidado",read_only=True)

        # Títulos de las columnas
        self.column_titles = Row(
            controls=[
                Text("Lote", width=50, weight="bold", size=12),
                Text("Fecha", width=80, weight="bold", size=12),
                Text("Nombres y Apellidos", width=200, weight="bold", size=12),
                Text("Carnet Identidad", width=100, weight="bold", size=12),
                Text("Cooperativa", width=150, weight="bold", size=12),
                Text("Municipio", width=100, weight="bold", size=12),
                Text("Tiket", width=80, weight="bold", size=12),
                Text("Mina", width=100, weight="bold", size=12),
                Text("Formulario 101", width=80, weight="bold", size=12),
                Text("Concesion", width=50, weight="bold", size=12),
                Text("Peso", width=100, weight="bold", size=12),
                Text("Estado", width=100, weight="bold", size=12),
            ],
            spacing=10,
            expand=True,
        )

        # ListView para mostrar los datos
        self.listview = ListView(
            expand=True,
            spacing=5,
            padding=5,
            auto_scroll=True,
        )

        # Segundo ListView para mostrar los resultados de búsqueda
        self.listview2 = ListView(
            expand=True,
            spacing=5,
            padding=5,
            auto_scroll=True,
            height=100,
            width=600
        )

        # Botones con el mismo tamaño
        self.boton_guardar_rec = ElevatedButton(
            text="GUARDAR", on_click=self.guardarregistros, width=150,height=40,
            bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=self.on_hover_boton_guardar_rec
        )
        self.boton_editar_rec = ElevatedButton(
            text="EDITAR", on_click=self.ModificarRecepcion, width=150,height=40,
            bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=self.on_hover_boton_editar_rec
        )
        self.boton_eliminar_rec = ElevatedButton(
            text="ELIMINAR", on_click=self.EliminarRecepcion, width=150,height=40,
            bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=self.on_hover_boton_eliminar_rec
        )

        self.selected_row_index = None

        # Crear contenedores para cada sección
        self.titulo_container = Container(
            content=Text("REGISTRO DE RECEPCIONES", size=24, weight="bold", text_align="center", color=Colors.TEAL),
            alignment=alignment.center,
            padding=padding.all(0),
        )

        self.textfields_container = Container(
            content=ft.ResponsiveRow(
                controls=[
                    Column(
                        controls=[
                            self.texBoxNumLote,
                            self.conboBoxFechaRecepcion,
                            self.conboBoxNombresApellidos1,
                        ],
                        col={"xs": 12, "sm": 6, "md": 4, "lg": 6, "xl": 3}
                    ),
                    Column(
                        controls=[
                            self.texBoxFormulario_101,
                            self.texBoxProcedencia,
                            self.texBoxCarnet_Identidad,
                        ],
                        col={"xs": 12, "sm": 6, "md": 4, "lg": 6, "xl": 3}
                    ),
                    Column(
                        controls=[
                            self.texBoxNumeroOrden,
                            self.texBoxConcesion,
                            self.texBoxMunicipio1,
                        ],
                        col={"xs": 12, "sm": 6, "md": 4, "lg": 6, "xl": 3}
                    ),
                    Column(
                        controls=[
                            self.texBoxPeso,
                            self.texBoxestado,
                            self.texBoxDenominacion1,
                        ],
                        col={"xs": 12, "sm": 6, "md": 4, "lg": 6, "xl": 3}
                    ),
                ],
                spacing=5,
                expand=True,
                alignment=ft.MainAxisAlignment.CENTER,
            )
        )

        self.botones_container = Container(
            content=Column(
                controls=[
                    self.boton_guardar_rec,
                    self.boton_editar_rec,
                    self.boton_eliminar_rec,
                    #self.boton_buscar,
                    #self.boton_buscar_proveedor_dos,
                ],
                alignment=ft.MainAxisAlignment.CENTER,
                spacing=30,
            ),
            col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 1}
        )

        self.listview2_container = Container(
            content=self.listview2,
            padding=padding.all(10),
        )

        self.column_titles_container = Container(
            content=self.column_titles,
            padding=padding.all(10),
        )

        self.listview_container = Container(
            content=Column(
                controls=[self.listview],
                alignment=alignment.center,
                scroll=ft.ScrollMode.AUTO,
                height=200,
                width=1800,
            ),
            padding=padding.all(10),
        )

        self.scrollable_content = ft.Column(
            controls=[
                ft.Row(
                    controls=[
                        ft.Column(
                            controls=[
                                self.textfields_container
                            ],
                            expand=6
                        ),
                        ft.Column(
                            controls=[
                                self.botones_container,
                            ],
                            expand=1
                        )
                    ],
                    expand=True,
                    spacing=2  # Espacio entre las columnas
                ),
                ft.Column(
                    controls=[
                        self.listview2_container,
                        self.column_titles_container,
                        self.listview_container,
                    ],
                    expand=1.3,
                    spacing=2  # Espacio entre los contenedores de la lista
                ),
            ],
            scroll=ft.ScrollMode.AUTO,  # Habilitar scroll
            expand=True,
            spacing=2  # Espacio entre el título y el contenido desplazable
        )

        # Asignar el título y el contenido desplazable a los controles
        self.controls = [
            self.titulo_container,  # Título fijo
            self.scrollable_content  # Contenido con scroll
        ]

        # Contenedor principal

    """def on_text_change2(self,e):
        self.texBoxProcedencia.value = self.texBoxProcedencia.value.upper()
        self.page.update()   """ 

    def on_hover_boton_guardar_rec(self, e):
        self.boton_guardar_rec.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_guardar_rec.update()

    def on_hover_boton_editar_rec(self, e):
        self.boton_editar_rec.bgcolor = "orange" if e.data == "true" else "teal"
        self.boton_editar_rec.update()

    def on_hover_boton_eliminar_rec(self, e):
        self.boton_eliminar_rec.bgcolor = "red" if e.data == "true" else "teal"
        self.boton_eliminar_rec.update()
 
    def mostrar_mensaje4(self, mensaje, tipo="error"):
        """
        Muestra un mensaje en un SnackBar.
        
        Parámetros:
            mensaje (str): El mensaje a mostrar.
            tipo (str): Tipo de mensaje ("éxito", "error" o "advertencia").
        """
        # Definir el color de fondo según el tipo de mensaje
        if tipo == "éxito":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.GREEN)  # 70% de opacidad
        elif tipo == "advertencia":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.TEAL)   # 70% de opacidad
        else:  # Por defecto, es un error
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.RED)    # 70% de opacidad
        
        # Crear el contenido del SnackBar con bordes redondeados y transparencia
        snack_content = ft.Container(
            content=ft.Text(mensaje, size=18, color=ft.Colors.WHITE),  # Texto del mensaje en blanco
            bgcolor=color_fondo,                              # Color de fondo con transparencia
            border_radius=10,                                 # Bordes redondeados de 10
            padding=10,                                       # Espaciado interno
        )
        
        # Crear el SnackBar
        snack_bar = ft.SnackBar(
            content=snack_content,  # Usar el contenedor con bordes redondeados y transparencia
            open=True,              # Abrir automáticamente
            duration=5000,          # Duración de 5 segundos
            bgcolor=ft.Colors.TRANSPARENT,  # Fondo transparente para el SnackBar
        )
        
        # Agregar el SnackBar a la página y actualizar la UI
        self.page.overlay.append(snack_bar)
        self.page.update()

    def verificar_liquidacion(self, num_lote):
        try:
            # Conexión segura con with anidado para conexión y cursor
            with CConection.ConexionBasedeDatos() as conexion:
                with conexion.cursor(prepared=True) as cursor:
                    sql = "SELECT VNetoBs FROM Liquidacion WHERE NumLote = %s"
                    params = (num_lote,)
                    cursor.execute(sql, params)
                    resultado = cursor.fetchone()
                    
                    if resultado and resultado[0] is not None:
                        self.mostrar_mensaje4(f"El lote '{num_lote}' ya está liquidado", tipo="advertencia")
                        self.limpiarCampos()
                        return False
                    return True
                    
        except Exception as e:
            self.mostrar_mensaje4(f"Error al verificar liquidación: {str(e)}", tipo="error")
            return False

    def verificar_lote_resepcion(self, num_lote):
        # Verifica si el número de lote es 0
        if num_lote == 0:
            return True  # No se realiza ninguna acción si el lote es 0

        try:
            # Conexión segura a la base de datos con with
            with CConection.ConexionBasedeDatos() as conexion:
                with conexion.cursor(prepared=True) as cursor:
                    sql = "SELECT NumLote FROM Recepcion WHERE NumLote = %s"
                    params = (num_lote,)
                    cursor.execute(sql, params)
                    resultado = cursor.fetchone()
                    
                    # Verifica si el resultado no es None y está en el rango de 1 a 110000
                    if resultado and resultado[0] is not None and 1 <= resultado[0] <= 110000:
                        self.mostrar_mensaje4(f"El lote '{num_lote}' ya está registrado", tipo="advertencia")
                        self.limpiarCampos()
                        return False
                    return True
        
        except Exception as e:
            self.mostrar_mensaje4(f"Error al verificar lote: {str(e)}", tipo="error")
            return False
    def guardarregistros(self, e):
        # Verificar que todos los widgets estén inicializados
        if any(var is None for var in [self.texBoxNumLote, self.conboBoxFechaRecepcion, self.conboBoxNombresApellidos1, self.texBoxCarnet_Identidad, self.texBoxDenominacion1, self.texBoxMunicipio1, self.texBoxNumeroOrden, self.texBoxProcedencia, self.texBoxFormulario_101, self.texBoxConcesion, self.texBoxPeso, self.texBoxestado]):
            self.mostrar_mensaje4("Los widgets no están inicializados", tipo="advertencia")            
            return

        # Obtener valores de los widgetss
        values = []
        for widget in [self.texBoxNumLote, self.conboBoxFechaRecepcion, self.conboBoxNombresApellidos1, self.texBoxCarnet_Identidad, self.texBoxDenominacion1, self.texBoxMunicipio1, self.texBoxNumeroOrden, self.texBoxProcedencia, self.texBoxFormulario_101, self.texBoxConcesion, self.texBoxPeso, self.texBoxestado]:
            value = widget.value
            if value is None or value == '':
                self.mostrar_mensaje4(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                return
            values.append(value)

        num_lote = int(self.texBoxNumLote.value)
        if not self.verificar_liquidacion(num_lote) or not self.verificar_lote_resepcion(num_lote):
            return

        try:
            # Insertar valores en la base de datos
            CRecepcion.IngresarRecepcion(self.page, *values)
            self.actualizarListView()
            
            # Limpiar todos los widgets
            self.limpiarCampos()

        except ValueError as e:
            self.mostrar_mensaje4(f"Error: El Lote '{num_lote}' {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje4(f"Error: El Lote '{num_lote}' {e}", tipo="error")

    def actualizarListView(self):
        try:
            # Limpiar la lista
            self.listview.controls.clear()

            # Obtener los nuevos datos
            datos = CRecepcion.mostrarRecepcion()

            # Insertar los nuevos datos en la lista
            for index, row in enumerate(datos):
                self.listview.controls.append(
                    GestureDetector(
                        content=Container(
                            content=Row(
                                controls=[
                                    Text(row[0], width=50),
                                    Text(row[1], width=80),
                                    Text(row[2], width=200),
                                    Text(row[3], width=100),
                                    Text(row[4], width=150),
                                    Text(row[5], width=100),
                                    Text(row[6], width=80),
                                    Text(row[7], width=100),
                                    Text(row[8], width=80),
                                    Text(row[9], width=50),
                                    Text(row[10], width=100),
                                    Text(row[11], width=100),
                                ],
                                alignment=ft.MainAxisAlignment.START,
                            ),
                            padding=10,
                            border=border.all(1, Colors.TEAL),
                            border_radius=10,
                        ),
                        on_tap=lambda e, row=row, index=index: self.seleccionarRegistro(row, index)
                    )
                )
            self.page.update()
        except ValueError as error:
            print('Error al Actualizar Lista {}'.format(error))


    def seleccionarRegistro(self, row, index):
        try:
            self.selected_row_index = index

            # Establecer los valores en los campos de texto
            self.texBoxNumLote.value = row[0]
            self.conboBoxFechaRecepcion.value = row[1]
            self.conboBoxNombresApellidos1.value = row[2]
            self.texBoxCarnet_Identidad.value = row[3]
            self.texBoxDenominacion1.value = row[4]
            self.texBoxMunicipio1.value = row[5]
            self.texBoxNumeroOrden.value = row[6]
            self.texBoxProcedencia.value = row[7]
            self.texBoxFormulario_101.value = row[8]
            self.texBoxConcesion.value = row[9]
            self.texBoxPeso.value = row[10]
            self.texBoxestado.value = row[11]

            # Marcar la fila seleccionada
            for i, control in enumerate(self.listview.controls):
                container = control.content
                if i == self.selected_row_index:  # Ajuste del índice
                    container.border = border.all(2, Colors.TEAL)
                    for cell in container.content.controls:
                        cell.color = Colors.TEAL
                else:
                    container.border = border.all(1, Colors.TEAL)
                    for cell in container.content.controls:
                        cell.color = Colors.BLACK
            self.page.update()
        except Exception as error:
            print(f'Error al seleccionar Registro {error}')


    def ModificarRecepcion(self, e):
        # Verificar si los widgets están inicializados  
        if any(var is None for var in [self.texBoxNumLote, self.conboBoxFechaRecepcion, self.conboBoxNombresApellidos1, self.texBoxCarnet_Identidad, self.texBoxDenominacion1, self.texBoxMunicipio1, self.texBoxNumeroOrden, self.texBoxProcedencia, self.texBoxFormulario_101, self.texBoxConcesion, self.texBoxPeso, self.texBoxestado]):
            self.mostrar_mensaje4("Los widgets no están inicializados", tipo="advertencia")            
            return

        values = []
        for widget in [self.texBoxNumLote, self.conboBoxFechaRecepcion, self.conboBoxNombresApellidos1, self.texBoxCarnet_Identidad, self.texBoxDenominacion1, self.texBoxMunicipio1, self.texBoxNumeroOrden, self.texBoxProcedencia, self.texBoxFormulario_101, self.texBoxConcesion, self.texBoxPeso, self.texBoxestado]:
            value = widget.value
            if value is None or value == '':
                self.mostrar_mensaje4(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                return
            values.append(value)

        num_lote = int(self.texBoxNumLote.value)
        if not self.verificar_liquidacion(num_lote):
            return

        try:
            CRecepcion.ModificarRecepcion(self.page, *values)
            self.actualizarListView()
            self.limpiarCampos()

        except ValueError as e:
            self.mostrar_mensaje4(f"Error: El Lote '{num_lote}' {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje4(f"Error: El Lote '{num_lote}' {e}", tipo="error")

    def EliminarRecepcion(self, e):
        # Verificar si los widgets están inicializados  
        if any(var is None for var in [self.texBoxNumLote]):
            self.mostrar_mensaje4("Los widgets no están inicializados", tipo="advertencia")            
            return

        values = []
        for widget in [self.texBoxNumLote]:
            value = widget.value
            if not value:
                self.mostrar_mensaje4(f'Seleccione Un Numero de Lote', tipo="advertencia")                           
                return
            values.append(value)

        num_lote = int(self.texBoxNumLote.value)
        if not self.verificar_liquidacion(num_lote):
            return

        try:
            CRecepcion.EliminarRecepcion(self.page, *values)
            self.actualizarListView()
            self.limpiarCampos()

        except ValueError as e:
            self.mostrar_mensaje4(f"Error de Eliminacion: {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje4(f"Error: No se eliminaron los registros: {e}", tipo="error")

    def buscar_proveedor(self, e):
        try:
            search_term = self.conboBoxNombresApellidos1.value
            sql = """
                SELECT  p.NombresApellidos, p.CarnetIdentidad, c.Denominacion, c.Municipio
                FROM Proveedores p
                JOIN Clientes c ON p.Denominacion = c.Denominacion
                WHERE p.NombresApellidos LIKE %s LIMIT 5
                """
            with CConection.ConexionBasedeDatos() as conn:
                if conn is None:
                    raise Exception("No se pudo establecer la conexión a la base de datos.")
                with conn.cursor() as cursor:
                    cursor.execute(sql, ('%' + search_term + '%',))
                    rows = cursor.fetchall()
                    self.listview2.controls.clear()
                    for row in rows:
                        self.listview2.controls.append(
                            GestureDetector(
                                content=Container(
                                    content=Row(
                                        controls=[
                                            Text(row[0], width=250),
                                            Text(row[1], width=150),
                                            Text(row[2], width=150),
                                            Text(row[3], width=150),
                                        ],
                                        alignment=ft.MainAxisAlignment.START,
                                    ),
                                    padding=10,
                                    border=border.all(1, Colors.TEAL),
                                    border_radius=10,
                                ),
                                on_tap=lambda e, row=row: self.seleccionar_proveedor(row)
                            )
                        )
            self.page.update()
        except Exception as e:
            self.mostrar_mensaje4(f"Error: {str(e)}", tipo="advertencia")

    def seleccionar_proveedor(self, row):
        self.conboBoxNombresApellidos1.value = row[0]
        self.texBoxCarnet_Identidad.value = row[1]
        self.texBoxDenominacion1.value = row[2]
        self.texBoxMunicipio1.value = row[3]
        self.page.update()

    def buscadorrecepcion(self, e):
        self.buscar()

    #def buscarNumeroLoteRecepcion(self, e):
    def buscarNumeroLoteRecepcion(self, e, event=None):
        num_lote = self.texBoxNumLote.value

        num_lote_str = str(num_lote)

    # Validar si el valor ingresado es un número
        if not num_lote_str.isdigit():
            self.mostrar_mensaje4('El número de lote debe ser un valor numérico entero', tipo="advertencia")
            return

        if not self.verificar_liquidacion(num_lote):
            return    

        try:
            # Buscar el lote en la base de datos
            row = CRecepcion.buscar_numero_recepcion(num_lote)
            if row:
                self.texBoxNumLote.value = row[0]
                self.conboBoxFechaRecepcion.value = row[1]
                self.conboBoxNombresApellidos1.value = row[2]
                self.texBoxCarnet_Identidad.value = row[3]
                self.texBoxDenominacion1.value = row[4]
                self.texBoxMunicipio1.value = row[5]
                self.texBoxNumeroOrden.value = row[6]
                self.texBoxProcedencia.value = row[7]
                self.texBoxFormulario_101.value = row[8]
                self.texBoxConcesion.value = row[9]
                self.texBoxPeso.value = row[10]
                self.texBoxestado.value = row[11]
                self.page.update()
                self.mostrar_mensaje4(f" El Lote '{num_lote}' Encontrado Puedes Editar ", tipo="éxito")
            else:
                self.limpiarCampos()
                self.mostrar_mensaje4(f" El Lote '{num_lote}'no esta Recepcionado",tipo="advertencia")
        except Exception as e:
                self.mostrar_mensaje4(f"Error: No se pudo buscar el Lote '{num_lote}'. Detalle: {e}", tipo="error")

    def limpiarCampos(self):
        # Lista de widgets
        widgets = [
            self.texBoxNumLote, self.conboBoxNombresApellidos1, self.texBoxCarnet_Identidad,
            self.texBoxDenominacion1, self.texBoxMunicipio1, self.texBoxNumeroOrden, self.texBoxProcedencia,
            self.texBoxFormulario_101,  self.texBoxPeso
        ]
        
        # Limpiar todos los widgets
        for widget in widgets:
            widget.value = ""
        self.page.update()

    def buscadorrecepcion(self, e):
        self.buscarlote()

    def buscarlote(self):
        def on_hover_boton_buscar(e):
            boton_buscar.bgcolor = "green" if e.data == "true" else "teal"
            boton_buscar.update()

        def buscar_proveedorliquidacionesrecepcion(e=None):
            try:
                search_term = entry_nombres_apellidos.value
                num_lote = entry_num_lote.value

                # Obtener el valor seleccionado del RadioGroup
                estado_seleccionado = estado_group.value
                estado_condition = ""
                if estado_seleccionado == "Liquidado":
                    estado_condition = "AND Recepcion.Estado = 'Liquidado'"
                elif estado_seleccionado == "No Liquidado":
                    estado_condition = "AND Recepcion.Estado = 'No Liquidado'"

                fecha_inicio = entry_fecha_inicio.value
                fecha_final = entry_fecha_final.value
                fecha_condition = ""
                if fecha_inicio and fecha_final:
                    fecha_condition = "AND Recepcion.fecha BETWEEN %s AND %s"
                elif fecha_inicio:
                    fecha_condition = "AND Recepcion.fecha >= %s"
                elif fecha_final:
                    fecha_condition = "AND Recepcion.fecha <= %s"

                if num_lote:
                    num_lote_condition = "AND Recepcion.NumLote = %s"
                else:
                    num_lote_condition = ""

                sql = f"""
                    SELECT 
                        Recepcion.fecha, 
                        CONCAT(COALESCE(Liquidacion.NombreInicial, '0'), '-', Recepcion.Numlote) as LoteCompleto,
                        ROUND(Recepcion.Peso, 0) AS Peso, 
                        Recepcion.NombresApellidos, 
                        Recepcion.Denominacion, 
                        COALESCE(Liquidacion.leyesZnliq, 0) AS leyesZnliq, 
                        COALESCE(Liquidacion.leyesAgliq, 0) AS leyesAgliq, 
                        COALESCE(Liquidacion.leyespbliq, 0) AS leyespbliq,
                        GROUP_CONCAT(Comprobantes.idcomprobantes SEPARATOR '-') AS NumRecibo,
                        GROUP_CONCAT(COALESCE(Comprobantes.egreso, 0) SEPARATOR '-') AS AnticipoS,
                        COALESCE(Liquidacion.fechaliq, '0') AS fechaliq, 
                        Recepcion.estado 
                    FROM 
                        Recepcion
                    LEFT JOIN 
                        Liquidacion ON Recepcion.NumLote = Liquidacion.NumLote 
                    LEFT JOIN 
                        Comprobantes ON Comprobantes.NumLote = Recepcion.NumLote 
                    INNER JOIN 
                        Proveedores ON Proveedores.NombresApellidos = Recepcion.NombresApellidos 
                    LEFT JOIN  -- Cambiado de INNER JOIN a LEFT JOIN para permitir valores nulos
                        Inicial ON Inicial.NombreInicial = Liquidacion.NombreInicial
                    WHERE 
                        Proveedores.NombresApellidos LIKE %s 
                        {num_lote_condition}
                        {estado_condition} 
                        {fecha_condition}
                    GROUP BY 
                        Recepcion.fecha, Recepcion.NumLote, Recepcion.Peso, Recepcion.NombresApellidos, 
                        Recepcion.Denominacion, Liquidacion.leyesZnliq, Liquidacion.leyesAgliq, 
                        Liquidacion.leyespbliq, Liquidacion.fechaliq, Recepcion.estado, Liquidacion.NombreInicial
                    ORDER BY 
                        Recepcion.NumLote
                    """

                params = ['%' + search_term + '%']
                if num_lote:
                    params.append(num_lote)
                if fecha_inicio and fecha_final:
                    params.extend([fecha_inicio, fecha_final])
                elif fecha_inicio:
                    params.append(fecha_inicio)
                elif fecha_final:
                    params.append(fecha_final)

                conn = CConection.ConexionBasedeDatos()
                if conn is None:
                    raise Exception("No se pudo establecer la conexión a la base de datos.")

                with conn:
                    with conn.cursor() as cursor:
                        cursor.execute(sql, params)
                        rows = cursor.fetchall()

                        listview_proveedores.controls.clear()

                        # Agregar los títulos
                        listview_proveedores.controls.append(
                            Container(
                                content=Row(
                                    controls=[
                                        Text("Fecha", width=80, weight="bold"),
                                        Text("Lote", width=70, weight="bold"),
                                        Text("Peso", width=80, weight="bold"),
                                        Text("Nombres y Apellidos", width=150, weight="bold"),
                                        Text("Denominación", width=100, weight="bold"),
                                        Text("Leyes Zn", width=80, weight="bold"),
                                        Text("Leyes Ag", width=80, weight="bold"),
                                        Text("Leyes Pb", width=80, weight="bold"),
                                        Text("Num Recibo", width=100, weight="bold"),
                                        Text("Anticipo", width=100, weight="bold"),
                                        Text("Fecha Liquidación", width=80, weight="bold"),
                                        Text("Estado", width=100, weight="bold"),
                                    ],
                                    alignment=ft.MainAxisAlignment.START,
                                ),
                                padding=10,
                                border=border.all(1, Colors.TEAL),
                                border_radius=10,
                            )
                        )

                        for row in rows:
                            listview_proveedores.controls.append(
                                Container(
                                    content=Row(
                                        controls=[
                                            Text(row[0], width=80),
                                            Text(row[1], width=70),
                                            Text(row[2], width=80),
                                            Text(row[3], width=150),
                                            Text(row[4], width=100),
                                            Text(row[5], width=80),
                                            Text(row[6], width=80),
                                            Text(row[7], width=80),
                                            Text(row[8], width=100),
                                            Text(row[9], width=100),
                                            Text(row[10], width=80),
                                            Text(row[11], width=100),
                                        ],
                                        alignment=ft.MainAxisAlignment.START,
                                    ),
                                    padding=5, #espacio del texto y los bordes
                                    border=border.all(1, Colors.TEAL),
                                    border_radius=10,
                                    
                                )
                            )
                        listview_proveedores.update()

            except Exception as e:
                self.mostrar_mensaje4(f"Error: No se encontraron los registros. Error: {e}", tipo="error")

        # Crear los widgets con estilos
        entry_nombres_apellidos = TextField(
            label="Nombres y Apellidos",
            on_change=buscar_proveedorliquidacionesrecepcion,
            width=300, border_color="teal", border_radius=10,
            border=ft.border.all(5, Colors.TEAL), suffix_icon=ft.Icon(name=ft.Icons.SEARCH, color=Colors.TEAL),
        )
        entry_num_lote = TextField(
            label="Número de Lote",
            on_change=buscar_proveedorliquidacionesrecepcion,
            width=300, border_color="teal", border_radius=10,
            border=ft.border.all(5, Colors.TEAL), suffix_icon=ft.Icon(name=ft.Icons.SEARCH, color=Colors.TEAL),
        )

        # Crear RadioGroup con RadioButtons
        estado_group = ft.RadioGroup(
            content=Row(
                controls=[
                    ft.Radio(value="Todos", label="Todos"),
                    ft.Radio(value="Liquidado", label="Liquidado"),
                    ft.Radio(value="No Liquidado", label="No Liquidado"),
                ],
                spacing=30,
            ),
            on_change=buscar_proveedorliquidacionesrecepcion,
        )

        entry_fecha_inicio = TextField(
            label="Fecha Inicio (YYYY-MM-DD)",
            width=300, border_color="teal", border_radius=10,
            border=ft.border.all(5, Colors.TEAL)
        )
        entry_fecha_final = TextField(
            label="Fecha Final (YYYY-MM-DD)",
            width=300, border_color="teal", border_radius=10,
            border=ft.border.all(5, Colors.TEAL)
        )

        listview_proveedores = ListView(
            expand=True,
            spacing=5,
            padding=10,
            width=2100,
            auto_scroll=True
        )

        

        # Botón para ejecutar la búsqueda con estilos
        boton_buscar = ElevatedButton(
            text="Buscar",
            on_click=buscar_proveedorliquidacionesrecepcion,
            width=200, bgcolor=Colors.TEAL, color=Colors.WHITE,
            on_hover=on_hover_boton_buscar
        )

        # Agregar todos los componentes a la columna
        controls = [
            ft.ResponsiveRow(
                controls=[
                    Column(
                        controls=[
                            entry_nombres_apellidos,
                        ],
                        col={"xs": 12, "sm": 6, "md": 4, "lg": 3},
                        spacing=10,
                    ),
                    Column(
                        controls=[
                            entry_num_lote,
                        ],
                        col={"xs": 12, "sm": 6, "md": 4, "lg": 3},
                        spacing=10,
                    ),
                    Column(
                        controls=[
                            entry_fecha_inicio,
                        ],
                        col={"xs": 12, "sm": 6, "md": 4, "lg": 3},
                        spacing=10,
                    ),
                    Column(
                        controls=[
                            entry_fecha_final,
                        ],
                        col={"xs": 12, "sm": 6, "md": 4, "lg": 3},
                        spacing=10,
                    ),
                    Column(
                        controls=[
                            estado_group,  # Usar el RadioGroup aquí
                        ],
                        col={"xs": 12, "sm": 6, "md": 4, "lg": 3},
                        spacing=50,
                    ),
                ],
                spacing=10,
            ),
            boton_buscar,
            listview_proveedores,
        ]

        # Envolver los controles en un Column sin scroll
        scrollable_column = Column(
            controls=controls,
            height=600  # Ajusta la altura según sea necesario
        )

        self.dialog = AlertDialog(
            title=Text("BUSCAR PROVEEDORES", size=24,
                    weight="bold",
                    color=Colors.TEAL,
                    text_align=ft.TextAlign.CENTER),
            content=scrollable_column,
            actions=[ft.TextButton("Cerrar", on_click=lambda e: self.close_dialog())]
        )

        self.page.overlay.append(self.dialog)
        self.dialog.open = True
        self.page.update()

    def close_dialog(self):
        self.dialog.open = False
        self.page.update()
    
    def frame_tres_dialog(self, e):
        def on_hover_boton_guardar_prov(e):
            self.boton_guardar_prov.bgcolor = "green" if e.data == "true" else "teal"
            self.boton_guardar_prov.update()

        def on_hover_boton_editar_prov(e):
            self.boton_editar_prov.bgcolor = "orange" if e.data == "true" else "teal"
            self.boton_editar_prov.update()

        def on_hover_boton_eliminar_prov(e):
            self.boton_eliminar_prov.bgcolor = "red" if e.data == "true" else "teal"
            self.boton_eliminar_prov.update()

        def guardarregistrosnombres(e):
            # Verificar que todos los widgets estén inicializados
            if any(var is None for var in [self.texBoxNombresApellidos, self.texBoxCarnetIdentidad, self.conboBoxDenominacion]):
                self.mostrar_mensaje4("Los widgets no están inicializados", tipo="advertencia")            
                return

            # Obtener valores de los widgets
            values = []
            for widget in [self.texBoxNombresApellidos, self.texBoxCarnetIdentidad, self.conboBoxDenominacion]:
                value = widget.value
                if value is None or value == '':
                    self.mostrar_mensaje4(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                    return
                values.append(value)

            nombre = self.texBoxNombresApellidos.value

            try:
                # Insertar valores en la base de datos
                CProveedores.IngresarProveedores(self.page, *values)
                actualizarListView_prov()
                limpiarCampos_tres_dialog()
                
            except ValueError as e:
                self.mostrar_mensaje4(f"Error: El Lote '{nombre}' {e}", tipo="error")
            except Exception as e:
                self.mostrar_mensaje4(f"Error: El Lote '{nombre}' {e}", tipo="error")

        def actualizarListView_prov():
            try:
                # Limpiar la lista
                self.listviewprov.controls.clear()

                # Agregar los títulos de las columnas
                self.listviewprov.controls.append(
                    Container(
                        content=Row(
                            controls=[
                                Text("No", width=80, weight="bold"),
                                Text("Nombres y Apellidos", width=250, weight="bold"),
                                Text("C. I.", width=100, weight="bold"),
                                Text("Cooperativa", width=180, weight="bold"),
                            ],
                            alignment=ft.MainAxisAlignment.START,
                        ),
                        padding=10,
                        border=border.all(1, Colors.TEAL),
                        border_radius=10,
                    )
                )

                # Obtener los nuevos datos
                self.data_entries = CProveedores.mostrarProveedores()
                self.filtered_entries = self.data_entries

                # Insertar los nuevos datos en la lista
                for index, row in enumerate(self.filtered_entries):
                    self.listviewprov.controls.append(
                        GestureDetector(
                            content=Container(
                                content=Row(
                                    controls=[
                                        Text(row[0], width=80),
                                        Text(row[1], width=250),
                                        Text(row[2], width=100),
                                        Text(row[3], width=180),
                                    ],
                                    alignment=ft.MainAxisAlignment.START,
                                ),
                                padding=10,
                                border=border.all(1, Colors.TEAL),
                                border_radius=10,
                            ),
                            on_tap=lambda e, row=row, index=index: seleccionarRegistro_prov(row, index)
                        )
                    )
                self.page.update()
            except ValueError as error:
                print('Error al Actualizar Lista {}'.format(error))

        def seleccionarRegistro_prov(row, index):
            try:
                #nonlocal selected_row_index
                selected1_row_index = index

                # Establecer los valores en los campos de texto
                self.texBoxIdProveedores.value = row[0]
                self.texBoxNombresApellidos.value = row[1]
                self.texBoxCarnetIdentidad.value = row[2]
                self.conboBoxDenominacion.value = row[3]

                # Marcar la fila seleccionada
                for i, control in enumerate(self.listviewprov.controls[1:]):  # Saltar el título de las columnas
                    container = control.content  # Obtener el contenedor
                    if i == selected1_row_index:  # Ajuste del índice
                        container.border = border.all(2, Colors.TEAL)
                        for cell in container.content.controls:
                            cell.color = Colors.TEAL
                    else:
                        container.border = border.all(1, Colors.TEAL)
                        for cell in container.content.controls:
                            cell.color = Colors.BLACK
                self.page.update()
            except Exception as error:
                print(f'Error al seleccionar Registro {error}')

        def ModificarProveedores(e):
            # Verificar si los widgets están inicializados  
            if any(var is None for var in [self.texBoxNombresApellidos, self.texBoxCarnetIdentidad, self.conboBoxDenominacion,self.texBoxIdProveedores,]):
                self.mostrar_mensaje4("Los widgets no están inicializados", tipo="advertencia")            
                return

            values = []
            for widget in [self.texBoxNombresApellidos, self.texBoxCarnetIdentidad, self.conboBoxDenominacion,self.texBoxIdProveedores,]:
                value = widget.value
                if value is None or value == '':
                    self.mostrar_mensaje4(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                    return
                values.append(value)
            nombre = self.texBoxNombresApellidos.value
            try:
                CProveedores.ModificarProveedores(self.page, *values)
                actualizarListView_prov()
                limpiarCampos_tres_dialog()

            except ValueError as e:
                self.mostrar_mensaje4(f"Error: Nombre '{nombre} no Puede ser Editado' {e}", tipo="error")
            except Exception as e:
                self.mostrar_mensaje4(f"Error: El Lote '{nombre} no puede ser Editado' {e}", tipo="error")

        def EliminarProveedores(e):
            # Verificar si los widgets están inicializados  
            if any(var is None for var in [self.texBoxIdProveedores,self.texBoxNombresApellidos]):
                self.mostrar_mensaje4("Los widgets no están inicializados", tipo="advertencia")            
                return

            values = []
            for widget in [self.texBoxIdProveedores,self.texBoxNombresApellidos]:
                value = widget.value
                if not value:
                    self.mostrar_mensaje4(f'Seleccione Un Numero de Lote', tipo="advertencia")                           
                    return
                values.append(value)

            try:
                CProveedores.EliminarProveedores(self.page, *values)
                actualizarListView_prov()
                limpiarCampos_tres_dialog()

            except ValueError as e:
                self.mostrar_mensaje4(f"Error de Eliminacion: {e}", tipo="error")
            except Exception as e:
                self.mostrar_mensaje4(f"Error: No se eliminaron los registros: {e}", tipo="error")

        def conboBox_Denominacion():
            try:
                with CConection.ConexionBasedeDatos() as cone:
                    with cone.cursor()as cursor:
                        cursor.execute("select Denominacion from Clientes order by Denominacion;")
                        miResultado = cursor.fetchall()
                        self.conboBoxDenominacion.options = [
                            dropdown.Option(x[0]) for x in miResultado
                        ]
                        self.page.update()
                        cone.commit()
                        return miResultado

            except mysql.connector.Error as error:
                print("Error de Mostrar Datos {}".format(error))
                return []

        """def combined_on_change(event):
            buscar_proveedorliquidacionesrecepcion(event)
            self.on_text_change1(event)"""

        def limpiarCampos_tres_dialog():
            # Lista de widgets
            widgets = [
                self.texBoxIdProveedores, self.texBoxNombresApellidos, self.texBoxCarnetIdentidad, self.conboBoxDenominacion
            ]
            
            # Limpiar todos los widgets
            for widget in widgets:
                widget.value = ""
            self.page.update()

        def buscar_proveedorliquidacionesrecepcion(e=None):
            try:
                search_term = self.texBoxNombresApellidos.value

                sql = """
                    SELECT 
                        IdProveedores, 
                        NombresApellidos, 
                        CarnetIdentidad, 
                        Denominacion 
                    FROM 
                        Proveedores 
                    WHERE 
                        NombresApellidos LIKE %s
                    """
                
                params = ['%' + search_term + '%']

                with CConection.ConexionBasedeDatos() as conn:
                    if conn is None:
                        raise Exception("No se pudo establecer la conexión a la base de datos.")
                    with conn.cursor() as cursor:
                        cursor.execute(sql, params)
                        rows = cursor.fetchall()

                        self.listviewprov.controls.clear()

                        # Agregar los títulos de las columnas
                        self.listviewprov.controls.append(
                            Container(
                                content=Row(
                                    controls=[
                                        Text("No", width=80, weight="bold"),
                                        Text("Nombres y Apellidos", width=250, weight="bold"),
                                        Text("Carnet Identidad", width=100, weight="bold"),
                                        Text("Cooperativa", width=180, weight="bold"),
                                    ],
                                    alignment=ft.MainAxisAlignment.START,
                                ),
                                padding=10,
                                border=border.all(1, Colors.TEAL),
                                border_radius=10,
                            )
                        )

                        for index, row in enumerate(rows):
                            self.listviewprov.controls.append(
                                GestureDetector(
                                    content=Container(
                                        content=Row(
                                            controls=[
                                                Text(row[0], width=80),
                                                Text(row[1], width=250),
                                                Text(row[2], width=100),
                                                Text(row[3], width=180),
                                            ],
                                            alignment=ft.MainAxisAlignment.START,
                                        ),
                                        padding=10,
                                        border=border.all(1, Colors.TEAL),
                                        border_radius=10,
                                    ),
                                    on_tap=lambda e, row=row, index=index: seleccionarRegistro_prov(row, index)
                                )
                            )
                        self.listviewprov.update()

            except Exception as e:
    
                self.dialog = AlertDialog(
                    title=Text("Error"),
                    content=Text(str(e)),
                    actions=[ft.TextButton("OK", on_click=close_dialog1)]
                )
                self.page.overlay.append(self.dialog)
                self.dialog.open = True
                self.page.update() 

                def close_dialog1():
                    self.page.overlay.remove(self.dialog)
                    self.page.update()

        # Crear los widgets con tamaños ajustados
        self.texBoxIdProveedores = TextField(label="Id Proveedores", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL), disabled=True)
        #self.texBoxNombresApellidos = TextField(label="Nombres y Apellidos", border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL),suffix_icon=ft.Icon(name=ft.Icons.SEARCH, color=Colors.TEAL), on_change=buscar_proveedorliquidacionesrecepcion)
        
        self.texBoxNombresApellidos = TextField(
            label="Nombres y Apellidos",
            width=300,
            height=50,
            border_color="teal",
            border_radius=10,
            border=ft.border.all(5, Colors.TEAL),
            suffix=ft.IconButton(  # Usar suffix para agregar un botón
                icon=ft.Icons.SEARCH,
                icon_color=Colors.TEAL,
                on_click=self.show_dialog_actializar_nombres,  # Función que se ejecuta al hacer clic en el botón
            ),
            on_change=buscar_proveedorliquidacionesrecepcion  # Función que se ejecuta al presionar Enter
        )
        
        self.texBoxCarnetIdentidad = TextField(label="Carnet de Identidad", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL))
        self.conboBoxDenominacion = dropdown.Dropdown(
            label="Cooperativa",
            width=300, border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL),
            options=[],
        )

        # ListView para mostrar los datos
        self.listviewprov = ListView(
            expand=True,
            spacing=10,
            padding=padding.only(left=10, right=0, top=10, bottom=10),
            auto_scroll=True,
            #width=600,  # Ajusta la altura según sea necesario
        )

        # Botones con el mismo tamaño
        self.boton_guardar_prov = ElevatedButton(text="GUARDAR", on_click=guardarregistrosnombres, width=200, bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=on_hover_boton_guardar_prov)
        self.boton_editar_prov = ElevatedButton(text="EDITAR", on_click=ModificarProveedores, width=200, bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=on_hover_boton_editar_prov)
        self.boton_eliminar_prov = ElevatedButton(text="ELIMINAR", on_click=EliminarProveedores, width=200, bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=on_hover_boton_eliminar_prov)

        self.selected1_row_index = None
        #self.controls = [boton_proveedoes_actualizar]

        # Agregar todos los componentes a la columna
        dialog_content = Column(
            controls=[
                ft.ResponsiveRow(
                    controls=[
                        Column(controls=[self.texBoxIdProveedores], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                        Column(controls=[self.texBoxNombresApellidos], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                    ],
                    spacing=7,
                ),
                ft.ResponsiveRow(
                    controls=[
                        Column(controls=[self.texBoxCarnetIdentidad], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                        Column(controls=[self.conboBoxDenominacion], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                    ],
                    spacing=7,
                ),
                ft.ResponsiveRow(
                    controls=[
                        Column(controls=[self.boton_guardar_prov], col={"xs": 12, "sm": 6, "md": 4, "lg": 4}, spacing=7),
                        Column(controls=[self.boton_editar_prov], col={"xs": 12, "sm": 6, "md": 4, "lg": 4}, spacing=7),
                        Column(controls=[self.boton_eliminar_prov], col={"xs": 12, "sm": 6, "md": 4, "lg": 4}, spacing=7),
                    ],
                    alignment=ft.MainAxisAlignment.CENTER,
                    spacing=60,
                ),
                self.listviewprov,
            ],
            width=600,
            height=400
        )

        self.dialog = AlertDialog(
            title=Text("REGISTRO DE PROVEEDORES",size=24, weight="bold", text_align="center", color=Colors.TEAL),
            content=dialog_content,
            actions=[
                ElevatedButton(text="Cerrar", on_click=lambda e: self.close_dialog3())
            ],
            actions_alignment=alignment.center,
        )

        self.page.overlay.append(self.dialog)  # Usar Page.overlay.append(dialog) en lugar de self.page.dialog
        self.dialog.open = True
        self.page.update()

        conboBox_Denominacion()
        actualizarListView_prov()

    def close_dialog3(self):
        self.dialog.open = False
        self.page.update()

    

    def show_dialog_actializar_nombres(self,page):
        self.nombres = CRecepcion.obtenerNombres()
        self.dropdownAntiguoNombre = ft.Dropdown(
            label="Antiguo Nombre",
            width=300,
            options=[ft.dropdown.Option(nombre) for nombre in self.nombres],
            border_color="teal",
            border_radius=10,
            border=ft.border.all(5, ft.Colors.TEAL),
        )
        self.texBoxNuevoNombre = ft.TextField(
            label="Nuevo Nombre",
            width=300,
            border_color="teal",
            border_radius=10,
            border=ft.border.all(5, ft.Colors.TEAL),
        )

        self.boton_actualizar = ft.ElevatedButton(
            text="Actualizar Nombres",
            on_click=self.actualizarNombres,
            on_hover=self.on_hover_boton_actualizar,
            width=200,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE
        )
        self.boton_limpiar = ft.ElevatedButton(
            text="Limpiar Campos",
            on_click=self.limpiarCamposnombres,
            on_hover=self.on_hover_boton_limpiar,
            width=200,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE
        )

        dialog_content = ft.Container(
            content=ft.Column([
                
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.dropdownAntiguoNombre], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                        ft.Column(controls=[self.texBoxNuevoNombre], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                    ],
                    spacing=7,
                ),
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.boton_actualizar], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                        ft.Column(controls=[self.boton_limpiar], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                    ],
                    alignment=ft.MainAxisAlignment.CENTER,
                    spacing=60,
                ),
            ]),
            width=600,
            height=100
        )

        self.dialog1 = ft.AlertDialog(
            title=ft.Text("ACTUALIZAR NOMBRES",size=24, weight="bold", text_align="center", color=Colors.TEAL),
            content=dialog_content,
            actions=[
                ft.TextButton("Cerrar", on_click=lambda e: self.close_dialog5())
            ],
            
        )

        self.page.overlay.append(self.dialog1)
        self.dialog1.open = True
        self.page.update()

    def close_dialog5(self):
        self.dialog1.open = False
        self.page.update()

    def actualizarNombres(self, e):
        antiguo_nombre = self.dropdownAntiguoNombre.value
        nuevo_nombre = self.texBoxNuevoNombre.value

        if not antiguo_nombre or not nuevo_nombre:
            if not nuevo_nombre:
                self.texBoxNuevoNombre.border_color = ft.Colors.RED
            self.mostrar_mensaje4(f"Ambos campos son obligatorios", tipo="advertencia")            
            self.page.update()
            return

        resultado = CRecepcion.actualizarNombresApellidos(antiguo_nombre, nuevo_nombre)
        if resultado is True:
            self.mostrar_mensaje4(f"Nombres actualizados correctamente", tipo="éxito")
            self.limpiarCamposnombres()
            self.actualizarDropdown()
        else:
            self.mostrar_mensaje4((resultado), tipo="éxito")

    def limpiarCamposnombres(self, e=None):
        self.dropdownAntiguoNombre.value = None
        self.texBoxNuevoNombre.value = ""
        self.texBoxNuevoNombre.border_color = "teal"
        self.page.update()

    def actualizarDropdown(self):
        self.nombres = CRecepcion.obtenerNombres()
        self.dropdownAntiguoNombre.options = [ft.dropdown.Option(nombre) for nombre in self.nombres]
        self.page.update() 

    def on_hover_boton_actualizar(self, e):
        self.boton_actualizar.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_actualizar.update()

    def on_hover_boton_limpiar(self, e):
        self.boton_limpiar.bgcolor = "orange" if e.data == "true" else "teal"
        self.boton_limpiar.update()

"""def show_dialog(page):
    FrameSeis(page) """

    

class FrameCinco(ft.Control):
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.data_entries = []
        self.selected_index = None
        self.create_ui_elements()
        self.actualizarListView()  # Cargar datos al inicializar

    def create_ui_elements(self):
        # Crear los widgets con tamaños ajustados
        self.texBoxIdLeyes = TextField(label="Id Leyes", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL),disabled=True)
        self.texBoxNumLote1 = TextField(label="Numero Lote", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL),suffix_icon=ft.Icon(name=ft.Icons.SEARCH, color=Colors.TEAL),on_submit=self.buscarLote)
        self.texBoxNombreLaboratorio = TextField(label="Nombre Laboratorio", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxNumCertificado = TextField(label="Num de Certificado", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxLeyesAg = TextField(label="Leyes Ag", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxLeyesPb = TextField(label="Leyes Pb", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxLeyesZn = TextField(label="Leyes Zn", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))
        self.texBoxLeyesH2O = TextField(label="Humedad", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, ft.Colors.TEAL))

        # Títulos de las columnas
        self.column_titles = Row(
            controls=[
                Text("Id Leyes", width=80, weight="bold", size=12),
                Text("Num Lote", width=80, weight="bold", size=12),
                Text("Nombre Laboratorio", width=180, weight="bold", size=12),
                Text("Num Certificado", width=80, weight="bold", size=12),
                Text("Leyes Ag", width=80, weight="bold", size=12),
                Text("Leyes Pb", width=80, weight="bold", size=12),
                Text("Leyes Zn", width=80, weight="bold", size=12),
                Text("Humedad", width=80, weight="bold", size=12),
            ],
            spacing=20,
        )

        # ListView para mostrar los datos
        self.listview = ListView(
            expand=True,
            spacing=10,
            #padding=50,
            padding=padding.only(left=10, right=0, top=10, bottom=10),
            # padding=ft.padding.all(50),
            auto_scroll=True,
        )

        # Botones con el mismo tamaño
        self.boton_guardar_ley = ElevatedButton(text="GUARDAR", on_click=self.guardarregistros, width=200, bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=self.on_hover_boton_guardar_ley)
        self.boton_editar = ElevatedButton(text="EDITAR", on_click=self.ModificarLeyes, width=200, bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=self.on_hover_boton_editar)
        self.boton_eliminar = ElevatedButton(text="ELIMINAR", on_click=self.EliminarLeyes, width=200, bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=self.on_hover_boton_eliminar)

        self.selected_row_index = None

        # Agregar todos los componentes a la columna con scroll
        self.controls = [
            Column(
                controls=[
                    Container(
                        content=Text("REGISTRO DE LEYES", size=24, weight="bold", text_align="center", color=Colors.TEAL),
                        alignment=alignment.center,
                        padding=padding.all(0),
                    ),
                    ResponsiveRow(
                        controls=[
                            Column(controls=[self.texBoxIdLeyes], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            Column(controls=[self.texBoxNumLote1], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            Column(controls=[self.texBoxNombreLaboratorio], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            Column(controls=[self.texBoxNumCertificado], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            Column(controls=[self.texBoxLeyesAg], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            Column(controls=[self.texBoxLeyesPb], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            Column(controls=[self.texBoxLeyesZn], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            Column(controls=[self.texBoxLeyesH2O], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                        ],
                        spacing=7,
                    ),
                    ResponsiveRow(
                        controls=[
                            Column(controls=[self.boton_guardar_ley], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            Column(controls=[self.boton_editar], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                            Column(controls=[self.boton_eliminar], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=7),
                        ],
                        alignment=ft.MainAxisAlignment.CENTER,
                        spacing=60,
                    ),
                    self.column_titles,
                    Column(
                        controls=[self.listview],
                        alignment=alignment.center,
                        scroll=ft.ScrollMode.AUTO,
                        height=300,width=900,  # Ajusta la altura según sea necesario
                    ),
                ],
                scroll=ft.ScrollMode.AUTO,
                height=600,  # Ajusta la altura según sea necesario
            )
        ]

    def on_hover_boton_guardar_ley(self, e):
        self.boton_guardar_ley.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_guardar_ley.update()

    def on_hover_boton_editar(self, e):
        self.boton_editar.bgcolor = "orange" if e.data == "true" else "teal"
        self.boton_editar.update()

    def on_hover_boton_eliminar(self, e):
        self.boton_eliminar.bgcolor = "red" if e.data == "true" else "teal"
        self.boton_eliminar.update()

    def verificar_liquidacion(self, num_lote):
        with CConection.ConexionBasedeDatos() as cone:
            cursor = cone.cursor(prepared=True)
            sql = ("SELECT VNetoBs FROM Liquidacion WHERE NumLote = %s")
            params = (num_lote,)
            cursor.execute(sql, params)
            resultado = cursor.fetchone()
        
        if resultado and resultado[0] is not None:
            self.mostrar_mensaje5(f"El lote '{num_lote} ya está liquidado", tipo="advertencia")
            return False
        else:
            return True

    def verificar_lote_leyes(self, num_lote):
        # Verifica si el número de lote es 0
        if num_lote == 0:
            return True  # No se realiza ninguna acción si el lote es 0

        # Conexión a la base de datos
        with CConection.ConexionBasedeDatos() as cone:
            cursor = cone.cursor(prepared=True)
            sql = ("SELECT NumLote FROM Leyes WHERE NumLote = %s")
            params = (num_lote,)
            cursor.execute(sql, params)
            resultado = cursor.fetchone()
        
        # Verifica si el resultado no es None y está en el rango de 1 a 110000
        if resultado and resultado[0] is not None and 1 <= resultado[0] <= 110000:
            self.mostrar_mensaje5(f"El lote '{num_lote} ya estan Registrado sus Leyes", tipo="advertencia")
            
            self.texBoxIdLeyes.value = ""
            self.texBoxNumLote1.value = ""
            self.texBoxNombreLaboratorio.value = ""
            self.texBoxNumCertificado.value = ""
            self.texBoxLeyesAg.value = ""
            self.texBoxLeyesPb.value = ""
            self.texBoxLeyesZn.value = ""
            self.texBoxLeyesH2O.value = ""
            
            return False
        else:
            return True  # Retorna True si no hay anticipo
    
    def mostrar_mensaje5(self, mensaje, tipo="error"):
        """
        Muestra un mensaje en un SnackBar.
        
        Parámetros:
            mensaje (str): El mensaje a mostrar.
            tipo (str): Tipo de mensaje ("éxito", "error" o "advertencia").
        """
        # Definir el color de fondo según el tipo de mensaje
        if tipo == "éxito":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.GREEN)  # 70% de opacidad
        elif tipo == "advertencia":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.TEAL)   # 70% de opacidad
        else:  # Por defecto, es un error
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.RED)    # 70% de opacidad
        
        # Crear el contenido del SnackBar con bordes redondeados y transparencia
        snack_content = ft.Container(
            content=ft.Text(mensaje, size=18, color=ft.Colors.WHITE),  # Texto del mensaje en blanco
            bgcolor=color_fondo,                              # Color de fondo con transparencia
            border_radius=10,                                 # Bordes redondeados de 10
            padding=10,                                       # Espaciado interno
        )
        
        # Crear el SnackBar
        snack_bar = ft.SnackBar(
            content=snack_content,  # Usar el contenedor con bordes redondeados y transparencia
            open=True,              # Abrir automáticamente
            duration=5000,          # Duración de 5 segundos
            bgcolor=ft.Colors.TRANSPARENT,  # Fondo transparente para el SnackBar
        )
        
        # Agregar el SnackBar a la página y actualizar la UI
        self.page.overlay.append(snack_bar)
        self.page.update()


    def guardarregistros(self, e):

        # Verificar que todos los widgets estén inicializados
        if any(var is None for var in [self.texBoxNumLote1, self.texBoxNombreLaboratorio, self.texBoxNumCertificado, self.texBoxLeyesAg, self.texBoxLeyesPb, self.texBoxLeyesZn, self.texBoxLeyesH2O]):
            self.mostrar_mensaje5("Los widgets no están inicializados", tipo="advertencia")            
            return

        # Obtener valores de los widgets
        values = []
        for widget in [self.texBoxNumLote1, self.texBoxNombreLaboratorio, self.texBoxNumCertificado, self.texBoxLeyesAg, self.texBoxLeyesPb, self.texBoxLeyesZn, self.texBoxLeyesH2O]:
            value = widget.value
            if value is None or value == '':
                self.mostrar_mensaje5(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                return
            values.append(value)

        num_lote = int(self.texBoxNumLote1.value)
        if not self.verificar_liquidacion(num_lote) or not self.verificar_lote_leyes(num_lote):
            return

        try:
            # Insertar valores en la base de datos
            CLeyes.IngresarLeyes(self.page, *values)
            self.actualizarListView()
            self.limpiarCampos()

        except ValueError as e:
            self.mostrar_mensaje5(f"Error: El Lote '{num_lote}' {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje5(f"Error: El Lote '{num_lote}' {e}", tipo="error")

    def actualizarListView(self):
        try:
            # Limpiar la lista
            self.listview.controls.clear()

            # Obtener los nuevos datos
            datos = CLeyes.mostrarLeyes()

            # Insertar los nuevos datos en la lista
            for index, row in enumerate(datos):
                self.listview.controls.append(
                    GestureDetector(
                        content=Container(
                            content=Row(
                                controls=[
                                    Text(row[0], width=80),
                                    Text(row[1], width=80),
                                    Text(row[2], width=180),
                                    Text(row[3], width=100),
                                    Text(row[4], width=100),
                                    Text(row[5], width=100),
                                    Text(row[6], width=100),
                                    Text(row[7], width=100),
                                ],
                                alignment=ft.MainAxisAlignment.START,
                            ),
                            padding=10,
                            border=border.all(1, Colors.TEAL),
                            border_radius=10,
                        ),
                        on_tap=lambda e, row=row, index=index: self.seleccionarRegistro(row, index)
                    )
                )
            self.page.update()
        except ValueError as error:
            print('Error al Actualizar Lista {}'.format(error))

    def seleccionarRegistro(self, row, index):
        try:
            self.selected_row_index = index

            # Establecer los valores en los campos de texto
            self.texBoxIdLeyes.value = row[0]
            self.texBoxNumLote1.value = row[1]
            self.texBoxNombreLaboratorio.value = row[2]
            self.texBoxNumCertificado.value = row[3]
            self.texBoxLeyesAg.value = row[4]
            self.texBoxLeyesPb.value = row[5]
            self.texBoxLeyesZn.value = row[6]
            self.texBoxLeyesH2O.value = row[7]

            # Marcar la fila seleccionada
            for i, control in enumerate(self.listview.controls):
                if i == self.selected_row_index:  # Ajuste del índice
                    control.content.border = border.all(2, Colors.TEAL)
                    for cell in control.content.content.controls:
                        cell.color = Colors.TEAL
                else:
                    control.content.border = border.all(1, Colors.TEAL)
                    for cell in control.content.content.controls:
                        cell.color = Colors.BLACK
            self.page.update()
        except Exception as error:
            print(f'Error al seleccionar Registro {error}')

    def ModificarLeyes(self, e):
        # Verificar si los widgets están inicializados  
        if any(var is None for var in [self.texBoxIdLeyes, self.texBoxNumLote1, self.texBoxNombreLaboratorio, self.texBoxNumCertificado, self.texBoxLeyesAg, self.texBoxLeyesPb, self.texBoxLeyesZn, self.texBoxLeyesH2O]):
            self.mostrar_mensaje5("Los widgets no están inicializados", tipo="advertencia")            
            return

        values = []
        for widget in [self.texBoxIdLeyes, self.texBoxNumLote1, self.texBoxNombreLaboratorio, self.texBoxNumCertificado, self.texBoxLeyesAg, self.texBoxLeyesPb, self.texBoxLeyesZn, self.texBoxLeyesH2O]:
            value = widget.value
            if value is None or value == '':
                self.mostrar_mensaje5(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                return
            values.append(value)

        num_lote = int(self.texBoxNumLote1.value)
        if not self.verificar_liquidacion(num_lote):
            return

        try:
            CLeyes.ModificarLeyes(self.page,*values)
            self.actualizarListView()
            self.limpiarCampos()

        except ValueError as e:
            self.mostrar_mensaje5(f"Error: El Lote '{num_lote}' {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje5(f"Error: El Lote '{num_lote}' {e}", tipo="error")

    def EliminarLeyes(self, e):
        # Verificar si los widgets están inicializados  
        if any(var is None for var in [self.texBoxIdLeyes,self.texBoxNumLote1]):
            self.mostrar_mensaje5("Los widgets no están inicializados", tipo="advertencia")            
            return

        values = []
        for widget in [self.texBoxIdLeyes,self.texBoxNumLote1]:
            value = widget.value
            if not value:
                self.mostrar_mensaje5(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                return
            values.append(value)

        num_lote = int(self.texBoxNumLote1.value)
        if not self.verificar_liquidacion(num_lote):
            return

        try:
            CLeyes.EliminarLeyes(self.page,*values)
            self.actualizarListView()
            self.limpiarCampos()

        except ValueError as e:
            self.mostrar_mensaje5(f"Error de Eliminacion: {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje5(f"Error: No se eliminaron los registros: {e}", tipo="error")

    def buscarLote(self, e,event=None):
        num_lote = self.texBoxNumLote1.value
        if not num_lote:
            self.page.add(SnackBar(Text('Ingrese un número de lote para buscar'), open=True))
            return

        try:
            # Buscar el lote en la base de datos
            resultado = CLeyes.buscarLote(num_lote)
            if resultado:
                self.texBoxIdLeyes.value = resultado[0]
                self.texBoxNumLote1.value = resultado[1]
                self.texBoxNombreLaboratorio.value = resultado[2]
                self.texBoxNumCertificado.value = resultado[3]
                self.texBoxLeyesAg.value = resultado[4]
                self.texBoxLeyesPb.value = resultado[5]
                self.texBoxLeyesZn.value = resultado[6]
                self.texBoxLeyesH2O.value = resultado[7]
                self.page.update()
                self.page.add(ft.SnackBar(ft.Text(f"Numero de Lote Nncontrado"), open=True))
            else:
                self.page.add(SnackBar(Text('No se encontró el lote'), open=True))
        except Exception as e:
            self.page.add(SnackBar(Text(f'Error al buscar el lote: {e}'), open=True))

    def limpiarCampos(self):
        # Lista de widgets
        widgets = [
            self.texBoxIdLeyes, self.texBoxNumLote1, self.texBoxNombreLaboratorio, self.texBoxNumCertificado,
            self.texBoxLeyesAg, self.texBoxLeyesPb, self.texBoxLeyesZn, self.texBoxLeyesH2O
        ]
        
        # Limpiar todos los widgets
        for widget in widgets:
            widget.value = ""
        self.page.update()
"""
ANEXO01
    texBox1=Nombre precio.clientes
    
    texBox2 =
    texBox3 = 
    texBox4 = 
    texBox5 =
    texBox6 = 
    texBox7 = 
    texBox8 = 
    texBox9 = None
    global texBox10
    texBox10 = None
    global texBox11
    texBox11 = None
    global texBox12
    texBox12 = None
    global texBox13
    texBox13 = None
    global texBox14
    texBox14 = None
    global texBox15
    texBox15 = None
    global texBox16
    texBox16 = None
    global texBox17
    texBox17 = None
    global texBox18
    texBox18 = None
    texBox19 = alicuota regalia minera de Ag
    texBox20 = alicuota regalia minera de Pb
    texBox21 = alicuota regalia minera de Zn
    global texBox22
    texBox22 = None
    global texBox23
    texBox23 = None
    global texBox24
    texBox24 = None
    global texBox25
    texBox25 = None
    global texBox26
    texBox26 = None
    global texBox27
    texBox27 = None
    global texBox28
    texBox28 = None
    global texBox29
    texBox29 = None
    global texBox30
    texBox30 = None
    global texBox31
    texBox31 = None
    global texBox32
    texBox32 = None
    global texBox33
    texBox33 = None
    global texBox34
    texBox34 = None

    global texBox90
    texBox90 = None
    global texBox91
    texBox91 = None
    global texBox92
    texBox92 = None
    global texBox93
    texBox93 = None
    global texBox94
    texBox94 = None
    global texBox95
    texBox95 = None
    global texBox96
    texBox96 = None
    global texBox97
    texBox97 = None
    global texBox98
    texBox98 = None
    global texBox99
    texBox99 = 
    global texBox100
    texBox100 = None
    global texBox101
    texBox101 = None
    texBox102 = valor regalia minera Ag
    texBox103 = valor reagalia minera de Pb
    texBox104 = valor regalia minera de Zn
    global texBox105
    texBox105 = None
    global texBox106
    texBox106 = None
    global texBox107
    texBox107 = None
    global texBox108
    texBox108 = None
    global texBox109
    texBox109 = None
    global texBox110
    texBox110 = None
    global texBox111
    texBox111 = None

"""

class FrameSeis(ft.Control):
    def __init__(self, page, username = None):
        super().__init__(page)
        self.page = page
        self.data_entries = []
        self.filtered_entries = []
        self.selected_index = None
        self.username = username  # Propiedad para almacenar el nombre de usuario
        self.create_ui_elements()
        self.cargar_datos_dropdown()
        self.cargar_datos_inicial()

    
    def create_ui_elements(self):
        # Crear los widgets con tamaños ajustados y letras de color blanco
        self.label_leyes_comprador = ft.Container(content=ft.Text(value="LEYES COMPRADOR", size=15,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=300,height=20)
        self.label_leyes_vendedor = ft.Container(content=ft.Text(value="LEYES VENDEDOR", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=130,height=20)
        self.label_leyes_liquidacion = ft.Container(content=ft.Text(value="LEYES LIQUIDACION", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=130,height=20)
        self.label_precio = ft.Container(content=ft.Text(value="PRECIO", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=100,height=20)
        
        self.label_leyes_plata7 = ft.Container(content=ft.Text(value="LEYES PLATA", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_left,width=100,height=20)
        self.texBox24 = ft.TextField(label="", width=130, height=35, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE), on_change=self.calcular_promedio)
        self.texBoxLeyesAg2 = ft.TextField(label="", width=130, height=35, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE), on_change=self.calcular_precios_min)
        self.texBoxLeyesAgLiq = ft.TextField(label="", width=130, height=35, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxVPrecioAg = ft.TextField(label="Punto Ag", width=130, height=35, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxIdLeyes12= ft.TextField(label="12", width=300, height=35, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        
        self.label_leyes_plomo13 = ft.Container(content=ft.Text(value="LEYES PLOMO", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_left,width=100,height=20)
        self.texBox25= ft.TextField(label="", width=130, height=35, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE), on_change=self.calcular_promedio1)
        self.texBoxLeyesPb2= ft.TextField(label="", width=130, height=35, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE), on_change=self.calcular_precios_min)
        self.texBoxLeyesPbLiq= ft.TextField(label="", width=130, height=35, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE),on_change=self.verificar_datos)
        self.texBoxVPrecioPb= ft.TextField(label="Punto Pb", width=130, height=35, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.conboBoxNumLote3 = ft.TextField(label="Lote",text_align=ft.TextAlign.CENTER, width=330, height=35, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE),autofocus=True,suffix=ft.IconButton(icon=ft.Icons.SEARCH,icon_color=Colors.TEAL,on_click=self.buscadorrecepcion,),on_submit=self.buscar)
        
        self.label_leyes_zinc19 = ft.Container(content=ft.Text(value="LEYES ZINC", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_left,width=100,height=20)
        self.texBox26= ft.TextField(label="", width=130, height=35, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE), on_change=self.calcular_promedio1)
        self.texBoxLeyesZn2 = ft.TextField(label="", width=130, height=35, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE), on_change=self.calcular_precios_min)
        self.texBoxLeyesZnLiq = ft.TextField(label="", width=130, height=35, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE),on_change=self.verificar_datos)
        self.texBoxVPrecioZn = ft.TextField(label="Punto Zn", width=130, height=35, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.conboBoxNombreConjunto= ft.Dropdown(label="Conjunto", width=300, text_size=12, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE),options=[])

        self.label_leyes_h2o25 = ft.Container(content=ft.Text(value="LEYES H2O", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_left,width=100,height=20)
        self.texBox27= ft.TextField(label="", width=130, height=35, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE), on_change=self.calcular_promedio1)
        self.texBoxLeyesH2O2= ft.TextField(label="", width=130, height=35, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE), on_change=self.calcular_precios_min)
        self.texBoxLeyesH2OLiq= ft.TextField(label="", width=130, height=35, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox1= ft.TextField(label="N. Precio", width=130, height=35, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(5, ft.Colors.WHITE),on_change=self.verificar_datos)
        self.conboBoxFechaLiq= ft.TextField(label="Fecha Liquidacion", width=330, height=35, value=datetime.today().strftime('%Y-%m-%d'),text_size=15, border_color="teal", border_radius=10,border=ft.border.all(5, ft.Colors.WHITE))
        self.texboxNombreInicial = ft.Dropdown(label="Letra Inicial", width=300, text_size=12, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE),options=[])

        self.texBoxLabVendedor= ft.TextField(label="Laboratorio Vendedor", width=300, height=35, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(5, ft.Colors.WHITE))

        self.radio_group = ft.RadioGroup(
            content=ft.Row(  # Usar ft.Row en lugar de ft.Column
                controls=[
                    ft.Radio(value="1", label="Coop"),
                    ft.Radio(value="2", label="Part"),
                ],
                spacing=5 # Espacio entre los radios
            ),
            value="1"  # Establecer el valor predeterminado
        )

        self.radio_regalias_group = ft.RadioGroup(
            content=ft.Row(
                controls=[
                    ft.Radio(value="1", label="Alicuotas"),
                    ft.Radio(value="2", label="Fijo"),
                ],
                spacing=5  # Espacio entre los radios
            ),
            value="1",  # Establecer el valor predeterminado
            #on_change=self.obcion_regalias_mineras  # Asignar la función al evento on_change
        )
        #contenedor 2

        self.texBox29 = ft.TextField(label="Nombres", width=350, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE),read_only=True)
        self.texBox31 = ft.TextField(label="Cooperativas", width=300, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE),read_only=True)
        self.texBox23 = ft.TextField(label="T/C",text_align=ft.TextAlign.CENTER, width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE),read_only=True)
        self.datos6 = ft.Container(content=ft.Text(value="REGALIA", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_left,width=180,height=20)        
        self.texBoxRetenciones_Regalias = ft.TextField(label="Bs",text_align=ft.TextAlign.RIGHT, width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox7 = ft.TextField(label="%",text_align=ft.TextAlign.RIGHT, width=80, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos9 = ft.Container(content=ft.Text(value="ANTICIPO", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_left,width=220,height=20)        
        self.datos10 = ft.Container(content=ft.Text(value="",text_align=ft.TextAlign.RIGHT, size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=180,height=20)        
        self.texBox28 = ft.TextField(label="Bs",text_align=ft.TextAlign.RIGHT, width=140, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.var_comprobantes = ft.Checkbox(label="cero", value=False)
        
        self.texBox2 = ft.TextField(label="KNB",text_align=ft.TextAlign.RIGHT, width=240, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE),read_only=True)
        #self.datos14 = ft.TextField(label="H2O", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos15 = ft.TextField(label="H2O",text_align=ft.TextAlign.RIGHT, width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE),read_only=True)
        self.texBoxKns= ft.TextField(label="KNS",text_align=ft.TextAlign.RIGHT, width=240, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE),read_only=True)
        #self.datos17 = ft.TextField(label="17", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos18 = ft.Container(content=ft.Text(value="C.N.S.",text_align=ft.TextAlign.RIGHT, size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_left,width=180,height=20)
        
        self.texBoxVCns = ft.TextField(label="Bs",text_align=ft.TextAlign.RIGHT, width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox3 = ft.TextField(label="%",text_align=ft.TextAlign.RIGHT, width=80, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos21 = ft.Container(content=ft.Text(value="ANTICIPO T", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_left,width=220,height=20)
        self.datos22 = ft.Container(content=ft.Text(value="",text_align=ft.TextAlign.RIGHT, size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=180,height=20)        
        self.texBox32 = ft.TextField(label="Bs",text_align=ft.TextAlign.RIGHT, width=180, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE),suffix=ft.IconButton(icon=ft.Icons.SEARCH,icon_color=Colors.TEAL,on_click=self.frame_tres_dialog,),read_only=True)
        self.var_transporte = ft.Checkbox(label="cero", value=False)
        
        self.datos25 = ft.Container(content=ft.Text(value="MINERAL", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_left,width=120,height=20)
        self.datos26 = ft.Container(content=ft.Text(value="LEY", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=120,height=20)
        self.datos27 = ft.Container(content=ft.Text(value="PUNTO", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=120,height=20)
        self.datos28 = ft.Container(content=ft.Text(value="SUS", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=120,height=20)
        self.datos29 = ft.Container(content=ft.Text(value="Bs", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=120,height=20)
        self.datos30 = ft.Container(content=ft.Text(value="COMIBOL", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_left,width=180,height=20)
        self.texBoxVComibol = ft.TextField(label="Bs",text_align=ft.TextAlign.RIGHT, width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox4 = ft.TextField(label="%",text_align=ft.TextAlign.RIGHT, width=80, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos33 = ft.Container(content=ft.Text(value="ANTICIPO A", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_left,width=220,height=20)
        self.datos34 = ft.Container(content=ft.Text(value="",text_align=ft.TextAlign.RIGHT, size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=180,height=20)        
        self.monto_amortizacion = ft.TextField(label="Bs",text_align=ft.TextAlign.RIGHT, width=180, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE),suffix=ft.IconButton(icon=ft.Icons.SEARCH,icon_color=Colors.TEAL,on_click=self.frame_cuatro_dialog),read_only=True)
        self.var_amortizaciones = ft.Checkbox(label="cero", value=False)
        
        self.datos37 = ft.Container(content=ft.Text(value="ZINC", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_left,width=120,height=20)
        self.datos38= ft.TextField(label="", width=120,text_align=ft.TextAlign.RIGHT, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos39 = ft.TextField(label="", width=120,text_align=ft.TextAlign.RIGHT, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox95 = ft.TextField(label="", width=120,text_align=ft.TextAlign.RIGHT, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox98 = ft.TextField(label="", width=120,text_align=ft.TextAlign.RIGHT, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos42 = ft.Container(content=ft.Text(value="FENCOMIN", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_left,width=180,height=20)
        self.texBoxRetenciones_Fencomin = ft.TextField(label="Bs",text_align=ft.TextAlign.RIGHT, width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox5 = ft.TextField(label="%",text_align=ft.TextAlign.RIGHT, width=80, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos45 = ft.Container(content=ft.Text(value="TOTAL (ABC)", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_left,width=220,height=20)
        self.datos46 = ft.Container(content=ft.Text(value="",text_align=ft.TextAlign.RIGHT, size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=180,height=20)        
        self.texBox101 = ft.TextField(label="Bs",text_align=ft.TextAlign.RIGHT, width=180, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos48 = ft.Container(content=ft.Text(value="",text_align=ft.TextAlign.RIGHT, size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=180,height=20)        
        
        self.datos49 = ft.Container(content=ft.Text(value="PLATA", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_left,width=120,height=20)
        self.datos50 = ft.TextField(label="",text_align=ft.TextAlign.RIGHT, width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos51 = ft.TextField(label="",text_align=ft.TextAlign.RIGHT, width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox93= ft.TextField(label="",text_align=ft.TextAlign.RIGHT, width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox96 = ft.TextField(label="",text_align=ft.TextAlign.RIGHT, width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos54 = ft.Container(content=ft.Text(value="FEDECOMIN", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_left,width=180,height=20)
        self.texBoxRetenciones_Fedecomin = ft.TextField(label="Bs",text_align=ft.TextAlign.RIGHT, width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox6 = ft.TextField(label="%",text_align=ft.TextAlign.RIGHT, width=80, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos57 = ft.Container(content=ft.Text(value="BONO TRANSPORTE", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_left,width=220,height=20)
        self.datos58 = ft.Container(content=ft.Text(value="",text_align=ft.TextAlign.RIGHT, size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=180,height=20)
        self.texBox33 = ft.TextField(label="Bs",text_align=ft.TextAlign.RIGHT, width=180, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos60 = ft.Container(content=ft.Text(value="",text_align=ft.TextAlign.RIGHT, size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=180,height=20)        
        
        self.datos61 = ft.Container(content=ft.Text(value="PLOMO", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_left,width=120,height=20)
        self.datos62 = ft.TextField(label="",text_align=ft.TextAlign.RIGHT, width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos63 = ft.TextField(label="",text_align=ft.TextAlign.RIGHT, width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox94 = ft.TextField(label="",text_align=ft.TextAlign.RIGHT, width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox97 = ft.TextField(label="",text_align=ft.TextAlign.RIGHT, width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos66 = ft.Container(content=ft.Text(value="COOPERATIVA", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_left,width=180,height=20)
        self.texBoxRetenciones_Cooperativa = ft.TextField(label="Bs",text_align=ft.TextAlign.RIGHT, width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox8 = ft.TextField(label="%",text_align=ft.TextAlign.RIGHT, width=80, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos69 = ft.Container(content=ft.Text(value="BONO EXTRA", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_left,width=220,height=20)
        self.datos70 = ft.TextField(label="70",text_align=ft.TextAlign.RIGHT, width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox100 = ft.TextField(label="Bs",text_align=ft.TextAlign.RIGHT, width=180, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos72 = ft.Container(content=ft.Text(value="",text_align=ft.TextAlign.RIGHT, size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=180,height=20)        
        
        self.datos73 = ft.Container(content=ft.Text(value="COSTO BRUTO DEL MINERAL (A)", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=480,height=20)        
        self.datos74 = ft.TextField(label="74",text_align=ft.TextAlign.RIGHT, width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos75 = ft.TextField(label="75",text_align=ft.TextAlign.RIGHT, width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos76 = ft.TextField(label="76",text_align=ft.TextAlign.RIGHT, width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxVNetoBs = ft.TextField(label="",text_align=ft.TextAlign.RIGHT, width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos78 = ft.Container(content=ft.Text(value="DESCUENTOS (B)", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_center,width=240,height=20)
        self.datos79 = ft.TextField(label="79", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox110 = ft.TextField(label="Bs",text_align=ft.TextAlign.RIGHT, width=180, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos81 = ft.Container(content=ft.Text(value="LIQUIDO PAGABLE", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.bottom_center,width=180,height=20)
        self.datos82 = ft.Container(content=ft.Text(value="",text_align=ft.TextAlign.RIGHT, size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=180,height=20)
        self.texBoxVTLiquidoPagable1 = ft.TextField(label="Bs",text_align=ft.TextAlign.RIGHT, width=180, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos84 = ft.Container(content=ft.Text(value="",text_align=ft.TextAlign.RIGHT, size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=180,height=20)        
        
        self.datos85 = ft.Container(content=ft.Text(value="", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=180,height=20)        
        self.datos86 = ft.Container(content=ft.Text(value="", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=180,height=20)        
        self.datos87 = ft.Container(content=ft.Text(value="", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=180,height=20)        
        self.datos88 = ft.Container(content=ft.Text(value="", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=180,height=20)        
        self.datos89 = ft.Container(content=ft.Text(value="", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=180,height=20)        
        self.datos90 = ft.Container(content=ft.Text(value="", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=180,height=20)        
        self.datos91 = ft.Container(content=ft.Text(value="", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=180,height=20)        
        self.datos92 = ft.Container(content=ft.Text(value="", size=13,color="teal", weight="bold", italic=True, overflow="ellipsis"),alignment=ft.alignment.center,width=180,height=20)        
        self.texBoxNumLetras = ft.TextField(label="", width=480, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos94 = ft.TextField(label="94", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos95 = ft.TextField(label="95", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.datos96 = ft.TextField(label="96", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
       
        #---------------------- no visibles --------------------------
        
        self.texBoxTPrecioSus = ft.TextField(label="97", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxVTDescuentos = ft.TextField(label="98", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxRetenciones_Comunidad = ft.TextField(label="99", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxRetenciones_Deporte = ft.TextField(label="101", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxRetenciones_Afp = ft.TextField(label="102", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox9 = ft.TextField(label="103", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox10 = ft.TextField(label="104", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox11 = ft.TextField(label="105", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox12 = ft.TextField(label="106", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox13 = ft.TextField(label="107", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox14 = ft.TextField(label="108", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox15 = ft.TextField(label="109", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox16 = ft.TextField(label="110", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox17 = ft.TextField(label="111", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox18 = ft.TextField(label="112", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox19 = ft.TextField(label="113", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox20 = ft.TextField(label="114", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox21 = ft.TextField(label="115", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox22 = ft.TextField(label="116", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox30 = ft.TextField(label="117", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        
        self.texBox90 = ft.TextField(label="118", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox91 = ft.TextField(label="119", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox92 = ft.TextField(label="120", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxTotalRm = ft.TextField(label="121", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox34 = ft.TextField(label="112", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox102 = ft.TextField(label="123", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox103 = ft.TextField(label="124", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox104 = ft.TextField(label="125", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox107 = ft.TextField(label="126", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox108 = ft.TextField(label="127", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox109 = ft.TextField(label="128", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox111 = ft.TextField(label="129", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBox99 = ft.TextField(label="130", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxKMerma = ft.TextField(label="131", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxKnh = ft.TextField(label="132", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxKh2o = ft.TextField(label="133", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxKFinosAg = ft.TextField(label="134", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxKFinosPb = ft.TextField(label="135", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxKFinosZn = ft.TextField(label="136", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxVBrutoAg = ft.TextField(label="137", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxVBrutoPb = ft.TextField(label="138", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxVBrutoZn = ft.TextField(label="139", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxVNetoSus = ft.TextField(label="140", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxVRMAg = ft.TextField(label="141", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxVRMPb = ft.TextField(label="142", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxVRMZn = ft.TextField(label="143", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxVTLiquidoPagable = ft.TextField(label="144", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxVTRetenciones = ft.TextField(label="145", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texBoxVTLiqPag = ft.TextField(label="146", width=120, height=30, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
                
       # Botones con el mismo tamaño
        self.boton_calcular_liq = ft.ElevatedButton(text="CALCULAR", on_click=self.EjecutarBotones,width=200, height=40, bgcolor=ft.Colors.TEAL, color=ft.Colors.WHITE)        
        self.boton_guardar_liq = ft.ElevatedButton(text="GUARDAR", on_click=self.Guardar,width=200, height=40, bgcolor=ft.Colors.TEAL, color=ft.Colors.WHITE)
        self.boton_editar = ft.ElevatedButton(text="EDITAR", on_click=self.editar, width=200, height=40, bgcolor=ft.Colors.TEAL, color=ft.Colors.WHITE)
        self.boton_eliminar = ft.ElevatedButton(text="ELIMINAR",on_click=self.eliminar_liquidacion, width=200, height=40, bgcolor=ft.Colors.TEAL, color=ft.Colors.WHITE)
        self.boton_quemar = ft.ElevatedButton(text="QUEMAR", width=200, height=40, bgcolor=ft.Colors.TEAL, color=ft.Colors.WHITE)
        self.boton_ptrans = ft.ElevatedButton(text="P/P TRANS", width=200, height=40, bgcolor=ft.Colors.TEAL, color=ft.Colors.WHITE)
        self.boton_buscar = ft.ElevatedButton(text="BUSCAR", width=200, height=40, bgcolor=ft.Colors.TEAL, color=ft.Colors.WHITE)
        self.boton_prestamos = ft.ElevatedButton(text="PRESTAMOS", width=200, height=40, bgcolor=ft.Colors.TEAL, color=ft.Colors.WHITE)

        self.selected_row_index = None

        # Contenedor de color teal con inputs de borde blanco
        teal_container = ft.Container(
            
            #bgcolor="#0f386a",
            padding=10,
            content=ft.Column(
                controls=[
                    ft.ResponsiveRow(
                        controls=[
                            ft.Column(controls=[self.label_leyes_comprador], col={"xs": 12, "sm": 6, "md": 4, "lg": 4, "xl": 4},),
                            ft.Column(controls=[self.label_leyes_vendedor], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            ft.Column(controls=[self.label_leyes_liquidacion], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            ft.Column(controls=[self.label_precio], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            ft.Column(controls=[self.radio_group], col={"xs": 12, "sm": 6, "md": 4, "lg": 4, "xl": 2}),
                            #ft.Column(controls=[], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            
                            ft.Column(controls=[self.label_leyes_plata7], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            ft.Column(controls=[self.texBox24], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),                           
                            ft.Column(controls=[self.texBoxLeyesAg2], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            ft.Column(controls=[self.texBoxLeyesAgLiq], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            ft.Column(controls=[self.texBoxVPrecioAg], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            
                            ft.Column(controls=[self.texboxNombreInicial], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            #ft.Column(controls=[self.valor_cero_var_incluir], col={"xs": 12, "sm": 6, "md": 4, "lg": 4, "xl": 1}),

                            ft.Column(controls=[self.label_leyes_plomo13], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            ft.Column(controls=[self.texBox25], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            ft.Column(controls=[self.texBoxLeyesPb2], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            ft.Column(controls=[self.texBoxLeyesPbLiq], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            ft.Column(controls=[self.texBoxVPrecioPb], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            ft.Column(controls=[self.conboBoxNumLote3], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            
                            ft.Column(controls=[self.label_leyes_zinc19], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            ft.Column(controls=[self.texBox26], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            ft.Column(controls=[self.texBoxLeyesZn2], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            ft.Column(controls=[self.texBoxLeyesZnLiq], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),                            
                            ft.Column(controls=[self.texBoxVPrecioZn], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            ft.Column(controls=[self.conboBoxNombreConjunto], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            
                            ft.Column(controls=[self.label_leyes_h2o25], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            ft.Column(controls=[self.texBox27], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            ft.Column(controls=[self.texBoxLeyesH2O2], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            ft.Column(controls=[self.texBoxLeyesH2OLiq], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            ft.Column(controls=[self.texBox1], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            ft.Column(controls=[self.conboBoxFechaLiq], col={"xs": 12, "sm": 6, "md": 4, "lg": 2, "xl": 2}),
                            
                            ft.Column(controls=[self.texBoxLabVendedor], col={"xs": 12, "sm": 6, "md": 4, "lg": 4, "xl": 4}),
                            ft.Column(controls=[self.radio_regalias_group], col={"xs": 12, "sm": 6, "md": 4, "lg": 4, "xl": 2}),

                        ],
                        alignment=ft.MainAxisAlignment.CENTER,
                        
                        spacing=10,
                    ),
                ],
                scroll=ft.ScrollMode.AUTO,
                expand=True  # Ajusta la altura según sea necesario
            ),
            expand=True,
            
            border_radius=10
        )

        white_container = ft.Container(
            #bgcolor=ft.Colors.TEAL,
            padding=5,
            content=ft.Column(
                controls=[
                    ft.ResponsiveRow(
                        controls=[
                            ft.Column(controls=[self.texBox29], col={"xs": 12, "sm": 6, "md": 4, "lg": 9, "xl": 3}, spacing=5),
                            ft.Column(controls=[self.texBox31], col={"xs": 12, "sm": 6, "md": 4, "lg": 6, "xl": 2}, spacing=5),
                            #ft.Column(controls=[self.texBox23], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos6], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBox7], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBoxRetenciones_Regalias], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos9], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBox28], col={"xs": 12, "sm": 6, "md": 4, "lg": 6, "xl": 2}, spacing=5),                            
                            #ft.Column(controls=[self.texBox28], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.var_comprobantes], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            
                            ft.Column(controls=[self.texBox2], col={"xs": 12, "sm": 6, "md": 4, "lg": 6, "xl": 2}, spacing=5),
                            #ft.Column(controls=[self.datos14], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos15], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBoxKns], col={"xs": 12, "sm": 6, "md": 4, "lg": 6, "xl": 2}, spacing=5),
                            #ft.Column(controls=[self.datos17], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos18], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBox3], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBoxVCns], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos21], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBox32], col={"xs": 12, "sm": 6, "md": 4, "lg": 6, "xl": 2}, spacing=5),
                            #ft.Column(controls=[self.texBox32], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.var_transporte], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            
                            ft.Column(controls=[self.datos25], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos26], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos27], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos28], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos29], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos30], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBox4], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBoxVComibol], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos33], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.monto_amortizacion], col={"xs": 12, "sm": 6, "md": 4, "lg": 6, "xl": 2}, spacing=5),
                            #ft.Column(controls=[self.monto_amortizacion], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.var_amortizaciones], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            
                            ft.Column(controls=[self.datos37], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos38], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos39], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBox95], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBox98], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos42], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBox5], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBoxRetenciones_Fencomin], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos45], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBox101], col={"xs": 12, "sm": 6, "md": 4, "lg": 6, "xl": 2}, spacing=5),
                            #ft.Column(controls=[self.texBox101], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos48], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            
                            ft.Column(controls=[self.datos49], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos50], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos51], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBox93], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBox96], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos54], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBox6], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBoxRetenciones_Fedecomin], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos57], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBox33], col={"xs": 12, "sm": 6, "md": 4, "lg": 6, "xl": 2}, spacing=5),
                            #ft.Column(controls=[self.texBox33], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos60], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            
                            ft.Column(controls=[self.datos61], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos62], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos63], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBox94], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBox97], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos66], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBox8], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBoxRetenciones_Cooperativa], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos69], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBox100], col={"xs": 12, "sm": 6, "md": 4, "lg": 6, "xl": 2}, spacing=5),
                            #ft.Column(controls=[self.texBox100], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos72], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            
                            ft.Column(controls=[self.datos73], col={"xs": 12, "sm": 6, "md": 4, "lg": 12, "xl": 4}, spacing=5),
                            ft.Column(controls=[self.texBoxVNetoBs], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos78], col={"xs": 12, "sm": 6, "md": 4, "lg": 6, "xl": 2}, spacing=5),
                            ft.Column(controls=[self.texBox110], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos81], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBoxVTLiquidoPagable1], col={"xs": 12, "sm": 6, "md": 4, "lg": 6, "xl": 2}, spacing=5),
                            #ft.Column(controls=[self.texBoxVTLiquidoPagable1], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos84], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            
                            ft.Column(controls=[self.datos85], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos86], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos87], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos88], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos89], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos90], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos91], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.datos92], col={"xs": 12, "sm": 6, "md": 4, "lg": 3, "xl": 1}, spacing=5),
                            ft.Column(controls=[self.texBoxNumLetras], col={"xs": 12, "sm": 6, "md": 4, "lg": 12, "xl": 4}, spacing=5),
                            
                        ],
                        alignment=ft.MainAxisAlignment.CENTER,
                        spacing=2,
                    ),
                ],
                scroll=ft.ScrollMode.AUTO,
                expand=True  # Ajusta la altura según sea necesario
            ),
            expand=True,
            border_radius=5
        )

        # Contenedor para los botones
        buttons_container = ft.Container(
            content=ft.Column(
                controls=[
                    self.boton_calcular_liq,
                    self.boton_guardar_liq,
                    self.boton_editar,
                    self.boton_eliminar,            
                    #self.boton_prestamos
                ],
                alignment=ft.MainAxisAlignment.START,
                spacing=10,
                expand=True
            ),
            padding=5,
            expand=True,
            border_radius=10
        )

        # Título principal
        self.title_container = ft.Container(
            content=ft.Text(
                value="LIQUIDACION DE MINERALES",
                size=24,
                weight="bold",
                color=ft.Colors.TEAL,
                text_align=ft.TextAlign.CENTER
            ),
            alignment=ft.alignment.center,
            padding=0
        )

        self.scrollable_content = ft.Column(
            controls=[
                ft.Row(
                    controls=[
                        ft.Column(
                            controls=[
                                teal_container
                            ],
                            expand=10
                        ),
                        ft.Column(
                            controls=[
                                buttons_container
                            ],
                            expand=2
                        )
                    ],
                    expand=True
                ),
                ft.Column(
                    controls=[
                        white_container
                    ],
                    expand=1.3
                ),
            ],
            scroll=ft.ScrollMode.AUTO,  # Habilitar scroll
            expand=True
        )

        # Asignar el título y el contenido desplazable a los controles
        self.controls = [
            self.title_container,  # Título fijo
            self.scrollable_content  # Contenido con scroll
        ]

    def copy_text(self, e):
        self.texBox23.value = self.texBox31.value
        self.page.update()  # Actualizar la página para reflejar los cambios

    def mostrar_mensaje6(self, mensaje, tipo="error"):
        """
        Muestra un mensaje en un SnackBar.
        
        Parámetros:
            mensaje (str): El mensaje a mostrar.
            tipo (str): Tipo de mensaje ("éxito", "error" o "advertencia").
        """
        # Definir el color de fondo según el tipo de mensaje
        if tipo == "éxito":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.GREEN)  # 70% de opacidad
        elif tipo == "advertencia":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.TEAL)   # 70% de opacidad
        else:  # Por defecto, es un error
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.RED)    # 70% de opacidad
        
        # Crear el contenido del SnackBar con bordes redondeados y transparencia
        snack_content = ft.Container(
            content=ft.Text(mensaje, size=18, color=ft.Colors.WHITE),  # Texto del mensaje en blanco
            bgcolor=color_fondo,                              # Color de fondo con transparencia
            border_radius=10,                                 # Bordes redondeados de 10
            padding=10,                                       # Espaciado interno
        )
        
        # Crear el SnackBar
        snack_bar = ft.SnackBar(
            content=snack_content,  # Usar el contenedor con bordes redondeados y transparencia
            open=True,              # Abrir automáticamente
            duration=5000,          # Duración de 5 segundos
            bgcolor=ft.Colors.TRANSPARENT,  # Fondo transparente para el SnackBar
        )
        
        # Agregar el SnackBar a la página y actualizar la UI
        self.page.overlay.append(snack_bar)
        self.page.update()

    def verificar_liquidacion_transaccion1(self, num_lote):
        """
        Verifica si un lote está liquidado o no y actualiza su estado en la tabla Recepcion.
        
        Parámetros:
            num_lote (int): El número de lote que se va a verificar.
        
        Retorna:
            bool: True si el lote está liquidado, False si no lo está.
        """
        with CConection.ConexionBasedeDatos() as cnx:
            with cnx.cursor() as cursor:
                # Consulta para verificar si el lote está liquidado
                query_verificar = """
                    SELECT COUNT(*) 
                    FROM Liquidacion 
                    WHERE NumLote = %s AND TPrecioSus IS NOT NULL AND TPrecioSus > 0
                """
                cursor.execute(query_verificar, (num_lote,))
                resultado = cursor.fetchone()

                if resultado[0] > 0:
                    # Si el lote está liquidado, actualizar a "Liquidado"
                    query_actualizar_liquidado = """
                        UPDATE Recepcion 
                        SET Estado = 'Liquidado' 
                        WHERE NumLote = %s
                    """
                    cursor.execute(query_actualizar_liquidado, (num_lote,))
                    print(f"Lote {num_lote} actualizado a 'Liquidado'.")
                    cnx.commit()
                    return True  # El lote está liquidado
                else:
                    # Si el lote no está liquidado, actualizar a "No Liquidado"
                    query_actualizar_no_liquidado = """
                        UPDATE Recepcion 
                        SET Estado = 'No Liquidado' 
                        WHERE NumLote = %s
                    """
                    cursor.execute(query_actualizar_no_liquidado, (num_lote,))
                    print(f"Lote {num_lote} actualizado a 'No Liquidado'.")
                    cnx.commit()
                    return False  # El lote no está liquidado
    
    def guardar_liquidacion(self, e):
        # Verificar que todos los widgets estén inicializados
        if any(var is None for var in [self.conboBoxNumLote3, self.conboBoxNombreConjunto, self.conboBoxFechaLiq, self.texBoxLeyesAgLiq, self.texBoxLeyesPbLiq, self.texBoxLeyesZnLiq, self.texBoxLeyesH2OLiq, self.texBoxKMerma, self.texBoxKnh, self.texBoxKh2o, self.texBoxKns, self.texBoxKFinosAg, self.texBoxKFinosPb, self.texBoxKFinosZn, self.texBoxVBrutoAg, self.texBoxVBrutoPb, self.texBoxVBrutoZn, self.texBoxVPrecioAg, self.texBoxVPrecioPb, self.texBoxVPrecioZn, self.texBoxTPrecioSus, self.texBoxVNetoSus, self.texBoxVNetoBs, self.texBoxVRMAg, self.texBoxVRMPb, self.texBoxVRMZn, self.texBoxVCns, self.texBoxVComibol, self.texBoxRetenciones_Fencomin, self.texBoxRetenciones_Fedecomin, self.texBoxRetenciones_Regalias, self.texBoxRetenciones_Cooperativa, self.texBoxRetenciones_Comunidad, self.texBoxRetenciones_Deporte, self.texBoxRetenciones_Afp, self.texBoxVTDescuentos, self.texBoxVTLiquidoPagable, self.texBoxVTLiquidoPagable1, self.texBoxNumLetras, self.texBoxTotalRm, self.texBoxVTRetenciones, self.texBoxVTLiqPag, self.texBox90, self.texBox91, self.texBox92, self.texBox93, self.texBox94, self.texBox95, self.texBox96, self.texBox97, self.texBox98, self.texBox99, self.texBox100, self.texBox33, self.texBox101, self.texBox102, self.texBox103, self.texBox104, self.texBox110, self.texBox111, self.texBoxLeyesAg2, self.texBoxLeyesPb2, self.texBoxLeyesZn2, self.texBoxLabVendedor, self.texboxNombreInicial]):
            self.mostrar_mensaje6("Los widgets no están inicializados", tipo="advertencia")            
            return

        # Obtener valores de los widgets
        values = []
        for widget in [self.conboBoxNumLote3, self.conboBoxNombreConjunto, self.conboBoxFechaLiq, self.texBoxLeyesAgLiq, self.texBoxLeyesPbLiq, self.texBoxLeyesZnLiq, self.texBoxLeyesH2OLiq, self.texBoxKMerma, self.texBoxKnh, self.texBoxKh2o, self.texBoxKns, self.texBoxKFinosAg, self.texBoxKFinosPb, self.texBoxKFinosZn, self.texBoxVBrutoAg, self.texBoxVBrutoPb, self.texBoxVBrutoZn, self.texBoxVPrecioAg, self.texBoxVPrecioPb, self.texBoxVPrecioZn, self.texBoxTPrecioSus, self.texBoxVNetoSus, self.texBoxVNetoBs, self.texBoxVRMAg, self.texBoxVRMPb, self.texBoxVRMZn, self.texBoxVCns, self.texBoxVComibol, self.texBoxRetenciones_Fencomin, self.texBoxRetenciones_Fedecomin, self.texBoxRetenciones_Regalias, self.texBoxRetenciones_Cooperativa, self.texBoxRetenciones_Comunidad, self.texBoxRetenciones_Deporte, self.texBoxRetenciones_Afp, self.texBoxVTDescuentos, self.texBoxVTLiquidoPagable, self.texBoxVTLiquidoPagable1, self.texBoxNumLetras, self.texBoxTotalRm, self.texBoxVTRetenciones, self.texBoxVTLiqPag, self.texBox90, self.texBox91, self.texBox92, self.texBox93, self.texBox94, self.texBox95, self.texBox96, self.texBox97, self.texBox98, self.texBox99, self.texBox100, self.texBox33, self.texBox101, self.texBox102, self.texBox103, self.texBox104, self.texBox110, self.texBox111, self.texBoxLeyesAg2, self.texBoxLeyesPb2, self.texBoxLeyesZn2, self.texBoxLabVendedor, self.texboxNombreInicial]:
            value = widget.value
            if value is None or value == '':
                self.mostrar_mensaje6(f'El campos {widget.label} no puede estar vacíos', tipo="advertencia")                           
                return
            values.append(value)

        num_lote = int(self.conboBoxNumLote3.value)

        try:
            # Insertar valores en la base de datos
            CLiquidacion.IngresarLiquidacion(self.page, *values)
            self.verificar_liquidacion_transaccion1(num_lote)

            # Limpiar todos los widgets
            self.limpiar_Campos_liquidacion()

        except ValueError as e:
            self.mostrar_mensaje6(f"Error: El Lote '{num_lote}' {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje6(f"Error: El Lote '{num_lote}' {e}", tipo="error")

    
    def modificar_liquidacion(self, e):
        # Verificar si los widgets están inicializados  
        if any(var is None for var in [self.conboBoxNombreConjunto, self.conboBoxFechaLiq,self.texBoxLeyesAgLiq, self.texBoxLeyesPbLiq, self.texBoxLeyesZnLiq,self.texBoxLeyesH2OLiq, self.texBoxKMerma, self.texBoxKnh, self.texBoxKh2o,self.texBoxKns, self.texBoxKFinosAg, self.texBoxKFinosPb, self.texBoxKFinosZn,self.texBoxVBrutoAg, self.texBoxVBrutoPb, self.texBoxVBrutoZn,self.texBoxVPrecioAg, self.texBoxVPrecioPb, self.texBoxVPrecioZn,self.texBoxTPrecioSus, self.texBoxVNetoSus, self.texBoxVNetoBs,self.texBoxVRMAg, self.texBoxVRMPb, self.texBoxVRMZn, self.texBoxVCns,self.texBoxVComibol, self.texBoxRetenciones_Fencomin, self.texBoxRetenciones_Fedecomin,self.texBoxRetenciones_Regalias, self.texBoxRetenciones_Cooperativa,self.texBoxRetenciones_Comunidad, self.texBoxRetenciones_Deporte,self.texBoxRetenciones_Afp, self.texBoxVTDescuentos, self.texBoxVTLiquidoPagable,self.texBoxVTLiquidoPagable1, self.texBoxNumLetras, self.texBoxTotalRm,self.texBoxVTRetenciones, self.texBoxVTLiqPag, self.texBox90, self.texBox91,self.texBox92, self.texBox93, self.texBox94, self.texBox95, self.texBox96,self.texBox97, self.texBox98, self.texBox99, self.texBox100, self.texBox33,self.texBox101, self.texBox102, self.texBox103, self.texBox104, self.texBox110,self.texBox111, self.texBoxLeyesAg2, self.texBoxLeyesPb2, self.texBoxLeyesZn2,self.texBoxLabVendedor, self.texboxNombreInicial,self.conboBoxNumLote3 ]):
            self.mostrar_mensaje6("Los widgets no están inicializados", tipo="advertencia")            
            return

        values = []
        for widget in [self.conboBoxNombreConjunto, self.conboBoxFechaLiq,self.texBoxLeyesAgLiq, self.texBoxLeyesPbLiq, self.texBoxLeyesZnLiq,self.texBoxLeyesH2OLiq, self.texBoxKMerma, self.texBoxKnh, self.texBoxKh2o,self.texBoxKns, self.texBoxKFinosAg, self.texBoxKFinosPb, self.texBoxKFinosZn,self.texBoxVBrutoAg, self.texBoxVBrutoPb, self.texBoxVBrutoZn,self.texBoxVPrecioAg, self.texBoxVPrecioPb, self.texBoxVPrecioZn,self.texBoxTPrecioSus, self.texBoxVNetoSus, self.texBoxVNetoBs,self.texBoxVRMAg, self.texBoxVRMPb, self.texBoxVRMZn, self.texBoxVCns,self.texBoxVComibol, self.texBoxRetenciones_Fencomin, self.texBoxRetenciones_Fedecomin,self.texBoxRetenciones_Regalias, self.texBoxRetenciones_Cooperativa,self.texBoxRetenciones_Comunidad, self.texBoxRetenciones_Deporte,self.texBoxRetenciones_Afp, self.texBoxVTDescuentos, self.texBoxVTLiquidoPagable,self.texBoxVTLiquidoPagable1, self.texBoxNumLetras, self.texBoxTotalRm,self.texBoxVTRetenciones, self.texBoxVTLiqPag, self.texBox90, self.texBox91,self.texBox92, self.texBox93, self.texBox94, self.texBox95, self.texBox96,self.texBox97, self.texBox98, self.texBox99, self.texBox100, self.texBox33,self.texBox101, self.texBox102, self.texBox103, self.texBox104, self.texBox110,self.texBox111, self.texBoxLeyesAg2, self.texBoxLeyesPb2, self.texBoxLeyesZn2,self.texBoxLabVendedor, self.texboxNombreInicial,self.conboBoxNumLote3]:
            value = widget.value
            if value is None or value == '':
                self.mostrar_mensaje6(f'El campos {widget.label} no puede estar vacíos', tipo="advertencia")                           
                return
            values.append(value)
        num_lote = int(self.conboBoxNumLote3.value)
        try:
            CLiquidacion.ModificarLiquidacion(self.page, *values)
            self.limpiar_Campos_liquidacion()

        except ValueError as e:
            self.mostrar_mensaje6(f"Error: El Lote '{num_lote} no se ha Actualizado' {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje6(f"Error: El Lote '{num_lote}' {e}", tipo="error")

    
    def eliminar_liquidacion(self, e):
        # Verificar si los widgets están inicializados
        if any(var is None for var in [self.conboBoxNumLote3]):
            self.mostrar_mensaje6("Los widgets no están inicializados", tipo="advertencia")            
            return

        values = []
        for widget in [self.conboBoxNumLote3]:
            value = widget.value
            if not value:
                self.mostrar_mensaje6(f'Seleccione Un Numero de Lote', tipo="advertencia")                           
                return
            values.append(value)

        # Llamar a la función de confirmación
        
        num_lote = int(self.conboBoxNumLote3.value)

        try:
            CLiquidacion.EliminarLiquidacion(self.page, *values)
            self.verificar_liquidacion_transaccion1(num_lote)
            self.limpiar_Campos_liquidacion()

            self.page.update()

        except ValueError as e:
            self.mostrar_mensaje6(f"Error de Eliminacion: {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje6(f"Error: No se eliminaron los registros: {e}", tipo="error")
    
    def limpiar_Campos_liquidacion(self):
        # Lista de widgets
        widgets = [
             self.texBoxLeyesAgLiq, self.texBoxLeyesPbLiq, self.texBoxLeyesZnLiq,self.texBoxLeyesH2OLiq, self.texBoxKMerma, self.texBoxKnh, self.texBoxKh2o,self.texBoxKns, self.texBoxKFinosAg, self.texBoxKFinosPb, self.texBoxKFinosZn,self.texBoxVBrutoAg, self.texBoxVBrutoPb, self.texBoxVBrutoZn,self.texBoxVPrecioAg, self.texBoxVPrecioPb, self.texBoxVPrecioZn,self.texBoxTPrecioSus, self.texBoxVNetoSus, self.texBoxVNetoBs,self.texBoxVRMAg, self.texBoxVRMPb, self.texBoxVRMZn, self.texBoxVCns,self.texBoxVComibol, self.texBoxRetenciones_Fencomin, self.texBoxRetenciones_Fedecomin,self.texBoxRetenciones_Regalias, self.texBoxRetenciones_Cooperativa,self.texBoxRetenciones_Comunidad, self.texBoxRetenciones_Deporte,self.texBoxRetenciones_Afp, self.texBoxVTDescuentos, self.texBoxVTLiquidoPagable,self.texBoxVTLiquidoPagable1, self.texBoxNumLetras, self.texBoxTotalRm,self.texBoxVTRetenciones, self.texBoxVTLiqPag, self.texBox90, self.texBox91,self.texBox92, self.texBox93, self.texBox94, self.texBox95, self.texBox96,self.texBox97, self.texBox98, self.texBox99, self.texBox100, self.texBox33,self.texBox101, self.texBox102, self.texBox103, self.texBox104, self.texBox110,self.texBox111, self.texBoxLeyesAg2, self.texBoxLeyesPb2, self.texBoxLeyesZn2,self.texBoxLabVendedor,
             self.texBoxTPrecioSus,self.texBoxVTDescuentos,self.texBoxRetenciones_Comunidad,self.texBoxRetenciones_Deporte,self.texBoxRetenciones_Afp,self.texBox3,self.texBox4,self.texBox5,self.texBox6,self.texBox7,self.texBox8,self.texBox9,self.texBox10,self.texBox11,self.texBox12,self.texBox13,self.texBox14,self.texBox15,self.texBox16,self.texBox17,self.texBox18,self.texBox19,self.texBox20,self.texBox21,self.texBox22, self.texBox29,self.texBox90,self.texBox91,self.texBox92,self.texBoxTotalRm,self.texBox34,self.texBox102,self.texBox103,self.texBox104,self.texBox111,self.texBox99,self.texBoxKMerma,self.texBoxKnh,self.texBoxKh2o,self.texBoxKFinosAg,self.texBoxKFinosPb,self.texBoxKFinosZn,self.texBoxVBrutoAg,self.texBoxVBrutoPb,self.texBoxVBrutoZn,self.texBoxVNetoSus,self.texBoxVRMAg,self.texBoxVRMPb,self.texBoxVRMZn,self.texBoxVTLiquidoPagable,self.texBoxVTRetenciones,self.texBoxVTLiqPag  ]
        
        # Limpiar todos los widgets
        for widget in widgets:
            widget.value = ""
        self.page.update()    


    def cargar_datos_dropdown(self):
        # Obtener los datos de la base de datos
        nombres_conjuntos = CLiquidacion.conboBox_NombreConjunto()  # Llamada al método estático

        # Verificar si hay datos
        if nombres_conjuntos:
            # Crear las opciones del Dropdown
            opciones = [ft.dropdown.Option(nombre) for nombre in nombres_conjuntos]

            # Asignar las opciones al Dropdown
            self.conboBoxNombreConjunto.options = opciones

            # Seleccionar el último conjunto (el primero en la lista ordenada DESC)
            self.conboBoxNombreConjunto.value = nombres_conjuntos[0]

        # Actualizar la página para reflejar los cambios
        self.page.update()

    def cargar_datos_inicial(self):
        # Obtener los datos de la base de datos
        nombre_inicial = CLiquidacion.conboBox_NombreInicial()  # Llamada al método estático

        # Verificar si hay datos
        if nombre_inicial:
            # Crear las opciones del Dropdown
            opciones_inicial = [ft.dropdown.Option(nombre) for nombre in nombre_inicial]

            # Asignar las opciones al Dropdown
            self.texboxNombreInicial.options = opciones_inicial

            # Seleccionar el último conjunto (el primero en la lista ordenada DESC)
            self.texboxNombreInicial.value = nombre_inicial[0]

        # Actualizar la página para reflejar los cambios
        self.page.update()    
    

    def buscarNumeroLote(self,e):
        num_lote = self.conboBoxNumLote3.value

        # Obtener el estado de los checkboxes (simulados con Flet)
        descuentos = {
            "transporte": self.var_transporte.value,
            "comprobante": self.var_comprobantes.value,
            "amortizaciones": self.var_amortizaciones.value
    }

        # Construir la consulta SQL dinámicamente
        select_clause = """
            SELECT 
                Recepcion.NumLote, 
                ROUND(Recepcion.Peso, 0), 
                CNS, 
                Comibol, 
                Fencomin, 
                Fedecomin, 
                Regalias, 
                Cooperativa, 
                Comunidad, 
                Deporte, 
                AFP, 
                Cotizaciones.Fecha, 
                CotDiaAg, 
                CotQuincenalAg, 
                CotDiaPb, 
                CotQuincenalPb, 
                CotDiaZn, 
                CotQuincenalZn, 
                AlicuotaRMAg, 
                AlicuotaRMPb, 
                AlicuotaRMZn, 
                TCSusSem, 
                TCSusDia, 
                LeyesAg, 
                LeyesPb, 
                LeyesZn, 
                LeyesH2O, 
                Proveedores.NombresApellidos, 
                Recepcion.Procedencia, 
                Recepcion.Denominacion, 
                Clientes.Precio, 
                Clientes.municipio
        """

        if descuentos["comprobante"]:
            select_clause += ", 0 AS TotalAnticipo"
        else:
            select_clause += ", SUM(COALESCE(Comprobantes.egreso, 0)) AS TotalAnticipo"

        if descuentos["transporte"]:
            select_clause += ", 0 AS AnticipoTransporte"
        else:
            select_clause += ", COALESCE(transporte.Anticipo1, 0) AS AnticipoTransporte"

        if descuentos["amortizaciones"]:
            select_clause += ", 0 AS AnticipoAmortizaciones"
        else:
            select_clause += ", COALESCE(amortizaciones.monto, 0) AS AnticipoAmortizaciones"

        from_clause = """
            FROM 
                Recepcion 
            LEFT JOIN  
                Proveedores ON Proveedores.NombresApellidos = Recepcion.NombresApellidos 
            INNER JOIN 
                Clientes ON Recepcion.Denominacion = Clientes.Denominacion 
            INNER JOIN 
                Cotizaciones ON Cotizaciones.Fecha = Recepcion.Fecha 
            INNER JOIN 
                Leyes ON Leyes.NumLote = Recepcion.NumLote 
        """

        if not descuentos["comprobante"]:
            from_clause += " LEFT JOIN Comprobantes ON Comprobantes.NumLote = Recepcion.NumLote"
        if not descuentos["transporte"]:
            from_clause += " LEFT JOIN transporte ON transporte.NumLote = Recepcion.NumLote"
        if not descuentos["amortizaciones"]:
            from_clause += " LEFT JOIN amortizaciones ON amortizaciones.NumLote = Recepcion.NumLote"

        where_clause = " WHERE Recepcion.NumLote = %s"
        sql = select_clause + from_clause + where_clause

        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    cursor.execute(sql, (num_lote,))
                    miResultado = cursor.fetchone()

                    if miResultado:
                        # Actualizar los campos
                        campos = [
                            self.conboBoxNumLote3, self.texBox2, self.texBox3, self.texBox4, self.texBox5, self.texBox6, self.texBox7, self.texBox8,
                            self.texBox9, self.texBox10, self.texBox11, self.texBox12, self.texBox13, self.texBox14, self.texBox15, self.texBox16,
                            self.texBox17, self.texBox18, self.texBox19, self.texBox20, self.texBox21, self.texBox22, self.texBox23, self.texBox24,
                            self.texBox25, self.texBox26, self.texBox27, self.texBox29, self.texBox30, self.texBox31, self.texBox1,
                            self.texBox34, self.texBox28, self.texBox32, self.monto_amortizacion
                        ]

                        for i, campo in enumerate(campos):
                            campo.value = miResultado[i]

                    else:
                        self.mostrar_mensaje6("El Lote NO Tiene Leyes", tipo="advertencia")            

        except Error as e:
            self.mostrar_mensaje6(f"Error de Busqueda: {str(e)}", tipo="error")
        except Exception as ex:
            self.mostrar_mensaje6(f"Error: {str(ex)}", tipo="error")

    def buscarNumeroLote3(self,e):
        num_lote = self.conboBoxNumLote3.value

        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    sql = """
                        SELECT 
                            Liquidacion.NumLote,
                            NombreConjunto, 
                            FechaLiq, 
                            LeyesAgLiq, 
                            LeyesPbLiq, 
                            LeyesZnLiq, 
                            LeyesH2OLiq, 
                            KMerma, 
                            Knh, 
                            Kh2o, 
                            ROUND((Kns),3),
                            KFinosAg, 
                            KFinosPb, 
                            KFinosZn, 
                            VBrutoAg, 
                            VBrutoPb, 
                            VbrutoZn, 
                            VPrecioAg, 
                            VPrecioPb, 
                            VPrecioZn, 
                            TPrecioSus, 
                            VNetoSus, 
                            VNetoBs, 
                            VRMAg, 
                            VRMPb, 
                            VRMZn, 
                            VCns, 
                            VComibol, 
                            Retenciones_Fencomin, 
                            Retenciones_Fedecomin, 
                            Retenciones_Regalias, 
                            Retenciones_Cooperativa, 
                            Retenciones_Comunidad, 
                            Retenciones_Deporte, 
                            Retenciones_Afp, 
                            VTDescuentos, 
                            VTLiquidoPagable, 
                            VTLiquidoPagable1, 
                            NumLetras, 
                            TotalRm,
                            VTRetenciones,
                            VTLiqPag,
                            VPrecioAgSusTon,
                            VPrecioPbSusTon,
                            VPrecioZnSusTon,
                            VPrecioAgSus,
                            VPrecioPbSus,
                            VPrecioZnSus,
                            VPrecioAgBs,
                            VPrecioPbBs,
                            VPrecioZnBs,
                            TotalRmNeto,
                            BonoExtra,
                            BonoTransporte,
                            Totalabc,
                            VRMAgNeto,
                            VRMPbNeto,
                            VRMZnNeto,
                            TotalDescuentosLey,
                            TotalImporteFinal,
                            leyesAgVen,
                            LeyesPbVen,
                            LeyesZnVen,
                            LabVen,
                            NombreInicial
                        FROM 
                            Liquidacion 
                        WHERE 
                            Liquidacion.NumLote = %s
                    """

                    cursor.execute(sql, (num_lote,))
                    miResultado = cursor.fetchone()

                    if miResultado:
                        # Rellenar los campos
                        campos = [
                            self.conboBoxNumLote3, self.conboBoxNombreConjunto, self.conboBoxFechaLiq,
                            self.texBoxLeyesAgLiq, self.texBoxLeyesPbLiq, self.texBoxLeyesZnLiq,
                            self.texBoxLeyesH2OLiq, self.texBoxKMerma, self.texBoxKnh, self.texBoxKh2o,
                            self.texBoxKns, self.texBoxKFinosAg, self.texBoxKFinosPb, self.texBoxKFinosZn,
                            self.texBoxVBrutoAg, self.texBoxVBrutoPb, self.texBoxVBrutoZn, self.texBoxVPrecioAg,
                            self.texBoxVPrecioPb, self.texBoxVPrecioZn, self.texBoxTPrecioSus, self.texBoxVNetoSus,
                            self.texBoxVNetoBs, self.texBoxVRMAg, self.texBoxVRMPb, self.texBoxVRMZn, self.texBoxVCns,
                            self.texBoxVComibol, self.texBoxRetenciones_Fencomin, self.texBoxRetenciones_Fedecomin,
                            self.texBoxRetenciones_Regalias, self.texBoxRetenciones_Cooperativa,
                            self.texBoxRetenciones_Comunidad, self.texBoxRetenciones_Deporte, self.texBoxRetenciones_Afp,
                            self.texBoxVTDescuentos, self.texBoxVTLiquidoPagable, self.texBoxVTLiquidoPagable1,
                            self.texBoxNumLetras, self.texBoxTotalRm, self.texBoxVTRetenciones, self.texBoxVTLiqPag,
                            self.texBox90, self.texBox91, self.texBox92, self.texBox93, self.texBox94, self.texBox95,
                            self.texBox96, self.texBox97, self.texBox98, self.texBox99, self.texBox100, self.texBox33,
                            self.texBox101, self.texBox102, self.texBox103, self.texBox104, self.texBox110, self.texBox111,
                            self.texBoxLeyesAg2, self.texBoxLeyesPb2, self.texBoxLeyesZn2, self.texBoxLabVendedor, self.texboxNombreInicial
                        ]

                        for i, campo in enumerate(campos):
                            campo.value = miResultado[i]

                        # Crear el diálogo de confirmación
                        self.mostrar_mensaje6(f" Lote Liquidado, Puedes Editar el lote '{num_lote}' ", tipo="éxito")

                    else:
                        self.mostrar_mensaje6(f"El lote: '{num_lote}' NO esta Liquidado introduce las leyes", tipo="éxito")


        except Error as e:
            self.mostrar_mensaje6(f"Error de Busqueda 1: {str(e)}", tipo="error")
        except Exception as ex:
            self.mostrar_mensaje6(f"Error 1: {str(ex)}", tipo="error")

            
    def calcular_promedio(self):
        """Calcula los promedios según la lógica anterior."""
        try:
            # Obtener los valores de los campos de entrada
            valores = [
                Decimal(self.texBox24.value or 0),  # Si está vacío, se considera 0
                Decimal(self.texBoxLeyesAg2.value or 0 ),
                Decimal(self.texBox25.value or 0),
                Decimal(self.texBoxLeyesPb2.value or 0),
                Decimal(self.texBox26.value or 0),
                Decimal(self.texBoxLeyesZn2.value or 0),
                Decimal(self.texBox27.value or 0),
                Decimal(self.texBoxLeyesH2O2.value or 0),
            ]
        except InvalidOperation as e:
            self.mostrar_mensaje6(f"Error de Actualizacion '{e}'", tipo="error")            
            return

        # Reemplazar ceros con el otro valor
        if valores[1] == 0:
            valores[1] = valores[0]
        if valores[3] == 0:
            valores[3] = valores[2]
        if valores[5] == 0:
            valores[5] = valores[4]
        if valores[7] == 0:
            valores[7] = valores[6]

        # Calcular promedios
        promedios = [
            (valores[0] + valores[1]) / 2,  # Promedio Ag
            (valores[2] + valores[3]) / 2,  # Promedio Pb
            (valores[4] + valores[5]) / 2,  # Promedio Zn
            (valores[6] + valores[7]) / 2,  # Promedio H2O
        ]

        # Actualizar campos de salida
        self.texBoxLeyesAgLiq.value = f"{promedios[0]:.2f}"
        self.texBoxLeyesPbLiq.value = f"{promedios[1]:.2f}"
        self.texBoxLeyesZnLiq.value = f"{promedios[2]:.2f}"
        self.texBoxLeyesH2OLiq.value = f"{promedios[3]:.2f}"

        # Actualizar la página
        self.page.update()

    def calcular_promedio1(self, event):
        """Verifica si los campos están llenos y llama a calcular_promedio."""
        if ([
            self.texBoxLeyesAg2.value,
            self.texBoxLeyesPb2.value,
            self.texBoxLeyesZn2.value,
            self.texBoxLeyesH2O2.value,
        ]):
            self.calcular_promedio()

    def kilos_merma(self):
        """Calcula los kilos de merma."""
        try:
            num1 = Decimal(0)
            num2 = Decimal(self.texBox2.value)
            avg1 = (num1 * num2) / 100
            self.texBoxKMerma.value = f"{avg1:.5f}"
            self.texBoxKnh.value = f"{num2 - avg1:.5f}"
            self.page.update()
        except InvalidOperation as e:
            self.mostrar_mensaje6(f"Error en Filos Merma: '{e}'", tipo="error")            

    def kilos_netos_secos(self):
        """Calcula los kilos netos secos."""
        try:
            num1 = Decimal(self.texBoxLeyesH2OLiq.value)
            num2 = Decimal(self.texBoxKnh.value)
            avg1 = (num1 * num2) / 100
            self.texBoxKh2o.value = f"{avg1:.5f}"
            self.texBoxKns.value = f"{num2 - avg1:.5f}"
            self.page.update()
        except InvalidOperation as e:
            self.mostrar_mensaje6(f"Error en Kilos Netos Secos '{e}'", tipo="error")            

    def kilos_finos(self):
        """Calcula los kilos finos."""
        try:
            num1 = Decimal(self.texBoxKns.value)
            num2 = Decimal(self.texBoxLeyesAgLiq.value)
            num3 = Decimal(self.texBoxLeyesPbLiq.value)
            num4 = Decimal(self.texBoxLeyesZnLiq.value)
            avg1 = (num1 * num2) / 10000
            avg2 = (num1 * num3) / 100
            avg3 = (num1 * num4) / 100
            self.texBoxKFinosAg.value = f"{avg1:.5f}"
            self.texBoxKFinosPb.value = f"{avg2:.5f}"
            self.texBoxKFinosZn.value = f"{avg3:.5f}"
            self.page.update()
        except InvalidOperation as e:
            self.mostrar_mensaje6(f"Error en Kilos Finos '{e}'", tipo="error")            

    def valor_bruto(self):
        """Calcula el valor bruto."""
        try:
            num1 = Decimal(self.texBoxKns.value)
            num2 = Decimal(self.texBoxLeyesAgLiq.value)
            num3 = Decimal(self.texBoxKFinosPb.value)
            num4 = Decimal(self.texBoxKFinosZn.value)
            num5 = Decimal(self.texBox13.value)
            num6 = Decimal(self.texBox15.value)
            num7 = Decimal(self.texBox17.value)
            num8 = Decimal(self.texBox22.value)
            avg1 = ((num2 * 100 / Decimal('31.1035')) * num1 / Decimal('1000')) * num5 * num8
            avg2 = (num3 * Decimal('2.2046223')) * num6 * num8
            avg3 = (num4 * Decimal('2.2046223')) * num7 * num8
            self.texBoxVBrutoAg.value = f"{avg1:.2f}"
            self.texBoxVBrutoPb.value = f"{avg2:.2f}"
            self.texBoxVBrutoZn.value = f"{avg3:.2f}"
            self.page.update()
        except InvalidOperation as e:
            self.mostrar_mensaje6(f"Error en Valor Bruto '{e}'", tipo="error")            

    def get_price(self, numero, tabla):
        """Obtiene el precio desde la base de datos."""
        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    if isinstance(numero, float):
                        numero = int(numero)
                    cursor.execute(f"SELECT precio1 FROM {tabla} WHERE number = %s", (numero,))
                    result = cursor.fetchone()
                    return result[0] if result else 0
        except Exception as e:
            self.mostrar_mensaje6(f"Error  al Obtener Precio '{e}'", tipo="advertencia")                     

    def get_price1(self, numero1, tabla):
        """Obtiene el precio desde la base de datos."""
        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    if isinstance(numero1, float):
                        numero1 = int(numero1)
                    cursor.execute(f"SELECT precio2 FROM {tabla} WHERE number = %s", (numero1,))
                    result = cursor.fetchone()
                    return result[0] if result else 0
        except Exception as e:
            self.mostrar_mensaje6(f"Error  al Obtener Precio '{e}'", tipo="advertencia")                     
            

    def get_price2(self, numero2, tabla):
        """Obtiene el precio desde la base de datos."""
        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    if isinstance(numero2, float):
                        numero2 = int(numero2)
                    cursor.execute(f"""
                                   SELECT precio3 FROM {tabla} WHERE number = %s
                                   """, (numero2,))
                    
                    result = cursor.fetchone()
                    return result[0] if result else 0
        except Exception as e:
            self.mostrar_mensaje6(f"Error  al Obtener Precio '{e}'", tipo="advertencia")                     
        

    def calculate(self):
        """Calcula los precios. Si no encuentra el precio, lo establece a cero."""
        try:
            numero1 = float(self.texBoxLeyesAgLiq.value)
            numero2 = float(self.texBoxLeyesPbLiq.value)
            numero3 = float(self.texBoxLeyesZnLiq.value)
            tabla = self.texBox1.value
            
            # Obtener precios con manejo de cero
            precio1 = self.get_price(numero1, tabla) if self.get_price(numero1, tabla) is not None else 0
            precio2 = self.get_price1(numero2, tabla) if self.get_price1(numero2, tabla) is not None else 0
            precio3 = self.get_price2(numero3, tabla) if self.get_price2(numero3, tabla) is not None else 0
            
            # Asignar valores, incluyendo cero si no se encontró precio
            self.texBoxVPrecioAg.value = f"{precio1}"
            self.texBoxVPrecioPb.value = f"{precio2}"
            self.texBoxVPrecioZn.value = f"{precio3}"
            
            self.page.update()
        except ValueError:
            self.mostrar_mensaje6("Por favor ingrese valores numéricos válidos", tipo="advertencia")
        except Exception as e:
            self.mostrar_mensaje6(f"Error en Calculate '{e}'", tipo="advertencia")
            
    def verificar_datos(self, event):
        """Verifica si los campos están llenos y llama a calcular_promedio."""
        if ([
            self.texBoxLeyesAgLiq.value,
            self.texBoxLeyesPbLiq.value,
            self.texBoxLeyesZnLiq.value,
            self.texBox1.value,
        ]):
            self.calculate()

    def total_precio(self):
        """Calcula el total del precio."""
        try:
            num1 = Decimal(self.texBoxVPrecioAg.value)
            num2 = Decimal(self.texBoxVPrecioPb.value)
            num3 = Decimal(self.texBoxVPrecioZn.value)
            num4 = Decimal(self.texBoxLeyesAgLiq.value)
            num5 = Decimal(self.texBoxLeyesPbLiq.value)
            num6 = Decimal(self.texBoxLeyesZnLiq.value)
            avg1 = (num1 * num4) + (num2 * num5) + (num3 * num6)
            avg2 = (num1 * num4)
            avg3 = (num2 * num5)
            avg4 = (num3 * num6)
            self.texBoxTPrecioSus.value = f"{avg1:.2f}"
            self.texBox90.value = f"{avg2:.2f}"
            self.texBox91.value = f"{avg3:.2f}"
            self.texBox92.value = f"{avg4:.2f}"
            self.page.update()
        except InvalidOperation as e:
            self.mostrar_mensaje6(f"Error en Total Precio '{e}'", tipo="error")                     

    def calcular_precios_min(self, event):
        """Función intermedia que llama a ambas funciones."""
        self.calcular_promedio1(event)
        self.verificar_datos(event)

    def PrecioSus(self):
        num7 = Decimal(self.texBoxKns.value)
        num8 = Decimal(self.texBoxTPrecioSus.value)
        num9 = Decimal(self.texBox90.value)
        num10 = Decimal(self.texBox91.value)
        num11 = Decimal(self.texBox92.value)
        
        avg2 = (num7 / Decimal('1000')) * num8
        avg3 = (num7 / Decimal('1000')) * num9
        avg4 = (num7 / Decimal('1000')) * num10
        avg5 = (num7 / Decimal('1000')) * num11

        self.texBoxVNetoSus.value = f"{avg2:.2f}"
        self.texBox93.value = f"{avg3:.2f}"
        self.texBox94.value = f"{avg4:.2f}"
        self.texBox95.value = f"{avg5:.2f}"
        self.page.update()

    def PrecioBS(self):
        num1 = Decimal(self.texBoxVNetoSus.value)
        num2 = Decimal(self.texBox23.value)  # t/c

        num3 = Decimal(self.texBox93.value)  # sus Ag
        num4 = Decimal(self.texBox94.value)  # sus pb
        num5 = Decimal(self.texBox95.value)  # sus zn
        
        avg1 = (num1 * num2)
        avg2 = (num3 * num2)
        avg3 = (num4 * num2)
        avg4 = (num5 * num2)
        
        self.texBox96.value = f"{avg2:.2f}"
        self.texBox97.value = f"{avg3:.2f}"
        self.texBox98.value = f"{avg4:.2f}"
        #self.texBox100.value = f"{avg3:.2f}"
        self.page.update()

    def valor_neto_bs(self):
        num1 = Decimal(self.texBox96.value)  # Bs Ag
        num2 = Decimal(self.texBox97.value)  # Bs pb
        num3 = Decimal(self.texBox98.value)  # Bs zn

        avg1 = (num1 + num2 + num3)

        self.texBoxVNetoBs.value = f"{avg1:.2f}"
        self.page.update()

    def Precio(self):
        num1 = Decimal(self.texBoxVBrutoAg.value)
        num2 = Decimal(self.texBoxVBrutoPb.value)
        num3 = Decimal(self.texBoxVBrutoZn.value)
        num4 = Decimal(self.texBox19.value)
        num5 = Decimal(self.texBox20.value)
        num6 = Decimal(self.texBox21.value)
        
        avg1 = (num1 * num4) / 100 
        avg2 = (num2 * num5) / 100 
        avg3 = (num3 * num6) / 100 
        
        self.texBoxVRMAg.value = f"{avg1:.2f}"
        self.texBoxVRMPb.value = f"{avg2:.2f}"
        self.texBoxVRMZn.value = f"{avg3:.2f}"
        self.page.update()                

    def regalias_potosi_alicuotas(self):
        """Calcula las regalías utilizando alícuotas, solo si las leyes son mayores que cero."""
        try:
            num1 = Decimal(self.texBoxVNetoBs.value or 0)  # Valor neto en Bs

            # Obtener los valores de las leyes
            ley_ag = Decimal(self.texBoxLeyesAgLiq.value or 0)  # Ley de Ag
            ley_pb = Decimal(self.texBoxLeyesPbLiq.value or 0)  # Ley de Pb
            ley_zn = Decimal(self.texBoxLeyesZnLiq.value or 0)  # Ley de Zn

            # Inicializar los resultados
            avg11 = Decimal(0)  # Resultado para Ag
            avg12 = Decimal(0)  # Resultado para Pb
            avg13 = Decimal(0)  # Resultado para Zn

            # Calcular avg11 solo si la ley de Ag es mayor que cero
            if ley_ag > 0:
                num12 = Decimal(self.texBox19.value or 0)  # Regalia Ag
                avg11 = (num1 * num12) / 100

            # Calcular avg12 solo si la ley de Pb es mayor que cero
            if ley_pb > 0:
                num13 = Decimal(self.texBox20.value or 0)  # Regalia Pb
                avg12 = (num1 * num13) / 100

            # Calcular avg13 solo si la ley de Zn es mayor que cero
            if ley_zn > 0:
                num14 = Decimal(self.texBox21.value or 0)  # Regalia Zn
                avg13 = (num1 * num14) / 100

            # Asignar los resultados a los campos correspondientes
            self.texBox102.value = f"{avg11:.2f}"  # Resultado para Ag
            self.texBox103.value = f"{avg12:.2f}"  # Resultado para Pb
            self.texBox104.value = f"{avg13:.2f}"  # Resultado para Zn

            # Actualizar la página para reflejar los cambios
            self.page.update()
        except Exception as e:
            self.mostrar_mensaje6(f"Error en regalias_potosi_alicuotas: {e}", tipo="error")

    def Regalias_Neto(self):
        """Calcula el total de regalías."""
        try:
            num18 = Decimal(self.texBox102.value)
            num19 = Decimal(self.texBox103.value)
            num20 = Decimal(self.texBox104.value)

            avg14 = (num18 + num19 + num20)

            self.texBoxRetenciones_Regalias.value = f"{avg14:.2f}"
            self.page.update()

        except Exception as e:
            self.mostrar_mensaje6(f"Error en Regalias_Neto: {e}", tipo="error")

    def sumar_regalias_potosi(self):
        """Ejecuta los cálculos de regalías con alícuotas."""
        self.regalias_potosi_alicuotas()
        self.Regalias_Neto()

    def regalias_potosi_fijo(self):
        """Calcula las regalías utilizando un valor fijo."""
        try:
            self.texBox102.value = "0.00"
            self.texBox103.value = "0.00"
            self.texBox104.value = "0.00"
            self.page.update()
            num1 = Decimal(self.texBoxVNetoBs.value)
            num6 = Decimal(self.texBox7.value)  # Regalias Neto

            avg5 = (num1 * num6) / 100

            self.texBoxRetenciones_Regalias.value = f"{avg5:.2f}"
            self.page.update()
        except Exception as e:
            self.mostrar_mensaje6(f"Error en regalias_potosi_fijo: {e}", tipo="error")

    def obcion_regalias_mineras(self, e):
        """Ejecuta la función correspondiente según la opción seleccionada en el RadioGroup."""
        try:
            radio_regalias_value = self.radio_regalias_group.value  # Obtener el valor seleccionado en el RadioGroup

            if radio_regalias_value == "1":  # Alicuotas
                self.sumar_regalias_potosi()
            elif radio_regalias_value == "2":  # Fijo
                self.regalias_potosi_fijo()
        except Exception as e:
            self.mostrar_mensaje6(f"Error en obcion_regalias_mineras: {e}", tipo="error")

    def Retenciones(self):
        try:
            num1 = Decimal(self.texBoxVNetoBs.value or 0)  # Si es vacío, usa 0
            num2 = Decimal(self.texBox3.value or 0)  # CNS
            num3 = Decimal(self.texBox4.value or 0)  # Comibol
            num4 = Decimal(self.texBox5.value or 0)  # Fencomin
            num5 = Decimal(self.texBox6.value or 0)  # Fedecomin
            num7 = Decimal(self.texBox8.value or 0)  # Cooperativa
            num8 = Decimal(self.texBox9.value or 0)  # Comunidad
            num9 = Decimal(self.texBox10.value or 0)  # Deporte
            num10 = Decimal(self.texBox11.value or 0)  # AFP
            num11 = Decimal(0)

            avg1 = (num1 * num2) / 100
            avg2 = (num1 * num3) / 100
            avg3 = (num1 * num4) / 100
            avg4 = (num1 * num5) / 100
            avg6 = (num1 * num7) / 100
            avg7 = (num1 * num8) / 100
            avg8 = (num1 * num9) / 100
            avg9 = (num1 * num10) / 100
            avg10 = (num1 * num11) / 100

            self.texBox99.value = f"{avg10:.2f}"
            self.texBoxVCns.value = f"{avg1:.2f}"
            self.texBoxVComibol.value = f"{avg2:.2f}"
            self.texBoxRetenciones_Fencomin.value = f"{avg3:.2f}"
            self.texBoxRetenciones_Fedecomin.value = f"{avg4:.2f}"
            self.texBoxRetenciones_Cooperativa.value = f"{avg6:.2f}"
            self.texBoxRetenciones_Comunidad.value = f"{avg7:.2f}"
            self.texBoxRetenciones_Deporte.value = f"{avg8:.2f}"
            self.texBoxRetenciones_Afp.value = f"{avg9:.2f}"
            self.page.update()
        except InvalidOperation as e:
            self.mostrar_mensaje6(f"Error en Retenciones: {e}", tipo="error")

    def TotalDescuentos(self):
        try:
            num14 = Decimal(self.texBox99.value or 0)  # Regalia al neto
            num4 = Decimal(self.texBoxVCns.value or 0)
            num5 = Decimal(self.texBoxVComibol.value or 0)
            num6 = Decimal(self.texBoxRetenciones_Fencomin.value or 0)
            num7 = Decimal(self.texBoxRetenciones_Fedecomin.value or 0)
            num8 = Decimal(self.texBoxRetenciones_Regalias.value or 0)  # Regalias neto
            num9 = Decimal(self.texBoxRetenciones_Cooperativa.value or 0)
            num10 = Decimal(self.texBoxRetenciones_Comunidad.value or 0)
            num11 = Decimal(self.texBoxRetenciones_Deporte.value or 0)
            num12 = Decimal(self.texBoxRetenciones_Afp.value or 0)
            num13 = Decimal(self.texBox28.value or 0)  # Anticipo
            num15 = Decimal(self.texBox32.value or 0)  # Anticipo Tras
            num16 = Decimal(self.monto_amortizacion.value or 0)  # Amortización préstamo

            avg1 = (num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12 + num13 + num14 + num15 + num16)

            self.texBoxVTDescuentos.value = f"{avg1:.2f}"
            self.page.update()
        except InvalidOperation as e:
            self.mostrar_mensaje6(f"Error en TotalDescuentos: {e}", tipo="error")

    def TotalDescuentosABC(self):
        try:
            num1 = Decimal(self.texBoxVNetoBs.value or 0)
            num4 = Decimal(self.texBoxVCns.value or 0)
            num5 = Decimal(self.texBoxVComibol.value or 0)
            num6 = Decimal(self.texBoxRetenciones_Fencomin.value or 0)
            num7 = Decimal(self.texBoxRetenciones_Fedecomin.value or 0)
            num8 = Decimal(self.texBoxRetenciones_Regalias.value or 0)
            num9 = Decimal(self.texBoxRetenciones_Cooperativa.value or 0)
            num10 = Decimal(self.texBoxRetenciones_Comunidad.value or 0)
            num11 = Decimal(self.texBoxRetenciones_Deporte.value or 0)
            num12 = Decimal(self.texBoxRetenciones_Afp.value or 0)
            num13 = Decimal(self.texBox28.value or 0)  # Anticipo
            num14 = Decimal(self.texBox99.value or 0)  # Regalia al neto
            num15 = Decimal(self.texBox32.value or 0)  # Anticipo Tras
            num16 = Decimal(self.monto_amortizacion.value or 0)  # Amortización préstamo

            avg1 = ((num1) - (num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12 + num14 + num13 + num15 + num16))
            avg2 = ((num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12))

            self.texBox101.value = f"{avg1:.2f}"
            self.texBox110.value = f"{avg2:.2f}"
            self.page.update()
        except InvalidOperation as e:
            self.mostrar_mensaje6(f"Error en TotalDescuentosABC: {e}", tipo="error")

    def descuentos_neto_final(self):
        num1 = Decimal(self.texBoxVNetoBs.value)
        num16 = Decimal(self.texBox110.value)  # Total descuentos de ley (B)

        avg3 = ((num1) - (num16))

        self.texBox111.value = f"{avg3:.2f}"
        self.page.update()

    def TotalDescuentos_mo2(self):
        num1 = Decimal(self.texBoxVRMAg.value)
        num2 = Decimal(self.texBoxVRMPb.value)
        num3 = Decimal(self.texBoxVRMZn.value)
        num4 = Decimal(self.texBoxVCns.value)
        num5 = Decimal(self.texBoxVComibol.value)

        avg1 = (num1 + num2 + num3 + num4 + num5)

        self.texBoxVTRetenciones.value = f"{avg1:.2f}"
        self.page.update()

    def TotalLiqPag_mo2(self):
        num1 = Decimal(self.texBoxVTRetenciones.value)
        num2 = Decimal(self.texBoxVNetoBs.value)

        avg1 = (num2 - num1)

        self.texBoxVTLiqPag.value = f"{avg1:.2f}"
        self.page.update()

    def TotalRm(self):
        num1 = Decimal(self.texBoxVRMAg.value)
        num2 = Decimal(self.texBoxVRMPb.value)
        num3 = Decimal(self.texBoxVRMZn.value)

        avg1 = (num1 + num2 + num3)

        self.texBoxTotalRm.value = f"{avg1:.2f}"
        self.page.update()

    def LiquidoPagable(self):
        num2 = Decimal(self.texBox101.value)  # Total ABC
        num3 = Decimal(self.texBox33.value)  # Total bono PLOMO
        num4 = Decimal(self.texBox100.value)  # Total bono transporte

        avg1 = (num2 + num3 + num4)

        self.texBoxVTLiquidoPagable.value = f"{avg1:.2f}"
        self.page.update()

    def round_down(self, number):
        return math.floor(number / 10) * 10

    def round_number(self):
        input_value = Decimal(self.texBoxVTLiquidoPagable.value)
        output_value = self.round_down(input_value)
        self.texBoxVTLiquidoPagable1.value = f"{output_value:.2f}"
        self.page.update()
   
    def insertar_datos(self):
        self.texBox7.value = "12.95"
        self.texBox3.value = "0.00"
        self.texBox4.value = "0.00"
        self.texBox5.value = "0.00"
        self.texBox6.value = "0.00"
        self.texBox8.value = "0.00"
        self.texBoxLeyesH2O2.value = "0.00"
        self.texBox102.value = "0.00"
        self.texBox103.value = "0.00"
        self.texBox104.value = "0.00"
        self.page.update()

    def generar_reporte_liquidaciones(self):
        numlote = self.conboBoxNumLote3.value  # Este valor debería ser obtenido de algún lugar
        radio_value = self.radio_group.value  # Obtener el valor seleccionado en el RadioGroup

        if radio_value == "1":  # Coop
            self.generar_reporte(numlote)
        elif radio_value == "2":  # Part
            self.generar_repote_particular(numlote)
            self.insertar_datos()
            
    def no_descontar_porcentajes(self):
        radio_value = self.radio_group.value  # Obtener el valor seleccionado en el RadioGroup

        if radio_value == "1":  # Coop
            pass  # No hacer nada
        elif radio_value == "2":  # Part
            self.insertar_datos()

    def LeyesVendedorCero(self):
        self.texBoxLeyesAg2.value = "0.00"
        self.texBoxLeyesPb2.value = "0.00"
        self.texBoxLeyesZn2.value = "0.00"
        self.texBoxLeyesH2O2.value = "0.00"
        
        self.page.update()

    def Calcular_Bono_Extra(self, e):
        self.texBox107.value = "0.00"
        self.texBox108.value = "0.00"
        self.texBox109.value = "6.86"
        
        num1 = Decimal(self.texBoxKns.value)
        num2 = Decimal(self.texBox107.value)  # ley plomo
        num3 = Decimal(self.texBox108.value)  # Precio
        num4 = Decimal(self.texBox109.value)  # t/c
        num5 = Decimal(self.texBox100.value)  # total

        avg1 = num2 * num3 * (num1 / Decimal('1000')) * num4

        self.texBox100.value = f"{avg1:.2f}"
        self.page.update() 

    def ConvertirNumLetras(self):

        #num1 = Decimal(texBoxVNetoBs.get())
        num2 = self.texBox29.value # total abc
        
        avg1 = (num2)

        self.texBoxNumLetras.value = f"{avg1}"
        self.page.update()

    def buscar(self,e):
        """
        Función que se ejecuta al presionar Enter en el Dropdown.
        Llama a las funciones buscarNumeroLote y buscarNumeroLote3.
        """
        
        num_lote = self.conboBoxNumLote3.value
        self.limpiar_Campos_liquidacion()
        if not num_lote:
            self.mostrar_mensaje6("El Lote NO Tiene Leyes", tipo="advertencia")            
            return
        
        
        # Llamar a las funciones de búsqueda
        self.texBoxLeyesH2O2.value = "0.00"
        self.buscarNumeroLote(e)
        self.no_descontar_porcentajes()
        #self.limpiar_Campos_liquidacion()
        
        self.buscarNumeroLote3(e)
         

    def EjecutarBotones(self, e):
       
       try: 
        self.kilos_merma()
        self.kilos_netos_secos()
        self.kilos_finos()
        self.valor_bruto()
        self.total_precio()
        self.PrecioSus()
        self.PrecioBS()
        self.Precio()
        self.TotalRm()
        #self.Calcular_Bono_Extra(e)
        self.valor_neto_bs()
        self.Retenciones()
        self.obcion_regalias_mineras(e)
        self.TotalDescuentosABC()
        self.descuentos_neto_final()
        self.TotalDescuentos_mo2()
        self.TotalLiqPag_mo2()
        self.TotalDescuentos()
        self.LiquidoPagable()
        self.round_number()
        self.ConvertirNumLetras()
        self.mostrar_mensaje6("Los calculos fueron realizados exitosamete", tipo="advertencia")            
       
       except ValueError as e:
                self.mostrar_mensaje6(f"Error: El Lote  no se ha Actualizado' {e}", tipo="error")
       except Exception as e:
                self.mostrar_mensaje6(f"Error: El Lote  {e}", tipo="error")


    def Guardar(self, e):
        self.guardar_liquidacion(e)
        self.generar_reporte_liquidaciones()

    def editar(self, e):
        self.modificar_liquidacion(e)
        self.generar_reporte_liquidaciones()    

    def buscadorrecepcion(self, e):
        self.buscarlote()

    def buscarlote(self):
        def on_hover_boton_buscar(e):
            boton_buscar.bgcolor = "green" if e.data == "true" else "teal"
            boton_buscar.update()

        def buscar_proveedorliquidacionesrecepcion(e=None):
            try:
                search_term = entry_nombres_apellidos.value
                num_lote = entry_num_lote.value

                # Obtener el valor seleccionado del RadioGroup
                estado_seleccionado = estado_group.value
                estado_condition = ""
                if estado_seleccionado == "Liquidado":
                    estado_condition = "AND Recepcion.Estado = 'Liquidado'"
                elif estado_seleccionado == "No Liquidado":
                    estado_condition = "AND Recepcion.Estado = 'No Liquidado'"

                fecha_inicio = entry_fecha_inicio.value
                fecha_final = entry_fecha_final.value
                fecha_condition = ""
                if fecha_inicio and fecha_final:
                    fecha_condition = "AND Recepcion.fecha BETWEEN %s AND %s"
                elif fecha_inicio:
                    fecha_condition = "AND Recepcion.fecha >= %s"
                elif fecha_final:
                    fecha_condition = "AND Recepcion.fecha <= %s"

                if num_lote:
                    num_lote_condition = "AND Recepcion.NumLote = %s"
                else:
                    num_lote_condition = ""

                sql = f"""
                    SELECT 
                        Recepcion.fecha, 
                        CONCAT(COALESCE(Liquidacion.NombreInicial, '0'), '-', Recepcion.Numlote) as LoteCompleto,
                        ROUND(Recepcion.Peso, 0) AS Peso, 
                        Recepcion.NombresApellidos, 
                        Recepcion.Denominacion, 
                        COALESCE(Liquidacion.leyesZnliq, 0) AS leyesZnliq, 
                        COALESCE(Liquidacion.leyesAgliq, 0) AS leyesAgliq, 
                        COALESCE(Liquidacion.leyespbliq, 0) AS leyespbliq,
                        GROUP_CONCAT(Comprobantes.idcomprobantes SEPARATOR '-') AS NumRecibo,
                        GROUP_CONCAT(COALESCE(Comprobantes.egreso, 0) SEPARATOR '-') AS AnticipoS,
                        COALESCE(Liquidacion.fechaliq, '0') AS fechaliq, 
                        Recepcion.estado 
                    FROM 
                        Recepcion
                    LEFT JOIN 
                        Liquidacion ON Recepcion.NumLote = Liquidacion.NumLote 
                    LEFT JOIN 
                        Comprobantes ON Comprobantes.NumLote = Recepcion.NumLote 
                    INNER JOIN 
                        Proveedores ON Proveedores.NombresApellidos = Recepcion.NombresApellidos 
                    LEFT JOIN  -- Cambiado de INNER JOIN a LEFT JOIN para permitir valores nulos
                        Inicial ON Inicial.NombreInicial = Liquidacion.NombreInicial
                    WHERE 
                        Proveedores.NombresApellidos LIKE %s 
                        {num_lote_condition}
                        {estado_condition} 
                        {fecha_condition}
                    GROUP BY 
                        Recepcion.fecha, Recepcion.NumLote, Recepcion.Peso, Recepcion.NombresApellidos, 
                        Recepcion.Denominacion, Liquidacion.leyesZnliq, Liquidacion.leyesAgliq, 
                        Liquidacion.leyespbliq, Liquidacion.fechaliq, Recepcion.estado, Liquidacion.NombreInicial
                    ORDER BY 
                        Recepcion.NumLote
                    """

                params = ['%' + search_term + '%']
                if num_lote:
                    params.append(num_lote)
                if fecha_inicio and fecha_final:
                    params.extend([fecha_inicio, fecha_final])
                elif fecha_inicio:
                    params.append(fecha_inicio)
                elif fecha_final:
                    params.append(fecha_final)

                conn = CConection.ConexionBasedeDatos()
                if conn is None:
                    raise Exception("No se pudo establecer la conexión a la base de datos.")

                with conn:
                    with conn.cursor() as cursor:
                        cursor.execute(sql, params)
                        rows = cursor.fetchall()

                        listview_proveedores.controls.clear()

                        # Agregar los títulos
                        listview_proveedores.controls.append(
                            Container(
                                content=Row(
                                    controls=[
                                        Text("Fecha", width=80, weight="bold"),
                                        Text("Lote", width=70, weight="bold"),
                                        Text("Peso", width=80, weight="bold"),
                                        Text("Nombres y Apellidos", width=150, weight="bold"),
                                        Text("Denominación", width=100, weight="bold"),
                                        Text("Leyes Zn", width=80, weight="bold"),
                                        Text("Leyes Ag", width=80, weight="bold"),
                                        Text("Leyes Pb", width=80, weight="bold"),
                                        Text("Num Recibo", width=100, weight="bold"),
                                        Text("Anticipo", width=100, weight="bold"),
                                        Text("Fecha Liquidación", width=80, weight="bold"),
                                        Text("Estado", width=100, weight="bold"),
                                    ],
                                    alignment=ft.MainAxisAlignment.START,
                                ),
                                padding=10,
                                border=border.all(1, Colors.TEAL),
                                border_radius=10,
                            )
                        )

                        for row in rows:
                            listview_proveedores.controls.append(
                                Container(
                                    content=Row(
                                        controls=[
                                            Text(row[0], width=80),
                                            Text(row[1], width=70),
                                            Text(row[2], width=80),
                                            Text(row[3], width=150),
                                            Text(row[4], width=100),
                                            Text(row[5], width=80),
                                            Text(row[6], width=80),
                                            Text(row[7], width=80),
                                            Text(row[8], width=100),
                                            Text(row[9], width=100),
                                            Text(row[10], width=80),
                                            Text(row[11], width=100),
                                        ],
                                        alignment=ft.MainAxisAlignment.START,
                                    ),
                                    padding=5, #espacio del texto y los bordes
                                    border=border.all(1, Colors.TEAL),
                                    border_radius=10,
                                    
                                )
                            )
                        listview_proveedores.update()

            except Exception as e:
                self.mostrar_mensaje6(f"Error: No se encontraron los registros. Error: {e}", tipo="error")

        # Crear los widgets con estilos
        entry_nombres_apellidos = TextField(
            label="Nombres y Apellidos",
            on_change=buscar_proveedorliquidacionesrecepcion,
            width=300, border_color="teal", border_radius=10,
            border=ft.border.all(5, Colors.TEAL), suffix_icon=ft.Icon(name=ft.Icons.SEARCH, color=Colors.TEAL),
        )
        entry_num_lote = TextField(
            label="Número de Lote",
            on_change=buscar_proveedorliquidacionesrecepcion,
            width=300, border_color="teal", border_radius=10,
            border=ft.border.all(5, Colors.TEAL), suffix_icon=ft.Icon(name=ft.Icons.SEARCH, color=Colors.TEAL),
        )

        # Crear RadioGroup con RadioButtons
        estado_group = ft.RadioGroup(
            content=Row(
                controls=[
                    ft.Radio(value="Todos", label="Todos"),
                    ft.Radio(value="Liquidado", label="Liquidado"),
                    ft.Radio(value="No Liquidado", label="No Liquidado"),
                ],
                spacing=30,
            ),
            on_change=buscar_proveedorliquidacionesrecepcion,
        )

        entry_fecha_inicio = TextField(
            label="Fecha Inicio (YYYY-MM-DD)",
            width=300, border_color="teal", border_radius=10,
            border=ft.border.all(5, Colors.TEAL)
        )
        entry_fecha_final = TextField(
            label="Fecha Final (YYYY-MM-DD)",
            width=300, border_color="teal", border_radius=10,
            border=ft.border.all(5, Colors.TEAL)
        )

        listview_proveedores = ListView(
            expand=True,
            spacing=5,
            padding=10,
            width=2100,
            auto_scroll=True
        )

        

        # Botón para ejecutar la búsqueda con estilos
        boton_buscar = ElevatedButton(
            text="Buscar",
            on_click=buscar_proveedorliquidacionesrecepcion,
            width=200, bgcolor=Colors.TEAL, color=Colors.WHITE,
            on_hover=on_hover_boton_buscar
        )

        # Agregar todos los componentes a la columna
        controls = [
            ft.ResponsiveRow(
                controls=[
                    Column(
                        controls=[
                            entry_nombres_apellidos,
                        ],
                        col={"xs": 12, "sm": 6, "md": 4, "lg": 3},
                        spacing=10,
                    ),
                    Column(
                        controls=[
                            entry_num_lote,
                        ],
                        col={"xs": 12, "sm": 6, "md": 4, "lg": 3},
                        spacing=10,
                    ),
                    Column(
                        controls=[
                            entry_fecha_inicio,
                        ],
                        col={"xs": 12, "sm": 6, "md": 4, "lg": 3},
                        spacing=10,
                    ),
                    Column(
                        controls=[
                            entry_fecha_final,
                        ],
                        col={"xs": 12, "sm": 6, "md": 4, "lg": 3},
                        spacing=10,
                    ),
                    Column(
                        controls=[
                            estado_group,  # Usar el RadioGroup aquí
                        ],
                        col={"xs": 12, "sm": 6, "md": 4, "lg": 3},
                        spacing=50,
                    ),
                ],
                spacing=10,
            ),
            boton_buscar,
            listview_proveedores,
        ]

        # Envolver los controles en un Column sin scroll
        scrollable_column = Column(
            controls=controls,
            height=600  # Ajusta la altura según sea necesario
        )

        self.dialog = AlertDialog(
            title=Text("BUSCAR PROVEEDORES", size=24,
                    weight="bold",
                    color=Colors.TEAL,
                    text_align=ft.TextAlign.CENTER),
            content=scrollable_column,
            actions=[ft.TextButton("Cerrar", on_click=lambda e: self.close_dialog())]
        )

        self.page.overlay.append(self.dialog)
        self.dialog.open = True
        self.page.update()

    def close_dialog(self):
        self.dialog.open = False
        self.page.update()

    def verificar_liquidacion1(self, num_lote):
            
            with CConection.ConexionBasedeDatos() as cone:
                cursor = cone.cursor(prepared=True)
                sql = ("SELECT VNetoBs FROM Liquidacion WHERE NumLote = %s")
                params = (num_lote,)
                cursor.execute(sql, params)
                resultado = cursor.fetchone()
            
            if resultado and resultado[0] is not None:
                self.mostrar_mensaje6(f"El lote '{num_lote} ya está liquidado", tipo="advertencia")
                #self.limpiarCampos_tres_dialog()
                return False
            else:
                return True    
  
    def frame_tres_dialog(self, e):
        def on_hover_boton_guardar_prov(e):
            self.boton_guardar_trans.bgcolor = "green" if e.data == "true" else "teal"
            self.boton_guardar_trans.update()

        def on_hover_boton_editar_prov(e):
            self.boton_editar_trans.bgcolor = "orange" if e.data == "true" else "teal"
            self.boton_editar_trans.update()

        def on_hover_boton_eliminar_prov(e):
            self.boton_eliminar_trans.bgcolor = "red" if e.data == "true" else "teal"
            self.boton_eliminar_trans.update()

        
        def guardarregistrostrans(e):
            # Verificar que todos los widgets estén inicializados
            if any(var is None for var in [self.conboBoxNumLote21, self.texBoxFechaAntTrans, self.texBoxAnticipo1, self.texBoxAntLiteral1]):
                self.mostrar_mensaje6("Los widgets no están inicializados", tipo="advertencia")            
                return

            # Obtener valores de los widgets
            values = []
            for widget in [self.conboBoxNumLote21, self.texBoxFechaAntTrans, self.texBoxAnticipo1, self.texBoxAntLiteral1]:
                value = widget.value
                if value is None or value == '':
                    self.mostrar_mensaje6(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                    return
                values.append(value)

            num_lote = self.conboBoxNumLote21.value

            try:
                # Insertar valores en la base de datos
                CTransporte.IngresarAnticipoTrans(self.page, *values)
                actualizarListView_trans()
                limpiarCampos_tres_dialog()
                
            except ValueError as e:
                self.mostrar_mensaje6(f"Error: El Lote '{num_lote}' {e}", tipo="error")
            except Exception as e:
                self.mostrar_mensaje6(f"Error: El Lote '{num_lote}' {e}", tipo="error")

        def actualizarListView_trans():
            try:
                # Limpiar la lista
                self.listviewtrans.controls.clear()

                # Agregar los títulos de las columnas
                self.listviewtrans.controls.append(
                    Container(
                        content=Row(
                            controls=[
                                Text("No", width=80, weight="bold"),
                                Text("Lote", width=100, weight="bold"),
                                Text("Fecha", width=150, weight="bold"),
                                Text("Monto Bs", width=100, weight="bold"),
                                Text("Estado", width=180, weight="bold"),
                            ],
                            alignment=ft.MainAxisAlignment.START,
                        ),
                        padding=10,
                        border=border.all(1, Colors.TEAL),
                        border_radius=10,
                    )
                )

                # Obtener los nuevos datos
                self.data_entries = CTransporte.mostrarAnticipoTrans()
                self.filtered_entries = self.data_entries

                # Insertar los nuevos datos en la lista
                for index, row in enumerate(self.filtered_entries):
                    self.listviewtrans.controls.append(
                        GestureDetector(
                            content=Container(
                                content=Row(
                                    controls=[
                                        Text(row[0], width=80),
                                        Text(row[1], width=100),
                                        Text(row[2], width=150),
                                        Text(row[3], width=100),
                                        Text(row[4], width=100),
                                    ],
                                    alignment=ft.MainAxisAlignment.START,
                                ),
                                padding=10,
                                border=border.all(1, Colors.TEAL),
                                border_radius=10,
                            ),
                            on_tap=lambda e, row=row, index=index: seleccionarRegistro_trans(row, index)
                        )
                    )
                self.page.update()
            except ValueError as error:
                print('Error al Actualizar Lista {}'.format(error))

        def seleccionarRegistro_trans(row, index):
            try:
                #nonlocal selected_row_index
                selected1_row_index = index

                # Establecer los valores en los campos de texto
                self.texBoxIdTransporte.value = row[0]
                self.conboBoxNumLote21.value = row[1]
                self.texBoxFechaAntTrans.value = row[2]
                self.texBoxAnticipo1.value = row[3]
                self.texBoxAntLiteral1.value = row[4]

                # Marcar la fila seleccionada
                for i, control in enumerate(self.listviewtrans.controls[1:]):  # Saltar el título de las columnas
                    container = control.content  # Obtener el contenedor
                    if i == selected1_row_index:  # Ajuste del índice
                        container.border = border.all(2, Colors.TEAL)
                        for cell in container.content.controls:
                            cell.color = Colors.TEAL
                    else:
                        container.border = border.all(1, Colors.TEAL)
                        for cell in container.content.controls:
                            cell.color = Colors.BLACK
                self.page.update()
            except Exception as error:
                print(f'Error al seleccionar Registro {error}')

        def Modificartransporte(e):
            # Verificar si los widgets están inicializados  
            if any(var is None for var in [self.conboBoxNumLote21, self.texBoxFechaAntTrans, self.texBoxAnticipo1, self.texBoxAntLiteral1,self.texBoxIdTransporte]):
                self.mostrar_mensaje6("Los widgets no están inicializados", tipo="advertencia")            
                return

            values = []
            for widget in [self.conboBoxNumLote21, self.texBoxFechaAntTrans, self.texBoxAnticipo1, self.texBoxAntLiteral1,self.texBoxIdTransporte]:
                value = widget.value
                if value is None or value == '':
                    self.mostrar_mensaje6(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                    return
                values.append(value)
            nun_lote = self.conboBoxNumLote21.value
            try:
                CTransporte.ModificarAnticipoTrans(self.page, *values)
                actualizarListView_trans()
                limpiarCampos_tres_dialog()

            except ValueError as e:
                self.mostrar_mensaje6(f"Error: El Lote '{nun_lote} no Puede ser Editado' {e}", tipo="error")
            except Exception as e:
                self.mostrar_mensaje6(f"Error: El Lote '{nun_lote} no puede ser Editado' {e}", tipo="error")

        def EliminarTransporte(e):
            # Verificar si los widgets están inicializados  
            if any(var is None for var in [self.texBoxIdTransporte,self.conboBoxNumLote21]):
                self.mostrar_mensaje6("Los widgets no están inicializados", tipo="advertencia")            
                return

            values = []
            for widget in [self.texBoxIdTransporte,self.conboBoxNumLote21]:
                value = widget.value
                if not value:
                    self.mostrar_mensaje6(f'Seleccione Un Numero de Lote', tipo="advertencia")                           
                    return
                values.append(value)

            try:
                CTransporte.EliminarAnticipoTrans(self.page, *values)
                actualizarListView_trans()
                limpiarCampos_tres_dialog()

            except ValueError as e:
                self.mostrar_mensaje6(f"Error de Eliminacion: {e}", tipo="error")
            except Exception as e:
                self.mostrar_mensaje6(f"Error: No se eliminaron los registros: {e}", tipo="error")

        
        def limpiarCampos_tres_dialog():
            # Lista de widgets
            widgets = [
                self.texBoxIdTransporte, self.conboBoxNumLote21, self.texBoxFechaAntTrans, self.texBoxAnticipo1,self.texBoxAntLiteral1
            ]
            
            # Limpiar todos los widgets
            for widget in widgets:
                widget.value = ""
            self.page.update()

        
        def buscar_lote_trans(e=None):

            num_lote = self.conboBoxNumLote21.value

            num_lote_str = str(num_lote)

        # Validar si el valor ingresado es un número
            if not num_lote_str.isdigit():
                self.mostrar_mensaje6('El número de lote debe ser un valor numérico entero', tipo="advertencia")
                return


            try:
                # Buscar el lote en la base de datos
                row = CTransporte.buscarLotetransporte(num_lote)
                if row:
                    self.texBoxIdTransporte.value = row[0]
                    self.conboBoxNumLote21.value = row[1]
                    self.texBoxFechaAntTrans.value = row[2]
                    self.texBoxAnticipo1.value = row[3]
                    self.texBoxAntLiteral1.value = row[4]
                    
                    self.page.update()
                    self.mostrar_mensaje6(f" El Lote '{num_lote}' Encontrado Puedes Editar ", tipo="éxito")
                else:
                    #self.limpiarCampos_tres_dialog()
                    self.mostrar_mensaje6(f" El Lote '{num_lote}'no esta Recepcionado",tipo="advertencia")
            except Exception as e:
                    self.mostrar_mensaje6(f"Error: No se pudo buscar el Lote '{num_lote}'. Detalle: {e}", tipo="error")

        # Crear los widgets con tamaños ajustados
        self.texBoxIdTransporte = TextField(label="Id Transporte", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL), disabled=True)
        #self.texBoxNombresApellidos = TextField(label="Nombres y Apellidos", border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL),suffix_icon=ft.Icon(name=ft.Icons.SEARCH, color=Colors.TEAL), on_change=buscar_proveedorliquidacionesrecepcion)
        
        self.conboBoxNumLote21 = TextField(
            label="Lote",on_submit=buscar_lote_trans,
            width=300,
            height=50,
            border_color="teal",
            border_radius=10,
            border=ft.border.all(5, Colors.TEAL),
             ) # Función que se ejecuta al presionar Enter
        
        
        self.texBoxFechaAntTrans = TextField(label="Fecha", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL))
        self.texBoxAnticipo1 = TextField(label="Monto Bs", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL))
        self.texBoxAntLiteral1 = TextField(label="Estado", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL))
        
        # ListView para mostrar los datos
        self.listviewtrans = ListView(
            expand=True,
            spacing=10,
            padding=padding.only(left=10, right=0, top=10, bottom=10),
            auto_scroll=True,
            #width=600,  # Ajusta la altura según sea necesario
        )

        # Botones con el mismo tamaño
        self.boton_guardar_trans = ElevatedButton(text="GUARDAR", on_click=guardarregistrostrans, width=200, bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=on_hover_boton_guardar_prov)
        self.boton_editar_trans = ElevatedButton(text="EDITAR", on_click=Modificartransporte, width=200, bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=on_hover_boton_editar_prov)
        self.boton_eliminar_trans = ElevatedButton(text="ELIMINAR", on_click=EliminarTransporte, width=200, bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=on_hover_boton_eliminar_prov)

        self.selected2_row_index = None
        #self.controls = [boton_proveedoes_actualizar]

        # Agregar todos los componentes a la columna
        dialog_content = Column(
            controls=[
                ft.ResponsiveRow(
                    controls=[
                        Column(controls=[self.conboBoxNumLote21], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                        Column(controls=[self.texBoxFechaAntTrans], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                    ],
                    spacing=7,
                ),
                ft.ResponsiveRow(
                    controls=[
                        Column(controls=[self.texBoxAnticipo1], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                        Column(controls=[self.texBoxAntLiteral1], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                    ],
                    spacing=7,
                ),
                ft.ResponsiveRow(
                    controls=[
                        Column(controls=[self.boton_guardar_trans], col={"xs": 12, "sm": 6, "md": 4, "lg": 4}, spacing=7),
                        Column(controls=[self.boton_editar_trans], col={"xs": 12, "sm": 6, "md": 4, "lg": 4}, spacing=7),
                        Column(controls=[self.boton_eliminar_trans], col={"xs": 12, "sm": 6, "md": 4, "lg": 4}, spacing=7),
                    ],
                    alignment=ft.MainAxisAlignment.CENTER,
                    spacing=60,
                ),
                self.listviewtrans,
            ],
            width=600,
            height=400
        )

        self.dialog = AlertDialog(
            title=Text("REGISTRO DE ANTICIPOS DE TRANSPORTE EN CUSTODIA",size=24, weight="bold", text_align="center", color=Colors.TEAL),
            content=dialog_content,
            actions=[
                ElevatedButton(text="Cerrar", on_click=lambda e: self.close_dialog3())
            ],
            actions_alignment=alignment.center,
        )

        self.page.overlay.append(self.dialog)  # Usar Page.overlay.append(dialog) en lugar de self.page.dialog
        self.dialog.open = True
        self.page.update()

        
        actualizarListView_trans()

    def close_dialog3(self):
        self.dialog.open = False
        self.page.update()

#-------------------------PRESTAMOS-----------------------

    def cargar_clientes(self):
        """Carga los nombres de los clientes en el Dropdown."""
        try:
            with CConection.ConexionBasedeDatos() as cnx:
                cursor = cnx.cursor()
                cursor.execute("SELECT nombre_cliente FROM prestamos")
                clientes = cursor.fetchall()
                self.combo_cliente.options = [ft.dropdown.Option(cliente[0]) for cliente in clientes]
                self.page.update()
        except Exception as e:
            self.mostrar_mensaje6(f"Error al Cargar Clientes: {e}", tipo="error")

    def seleccionar_cliente(self, e):
        """Muestra las amortizaciones del cliente seleccionado en el Dropdown."""
        cliente_seleccionado = self.combo_cliente.value
        if cliente_seleccionado:
            self.mostrar_amortizaciones(cliente_seleccionado)

    def mostrar_prestamos(self):
        """Muestra todos los préstamos en el ListView con el formato proporcionado."""
        try:
            self.listview_prestamos.controls.clear()
            self.listview_prestamos.controls.append(
                ft.Container(
                    content=ft.Row(
                        controls=[
                            ft.Text("ID Préstamo", width=100, weight="bold"),
                            ft.Text("Fecha", width=120, weight="bold"),
                            ft.Text("Cliente", width=200, weight="bold"),
                            ft.Text("Monto", width=100, weight="bold"),
                        ],
                        alignment=ft.MainAxisAlignment.START,
                    ),
                    padding=10,
                    border=ft.border.all(1, ft.Colors.TEAL),
                    border_radius=10,
                )
            )
            with CConection.ConexionBasedeDatos() as cnx:
                cursor = cnx.cursor()
                cursor.execute("SELECT * FROM prestamos")
                prestamos = cursor.fetchall()
                for prestamo in prestamos:
                    self.listview_prestamos.controls.append(
                        ft.Container(
                            content=ft.Row(
                                controls=[
                                    ft.Text(str(prestamo[0]), width=100),
                                    ft.Text(prestamo[1], width=120),
                                    ft.Text(prestamo[2], width=200),
                                    ft.Text(f"{float(prestamo[3]):.2f}", width=100),
                                ],
                                alignment=ft.MainAxisAlignment.START,
                            ),
                            padding=10,
                            border=ft.border.all(1, ft.Colors.TEAL),
                            border_radius=10,
                            on_click=lambda e, prestamo=prestamo: self.seleccionar_prestamo(prestamo),
                        )
                    )
            self.page.update()
        except Exception as e:
            self.mostrar_mensaje6(f"Error al mostrar Préstamos: {e}", tipo="error")

    def mostrar_amortizaciones(self, cliente: str):
        """Muestra las amortizaciones de un cliente en el ListView con el formato proporcionado."""
        try:
            self.listview_amortizaciones.controls.clear()
            self.listview_amortizaciones.controls.append(
                ft.Container(
                    content=ft.Row(
                        controls=[
                            ft.Text("ID Amortización", width=120, weight="bold"),
                            ft.Text("Fecha", width=120, weight="bold"),
                            ft.Text("Número de Lote", width=120, weight="bold"),
                            ft.Text("Monto", width=100, weight="bold"),
                        ],
                        alignment=ft.MainAxisAlignment.START,
                    ),
                    padding=10,
                    border=ft.border.all(1, ft.Colors.TEAL),
                    border_radius=10,
                )
            )
            with CConection.ConexionBasedeDatos() as cnx:
                cursor = cnx.cursor()
                cursor.execute(
                    "SELECT idamortizaciones, fecha, numlote, monto FROM amortizaciones WHERE nombre_cliente = %s",
                    (cliente,),
                )
                amortizaciones = cursor.fetchall()
                for amortizacion in amortizaciones:
                    self.listview_amortizaciones.controls.append(
                        ft.Container(
                            content=ft.Row(
                                controls=[
                                    ft.Text(str(amortizacion[0]), width=120),
                                    ft.Text(amortizacion[1], width=120),
                                    ft.Text(amortizacion[2], width=120),
                                    ft.Text(f"{float(amortizacion[3]):.2f}", width=100),
                                ],
                                alignment=ft.MainAxisAlignment.START,
                            ),
                            padding=10,
                            border=ft.border.all(1, ft.Colors.TEAL),
                            border_radius=10,
                            on_click=lambda e, amortizacion=amortizacion: self.seleccionar_amortizacion(amortizacion),
                        )
                    )
            self.page.update()
        except Exception as e:
            self.mostrar_mensaje6(f"Error al mostrar Amortizaciones: {e}", tipo="error")

    def seleccionar_prestamo(self, prestamo):
        """Selecciona un préstamo para editar o eliminar."""
        self.prestamo_seleccionado = prestamo
        self.entry_fecha_prestamo.value = prestamo[1]
        self.entry_nombre_cliente.value = prestamo[2]
        self.entry_monto_prestamo.value = str(float(prestamo[3]))
        self.page.update()

    def seleccionar_amortizacion(self, amortizacion):
        """Selecciona una amortización para editar o eliminar."""
        self.amortizacion_seleccionada = amortizacion
        self.entry_fecha_amortizacion.value = amortizacion[1]
        self.entry_numlote.value = amortizacion[2]
        self.entry_monto_amortizacion.value = str(float(amortizacion[3]))
        self.page.update()

    def registrar_prestamo(self, e):
        """Registra un nuevo préstamo."""
        fecha = self.entry_fecha_prestamo.value
        nombre = self.entry_nombre_cliente.value
        monto = float(self.entry_monto_prestamo.value)
        if not all([fecha, nombre, monto]):
            self.mostrar_mensaje6("Todos los campos son obligatorios.", tipo="advertencia")
            return
        try:
            with CConection.ConexionBasedeDatos() as cnx:
                cursor = cnx.cursor()
                cursor.execute(
                    "INSERT INTO prestamos (fecha_prestamo, nombre_cliente, monto) VALUES (%s, %s, %s)",
                    (fecha, nombre, monto),
                )
                cnx.commit()
                self.mostrar_mensaje6("Préstamo registrado exitosamente.", tipo="éxito")
                self.limpiar_campos_prestamo()
                self.cargar_clientes()
                self.mostrar_prestamos()
        except Exception as e:
            self.mostrar_mensaje6(f"Error al registrar Préstamo: {e}", tipo="error")

    def editar_prestamo(self, e):
        """Edita un préstamo existente."""
        if not self.prestamo_seleccionado:
            self.mostrar_mensaje6("Seleccione un préstamo para editar.", tipo="advertencia")
            return
        fecha = self.entry_fecha_prestamo.value
        nombre = self.entry_nombre_cliente.value
        monto = float(self.entry_monto_prestamo.value)
        try:
            with CConection.ConexionBasedeDatos() as cnx:
                cursor = cnx.cursor()
                cursor.execute(
                    "UPDATE prestamos SET fecha_prestamo = %s, nombre_cliente = %s, monto = %s WHERE idprestamos = %s",
                    (fecha, nombre, monto, self.prestamo_seleccionado[0]),
                )
                cnx.commit()
                self.mostrar_mensaje6("Préstamo actualizado exitosamente.", tipo="éxito")
                self.limpiar_campos_prestamo()
                self.cargar_clientes()
                self.mostrar_prestamos()
        except Exception as e:
            self.mostrar_mensaje6(f"Error al editar Préstamo: {e}", tipo="error")

    def eliminar_prestamo(self, e):
        """Elimina un préstamo existente."""
        if not self.prestamo_seleccionado:
            self.mostrar_mensaje6("Seleccione un préstamo para eliminar.", tipo="advertencia")
            return
        try:
            with CConection.ConexionBasedeDatos() as cnx:
                cursor = cnx.cursor()
                cursor.execute(
                    "DELETE FROM prestamos WHERE idprestamos = %s",
                    (self.prestamo_seleccionado[0],),
                )
                cnx.commit()
                self.mostrar_mensaje6("Préstamo eliminado exitosamente.", tipo="éxito")
                self.limpiar_campos_prestamo()
                self.cargar_clientes()
                self.mostrar_prestamos()
        except Exception as e:
            self.mostrar_mensaje6(f"Error al eliminar Préstamo: {e}", tipo="error")

    def registrar_amortizacion(self, e):
        """Registra una nueva amortización."""
        fecha = self.entry_fecha_amortizacion.value
        cliente = self.combo_cliente.value
        numlote = self.entry_numlote.value
        monto = float(self.entry_monto_amortizacion.value)
        if not all([fecha, cliente, numlote, monto]):
            self.mostrar_mensaje6("Todos los campos son obligatorios.", tipo="advertencia")
            return
        try:
            with CConection.ConexionBasedeDatos() as cnx:
                cursor = cnx.cursor()
                cursor.execute("SELECT idprestamos, monto FROM prestamos WHERE nombre_cliente = %s", (cliente,))
                prestamo = cursor.fetchone()
                cursor.execute("SELECT NumLote FROM Recepcion WHERE NumLote = %s", (numlote,))
                lote = cursor.fetchone()
                if prestamo and lote:
                    idprestamo, monto_prestamo = prestamo
                    nuevo_monto = float(monto_prestamo) - monto
                    if nuevo_monto < 0:
                        self.mostrar_mensaje6("El monto de la amortización excede el monto del préstamo.", tipo="error")
                    else:
                        cursor.execute(
                            "INSERT INTO amortizaciones (fecha, nombre_cliente, numlote, monto) VALUES (%s, %s, %s, %s)",
                            (fecha, cliente, numlote, monto),
                        )
                        cursor.execute("UPDATE prestamos SET monto = %s WHERE idprestamos = %s", (nuevo_monto, idprestamo))
                        cnx.commit()
                        self.mostrar_mensaje6("Amortización registrada exitosamente.", tipo="éxito")
                        self.limpiar_campos_amortizacion()
                        self.mostrar_amortizaciones(cliente)
                        self.mostrar_prestamos()
                else:
                    self.mostrar_mensaje6("Cliente o número de lote no encontrado.", tipo="error")
        except Exception as e:
            self.mostrar_mensaje6(f"Error al registrar Amortización: {e}", tipo="error")

    def editar_amortizacion(self, e):
        """Edita una amortización existente."""
        if not self.amortizacion_seleccionada:
            self.mostrar_mensaje6("Seleccione una amortización para editar.", tipo="advertencia")
            return
        fecha = self.entry_fecha_amortizacion.value
        cliente = self.combo_cliente.value
        numlote = self.entry_numlote.value
        monto = float(self.entry_monto_amortizacion.value)
        try:
            with CConection.ConexionBasedeDatos() as cnx:
                cursor = cnx.cursor()
                cursor.execute(
                    "UPDATE amortizaciones SET fecha = %s, nombre_cliente = %s, numlote = %s, monto = %s WHERE idamortizaciones = %s",
                    (fecha, cliente, numlote, monto, self.amortizacion_seleccionada[0]),
                )
                cnx.commit()
                self.mostrar_mensaje6("Amortización actualizada exitosamente.", tipo="éxito")
                self.limpiar_campos_amortizacion()
                self.mostrar_amortizaciones(cliente)
                self.mostrar_prestamos()
        except Exception as e:
            self.mostrar_mensaje6(f"Error al editar Amortización: {e}", tipo="error")

    def eliminar_amortizacion(self, e):
        """Elimina una amortización existente."""
        if not self.amortizacion_seleccionada:
            self.mostrar_mensaje6("Seleccione una amortización para eliminar.", tipo="advertencia")
            return
        try:
            with CConection.ConexionBasedeDatos() as cnx:
                cursor = cnx.cursor()
                cursor.execute(
                    "DELETE FROM amortizaciones WHERE idamortizaciones = %s",
                    (self.amortizacion_seleccionada[0],),
                )
                cnx.commit()
                self.mostrar_mensaje6("Amortización eliminada exitosamente.", tipo="éxito")
                self.limpiar_campos_amortizacion()
                self.mostrar_amortizaciones(self.combo_cliente.value)
                self.mostrar_prestamos()
        except Exception as e:
            self.mostrar_mensaje6(f"Error al eliminar Amortización: {e}", tipo="error")

    def limpiar_campos_prestamo(self):
        """Limpia los campos de préstamo."""
        self.entry_fecha_prestamo.value = ""
        self.entry_nombre_cliente.value = ""
        self.entry_monto_prestamo.value = ""
        self.prestamo_seleccionado = None
        self.page.update()

    def limpiar_campos_amortizacion(self):
        """Limpia los campos de amortización."""
        self.entry_fecha_amortizacion.value = ""
        self.entry_numlote.value = ""
        self.entry_monto_amortizacion.value = ""
        self.amortizacion_seleccionada = None
        self.page.update()
        
    def frame_cuatro_dialog(self, e):
        def on_hover_boton_guardar_prov(e):
            self.boton_guardar_trans.bgcolor = "green" if e.data == "true" else "teal"
            self.boton_guardar_trans.update()

        def on_hover_boton_editar_prov(e):
            self.boton_editar_trans.bgcolor = "orange" if e.data == "true" else "teal"
            self.boton_editar_trans.update()

        def on_hover_boton_eliminar_prov(e):
            self.boton_eliminar_trans.bgcolor = "red" if e.data == "true" else "teal"
            self.boton_eliminar_trans.update()

        # Crear los widgets con tamaños ajustados
        self.prestamo_seleccionado = None
        self.amortizacion_seleccionada = None

        # Campos de entrada para préstamos
        self.entry_fecha_prestamo = ft.TextField(label="Fecha del Préstamo", width=250, border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL))
        self.entry_nombre_cliente = ft.TextField(label="Nombre del Cliente", width=250, border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL))
        self.entry_monto_prestamo = ft.TextField(label="Monto del Préstamo", width=250, border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL))

        # Campos de entrada para amortizaciones
        self.entry_fecha_amortizacion = ft.TextField(label="Fecha de Amortización", width=250, border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL))
        self.combo_cliente = ft.Dropdown(label="Cliente",on_change=self.seleccionar_cliente, width=250, border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL))
        self.entry_numlote = ft.TextField(label="Número de Lote", width=250, border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL))
        self.entry_monto_amortizacion = ft.TextField(label="Monto de Amortización", width=250, border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL))

        # Listas para mostrar datos
        self.listview_prestamos = ft.ListView(expand=True, spacing=10, padding=10)
        self.listview_amortizaciones = ft.ListView(expand=True, spacing=10, padding=10)

        # Botones
        self.btn_registrar_prestamo = ft.ElevatedButton("GUARDAR", on_click=self.registrar_prestamo,width=200, bgcolor=Colors.TEAL, color=Colors.WHITE)
        self.btn_editar_prestamo = ft.ElevatedButton("EDITAR", on_click=self.editar_prestamo, width=200, bgcolor=Colors.TEAL, color=Colors.WHITE)
        self.btn_eliminar_prestamo = ft.ElevatedButton("ELIMINAR", on_click=self.eliminar_prestamo, width=200, bgcolor=Colors.TEAL, color=Colors.WHITE)
        self.btn_registrar_amortizacion = ft.ElevatedButton("GUARDAR", on_click=self.registrar_amortizacion, width=200, bgcolor=Colors.TEAL, color=Colors.WHITE)
        self.btn_editar_amortizacion = ft.ElevatedButton("EDITAR", on_click=self.editar_amortizacion, width=200, bgcolor=Colors.TEAL, color=Colors.WHITE)
        self.btn_eliminar_amortizacion = ft.ElevatedButton("ELIMINAR", on_click=self.eliminar_amortizacion, width=200, bgcolor=Colors.TEAL, color=Colors.WHITE)

        self.selected2_row_index = None
        #self.controls = [boton_proveedoes_actualizar]

        # Agregar todos los componentes a la columna
        dialog_content1 = Column(
            controls=[
                ft.ResponsiveRow(
                    controls=[
                        Column(controls=[self.entry_fecha_prestamo], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                        Column(controls=[self.entry_nombre_cliente], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                    ],
                    spacing=7,
                ),
                ft.ResponsiveRow(
                    controls=[
                        Column(controls=[self.entry_monto_prestamo], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                    ],
                    spacing=7,
                ),
                ft.ResponsiveRow(
                    controls=[
                        Column(controls=[self.btn_registrar_prestamo], col={"xs": 12, "sm": 6, "md": 4, "lg": 4}, spacing=7),
                        Column(controls=[self.btn_editar_prestamo], col={"xs": 12, "sm": 6, "md": 4, "lg": 4}, spacing=7),
                        Column(controls=[self.btn_eliminar_prestamo], col={"xs": 12, "sm": 6, "md": 4, "lg": 4}, spacing=7),
                    ],
                    alignment=ft.MainAxisAlignment.CENTER,
                    spacing=60,
                ),
                self.listview_prestamos,
            ],
            width=600,
            height=400
        )
        self.cargar_clientes()
        self.mostrar_prestamos()

        dialog_content2 = Column(
            controls=[
                ft.ResponsiveRow(
                    controls=[
                        Column(controls=[self.entry_fecha_amortizacion], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                        Column(controls=[self.combo_cliente], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                    ],
                    spacing=7,
                ),
                ft.ResponsiveRow(
                    controls=[
                        Column(controls=[self.entry_numlote], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                        Column(controls=[self.entry_monto_amortizacion], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                    ],
                    spacing=7,
                ),
                ft.ResponsiveRow(
                    controls=[
                        Column(controls=[self.btn_registrar_amortizacion], col={"xs": 12, "sm": 6, "md": 4, "lg": 4}, spacing=7),
                        Column(controls=[self.btn_editar_amortizacion], col={"xs": 12, "sm": 6, "md": 4, "lg": 4}, spacing=7),
                        Column(controls=[self.btn_eliminar_amortizacion], col={"xs": 12, "sm": 6, "md": 4, "lg": 4}, spacing=7),
                    ],
                    alignment=ft.MainAxisAlignment.CENTER,
                    spacing=60,
                ),
                self.listview_amortizaciones,
            ],
            width=600,
            height=400
        )
        
        self.dialog_content = ft.Column(
            controls=[
                ft.Row(
                    controls=[
                        ft.Column(
                            controls=[dialog_content1],
                            expand=6,
                            spacing=10,  # Espacio entre los elementos dentro del Column
                        ),
                        ft.Column(
                            controls=[dialog_content2],
                            expand=6,
                            spacing=10,  # Espacio entre los elementos dentro del Column
                        ),
                    ],
                    expand=True,
                    spacing=100,  # Espacio entre dialog_content1 y dialog_content2
                ),
                ft.Column(
                    controls=[
                        # white_container
                    ],
                    expand=1.3,
                ),
            ],
            scroll=ft.ScrollMode.AUTO,  # Habilitar scroll
            expand=True,
            spacing=20,  # Espacio entre los elementos dentro del Column principal
        )

        # Asignar el título y el contenido desplazable a los controles
        self.controls = [
            self.title_container,  # Título fijo
            self.scrollable_content  # Contenido con scroll
        ]

        self.dialog = AlertDialog(
            title=Text("REGISTRO DE PRESTAMOS Y AMORTIZACIONES",size=24, weight="bold", text_align="center", color=Colors.TEAL),
            content=self.dialog_content,
            actions=[
                ElevatedButton(text="Cerrar", on_click=lambda e: self.close_dialog3())
            ],
            actions_alignment=alignment.center,
        )

        self.page.overlay.append(self.dialog)  # Usar Page.overlay.append(dialog) en lugar de self.page.dialog
        self.dialog.open = True
        self.page.update()

    def close_dialog3(self):
        self.dialog.open = False
        self.page.update()

#----------------------------reportes--------------------------#

    def set_username(self, username):
        # Actualizar el nombre de usuario
        self.username = username
        self.create_ui_elements()

    def generar_reporte(self,numlote):

        valor = self.conboBoxNumLote3.value

        cone = CConection.ConexionBasedeDatos()
        cursor = cone.cursor()

        # Consulta SQL para extraer los datos
        query = """
            SELECT 
                round((Liquidacion.NumLote), 2), 
                Recepcion.Fecha, 
                FechaLiq, 
                Proveedores.NombresApellidos, 
                Recepcion.CarnetIdentidad, 
                Clientes.Denominacion, 
                Recepcion.Municipio, 
                Recepcion.NumeroOrden, 
                Recepcion.Procedencia, 
                Recepcion.Formulario_101, 
                Recepcion.Concesion, 
                NombreConjunto, 
                round((Recepcion.Peso), 0), 
                round((Kns), 2), 
                LeyesAgLiq, 
                LeyesPbLiq, 
                LeyesZnLiq,
                coalesce(Comprobantes.egreso, 0) as Anticipo,
                round((VNetoBs), 2), 
                round((TotalRm), 2), 
                round((VTDescuentos), 2), 
                round((VTLiquidoPagable1), 2), 
                NumLetras, 
                Cotizaciones.TCSusDia, 
                VPrecioAgSus, 
                VPrecioPbSus, 
                VPrecioZnSus, 
                VPrecioAgBs, 
                VPrecioPbBs, 
                VPrecioZnBs, 
                BonoTransporte, 
                BonoExtra, 
                Totalabc, 
                TotalDescuentosLey, 
                TotalImporteFinal, 
                coalesce(amortizaciones.monto, 0) as amortizaciones,
                NombreInicial 
            FROM Recepcion 
            INNER JOIN Proveedores ON Proveedores.NombresApellidos = Recepcion.NombresApellidos 
            INNER JOIN Clientes ON Recepcion.Denominacion = Clientes.Denominacion 
            INNER JOIN Cotizaciones ON Cotizaciones.Fecha = Recepcion.Fecha 
            INNER JOIN Leyes ON Leyes.NumLote = Recepcion.NumLote 
            INNER JOIN Liquidacion ON Liquidacion.NumLote = Recepcion.NumLote            
            LEFT JOIN Comprobantes ON Comprobantes.NumLote = Recepcion.NumLote 
            LEFT JOIN amortizaciones ON amortizaciones.NumLote = Recepcion.NumLote
            WHERE Recepcion.NumLote = %s
        """

        # Ejecutar la consulta y extraer los datos
        try:
            cursor.execute(query, (valor,))
            datos = cursor.fetchall()  # Leer todos los resultados

            if not datos:  # Si no hay datos, devolver un mensaje o manejar el caso
                print("No se encontraron datos para el número de lote proporcionado.")
                return
        except mysql.connector.Error as err:
            print("Error: {}".format(err))
            return

        #=============================== Retenciones

        # Obtener el valor de NumLote desde el campo de entrada
        numlote = self.conboBoxNumLote3.value

        cnx = CConection.ConexionBasedeDatos()
        cursor = cnx.cursor()

        # Consulta SQL para las retenciones
        query_retenciones = """
            SELECT 
                NombreColumna, 
                FORMAT(Valor, 2) AS Valor,
                FORMAT(Porcentaje, 2) AS Porcentaje
            FROM (
                SELECT 
                    'REGALIAS' AS NombreColumna, 
                    L.Retenciones_Regalias AS Valor, 
                    (L.Retenciones_Regalias / L.VNetoBs) * 100 AS Porcentaje,
                    R.NumLote
                FROM Liquidacion L
                INNER JOIN Recepcion R ON L.NumLote = R.NumLote
                WHERE L.Retenciones_Regalias IS NOT NULL AND L.Retenciones_Regalias <> 0
                UNION ALL
                SELECT 
                    'C.N.S.' AS NombreColumna, 
                    L.VCns AS Valor, 
                    (L.VCns / L.VNetoBs) * 100 AS Porcentaje,
                    R.NumLote
                FROM Liquidacion L
                INNER JOIN Recepcion R ON L.NumLote = R.NumLote
                WHERE L.Retenciones_Fencomin IS NOT NULL AND L.VCns <> 0
                UNION ALL
                SELECT 
                    'COMIBOL' AS NombreColumna, 
                    L.VComibol AS Valor, 
                    (L.VComibol / L.VNetoBs) * 100 AS Porcentaje,
                    R.NumLote
                FROM Liquidacion L
                INNER JOIN Recepcion R ON L.NumLote = R.NumLote
                WHERE L.Retenciones_Fencomin IS NOT NULL AND L.VComibol <> 0
                UNION ALL  
                SELECT 
                    'FENCOMIN' AS NombreColumna, 
                    L.Retenciones_Fencomin AS Valor, 
                    (L.Retenciones_Fencomin / L.VNetoBs) * 100 AS Porcentaje,
                    R.NumLote
                FROM Liquidacion L
                INNER JOIN Recepcion R ON L.NumLote = R.NumLote
                WHERE L.Retenciones_Fencomin IS NOT NULL AND L.Retenciones_Fencomin <> 0
                UNION ALL
                SELECT 
                    'FEDECOMIN' AS NombreColumna, 
                    L.Retenciones_Fedecomin AS Valor, 
                    (L.Retenciones_Fedecomin / L.VNetoBs) * 100 AS Porcentaje,
                    R.NumLote
                FROM Liquidacion L
                INNER JOIN Recepcion R ON L.NumLote = R.NumLote
                WHERE L.Retenciones_Fedecomin IS NOT NULL AND L.Retenciones_Fedecomin <> 0
                UNION ALL
                SELECT 
                    'COOPERATIVA' AS NombreColumna, 
                    L.Retenciones_Cooperativa AS Valor, 
                    (L.Retenciones_Cooperativa / L.VNetoBs) * 100 AS Porcentaje,
                    R.NumLote
                FROM Liquidacion L
                INNER JOIN Recepcion R ON L.NumLote = R.NumLote
                WHERE L.Retenciones_Cooperativa IS NOT NULL AND L.Retenciones_Cooperativa <> 0
                UNION ALL
                SELECT 
                    'COMUNIDAD' AS NombreColumna, 
                    L.Retenciones_Comunidad AS Valor, 
                    (L.Retenciones_Comunidad / L.VNetoBs) * 100 AS Porcentaje,
                    R.NumLote
                FROM Liquidacion L
                INNER JOIN Recepcion R ON L.NumLote = R.NumLote
                WHERE L.Retenciones_Comunidad IS NOT NULL AND L.Retenciones_Comunidad <> 0
                UNION ALL
                SELECT 
                    'DEPORTE' AS NombreColumna, 
                    L.Retenciones_Deporte AS Valor, 
                    (L.Retenciones_Deporte / L.VNetoBs) * 100 AS Porcentaje,
                    R.NumLote
                FROM Liquidacion L
                INNER JOIN Recepcion R ON L.NumLote = R.NumLote
                WHERE L.Retenciones_Deporte IS NOT NULL AND L.Retenciones_Deporte <> 0
                UNION ALL
                SELECT 
                    'A.F.P.' AS NombreColumna, 
                    L.Retenciones_Afp AS Valor, 
                    (L.Retenciones_Afp / L.VNetoBs) * 100 AS Porcentaje,
                    R.NumLote
                FROM Liquidacion L
                INNER JOIN Recepcion R ON L.NumLote = R.NumLote
                WHERE L.Retenciones_Afp IS NOT NULL AND L.Retenciones_Afp <> 0
            ) AS T
            WHERE T.NumLote = %s
            LIMIT 0, 1000;
        """

        try:
            cursor.execute(query_retenciones, (numlote,))
            results = cursor.fetchall()

            if not results:  # Si no hay resultados, manejar el caso
                print("No se encontraron retenciones para el número de lote proporcionado.")
        except mysql.connector.Error as err:
            print("Error en la consulta de retenciones: {}".format(err))

        #=============================== Descuentos

        numlote = self.conboBoxNumLote3.value

        descuentos = {
            "transporte": self.var_transporte.value,
            "comprobante": self.var_comprobantes.value,
            "amortizaciones": self.var_amortizaciones.value
        }

        # Inicializar results1 con una lista vacía
        results1 = []

        # Construir la consulta SQL dinámicamente
        query_parts = []

        if not descuentos["transporte"]:
            query_parts.append("""
                SELECT 
                    'ANTICIPO P/P' AS NombreColumna, 
                    T.IdTRansporte AS Valor1,
                    T.Anticipo1 AS Valor,
                    R.NumLote
                FROM transporte T
                INNER JOIN Recepcion R ON T.NumLote = R.NumLote
                WHERE T.Anticipo1 IS NOT NULL
            """)

        if not descuentos["comprobante"]:
            query_parts.append("""
                SELECT 
                    'ANTICIPO' AS NombreColumna, 
                    C.IdComprobantes AS Valor1,
                    C.egreso AS Valor,
                    R.NumLote
                FROM Comprobantes C
                INNER JOIN Recepcion R ON C.NumLote = R.NumLote
                WHERE C.Egreso IS NOT NULL
            """)

        if not descuentos["amortizaciones"]:
            query_parts.append("""
                SELECT 
                    'ANTICIPO P' AS NombreColumna, 
                    a.idamortizaciones AS Valor1,
                    a.monto AS Valor,
                    R.NumLote
                FROM amortizaciones a
                INNER JOIN Recepcion R ON a.NumLote = R.NumLote
                WHERE a.monto IS NOT NULL
            """)

        if query_parts:
            query = " UNION ALL ".join(query_parts)
            query = f"""
                SELECT 
                    NombreColumna, 
                    CAST(Valor1 AS UNSIGNED) AS Valor1,
                    FORMAT(Valor, 2) AS Valor
                FROM ({query}) AS T
                WHERE T.NumLote = %s
                LIMIT 0, 1000;
            """

            try:
                cursor.execute(query, (numlote,))
                results1 = cursor.fetchall()

                if not results1:  # Si no hay resultados, manejar el caso
                    print("No se encontraron descuentos para el número de lote proporcionado.")
            except mysql.connector.Error as err:
                print("Error en la consulta de descuentos: {}".format(err))

        # Cerrar la conexión
        cursor.close()
        cone.close()

        # Ahora puedes usar results1 sin problemas
        print("Resultados de descuentos:", results1)
        
    #======================================================
    # Crear un PDF
        pdf = FPDF(format="legal", orientation="P")

        # Agregar una página
        pdf.add_page()

        # Agregar logo en la esquina superior izquierda
        #pdf.image('cayo5.png', 10, 5, 20)

        # Agregar título centrado
        pdf.set_font('Arial', 'B', 7)
        pdf.image('logo menu 7.png', 10, 17, 30)
        #pdf.ln(3)
        pdf.cell(w=50, h=0, txt="EMPRESA MINERA VIRGEN DE COTOCA S.R.L.", ln=10, align='C', border=0, fill=0) 
        #pdf.set_font('Arial', 'B', 7)
        pdf.cell(w=365, h=0, txt="POTOSI-BOLIVIA", ln=10, align='C', border=0, fill=0)
        pdf.ln(5) 
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 0, 'LIQUIDACION   DE   MINERALES   EN   BROZA', 0, 1, 'C')
        pdf.ln(5) 

        
        for fila in datos:
            pdf.set_xy(x=40, y=20)
            #pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(30, 0,"Nombre Proveedor:",0,0,"L")
            pdf.set_font("Arial",size=7)
            pdf.cell(45, 0, str(fila[3]), 0, 0, "L")

            pdf.cell(2, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(15, 0,"CI:",0,0,"L")
            pdf.set_font("Arial",size=8)
            pdf.cell(29, 0, str(fila[4]), 0, 0, "L")

            #===============

            dias_semana = {
                0: "lunes",
                1: "martes",
                2: "miércoles",
                3: "jueves",
                4: "viernes",
                5: "sábado",
                6: "domingo"
            }

            # Define el diccionario para traducir el mes
            meses_espanol = {
                1: "enero",
                2: "febrero",
                3: "marzo",
                4: "abril",
                5: "mayo",
                6: "junio",
                7: "julio",
                8: "agosto",
                9: "septiembre",
                10: "octubre",
                11: "noviembre",
                12: "diciembre"
            }

            # Establece la fuente y el tamaño de la fuente
            pdf.set_font("Arial", size=8)

            # Escribe el título "Fecha de Liquidacion:"
            pdf.ln(4)
            pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B", size=8)
            pdf.cell(30, 0, "Fecha de Internacion:", 0, 0, "L")
            pdf.set_font("Arial", size=8)

            # Convierte la fecha de formato "2024-10-05" a "sábado, 5 de octubre de 2024"
            fecha = str(fila[1])  # asumiendo que fila[2] es la fecha en formato "2024-10-05"
            fecha_obj = datetime.strptime(fecha, "%Y-%m-%d")
            dia_semana = dias_semana[fecha_obj.weekday()]
            mes_espanol = meses_espanol[fecha_obj.month]
            fecha_formateada = f"{dia_semana}, {fecha_obj.day} de {mes_espanol} de {fecha_obj.year}"

            # Escribe la fecha formateada en el PDF
            pdf.cell(45, 0, fecha_formateada, 0, 0, "L")

            #===================

            pdf.cell(2, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(15, 0,"F-101:",0,0,"L")
            pdf.set_font("Arial",size=7)
            pdf.cell(29, 0, str(fila[9]), 0, 0, "L")

            #============

            dias_semana = {
                0: "lunes",
                1: "martes",
                2: "miércoles",
                3: "jueves",
                4: "viernes",
                5: "sábado",
                6: "domingo"
            }

            # Define el diccionario para traducir el mes
            meses_espanol = {
                1: "enero",
                2: "febrero",
                3: "marzo",
                4: "abril",
                5: "mayo",
                6: "junio",
                7: "julio",
                8: "agosto",
                9: "septiembre",
                10: "octubre",
                11: "noviembre",
                12: "diciembre"
            }

            # Establece la fuente y el tamaño de la fuente
            pdf.set_font("Arial", size=8)

            # Escribe el título "Fecha de Liquidacion:"
            pdf.ln(4)
            pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B", size=8)
            pdf.cell(30, 0, "Fecha de Liquidacion:", 0, 0, "L")
            pdf.set_font("Arial", size=8)

            # Convierte la fecha de formato "2024-10-05" a "sábado, 5 de octubre de 2024"
            fecha = str(fila[2])  # asumiendo que fila[2] es la fecha en formato "2024-10-05"
            fecha_obj = datetime.strptime(fecha, "%Y-%m-%d")
            dia_semana = dias_semana[fecha_obj.weekday()]
            mes_espanol = meses_espanol[fecha_obj.month]
            fecha_formateada = f"{dia_semana}, {fecha_obj.day} de {mes_espanol} de {fecha_obj.year}"

            # Escribe la fecha formateada en el PDF
            pdf.cell(45, 0, fecha_formateada, 0, 0, "L")

            #============
        
            pdf.cell(2, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(15, 0,"N° Tiquet:",0,0,"L")
            pdf.set_font("Arial",size=8)
            pdf.cell(29, 0, str(fila[7]), 0, 0, "L")


            pdf.ln(4)
            pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(30, 0,"Denominación:",0,0,"L")
            pdf.set_font("Arial",size=7)
            pdf.cell(45, 0, str(fila[5]), 0, 0, "L")

            pdf.cell(2, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(15, 0,"Mina:",0,0,"L")
            pdf.set_font("Arial",size=7)
            pdf.cell(29, 0, str(fila[8]), 0, 0, "L")

            pdf.ln(4)
            pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(30, 0,"Concesion:",0,0,"L")
            pdf.set_font("Arial",size=7)
            pdf.cell(45, 0, str(fila[10]), 0, 0, "L")

            pdf.cell(2, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(15, 0,"Municipio:",0,0,"L")
            pdf.set_font("Arial",size=7)
            pdf.cell(29, 0, str(fila[6]), 0, 0, "L")

            pdf.cell(2, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(20, 0,"Conjunto:",0,0,"L")
            pdf.set_font("Arial",size=7)
            pdf.cell(20, 0, str(fila[11]), 0, 0, "L") 

            #pdf.ln(5)
            #pdf.line(10, pdf.get_y(), 205, pdf.get_y())
            #pdf.ln(5)

            pdf.set_xy(x=10, y=40)
            #pdf.ln()
            pdf.set_font("Arial", style="B",size=8)

            pdf.set_draw_color(192, 192, 192)
            pdf.set_line_width(4)    
            pdf.rect(10, 42, 80, 0, "FD")
            #pdf.set_y(50)

            pdf.cell(20, 4,"P. NETO",0,0,"C")
            pdf.cell(20, 4,"H2O",0,0,"C")
            pdf.cell(20, 4,"T.M.S",0,0,"C")
            pdf.cell(20, 4,"T/C",0,0,"C")

            #retenciones
            pdf.set_font("Arial", style="B",size=8)
            pdf.set_draw_color(192, 192, 192)
            pdf.set_line_width(4)    
            pdf.rect(93, 42, 55, 0, "FD")
            pdf.cell(28, 4,"RETENCIONES",0,0,"C")
            pdf.cell(15, 4,"%",0,0,"C")
            pdf.cell(15, 4,"Bs.",0,0,"C")

            pdf.set_font("Arial", style="B",size=8)
            pdf.set_draw_color(192, 192, 192)
            pdf.set_line_width(4)    
            pdf.rect(153, 42, 53, 0, "FD")
            pdf.cell(60, 4,"OTROS DESCUENTOS",0,0,"C")
            pdf.ln(4)

            pdf.set_font("Arial", size=8)
            pdf.cell(20, 5, str(fila[12]), 0, 0, "R")
            pdf.cell(15, 5,"",0,0,"R")
            #pdf.cell(20, 5, str(fila[12]), 0, 0, "C")   
            pdf.cell(20, 5, str(fila[13]), 0, 0, "R") 
            pdf.cell(20, 5, str(fila[23]), 0, 0, "R")

            pdf.ln(5)
            pdf.set_font("Arial", style="B",size=8)

            pdf.set_draw_color(192, 192, 192)
            pdf.set_line_width(4)    
            pdf.rect(10, 51.5, 80, 0, "FD")

            pdf.cell(20, 5,"MINERAL",0,0,"L")
            pdf.cell(15, 5,"LEY",0,0,"C")
            pdf.cell(15, 5,"Pto.",0,0,"C")
            pdf.cell(15, 5,"Sus",0,0,"C")
            pdf.cell(15, 5,"Bs",0,1,"C")

            pdf.set_font("Arial",size=8)

            if fila [16] >0:

                pdf.cell(20, 5,"ZINC",0,0,"L")
                pdf.cell(15, 5, str(fila[16]), 0, 0, "R") 
                pdf.cell(15, 5,"",0,0,"R")
                #pdf.cell(15, 5, str(fila[16]), 0, 0, "R") 
                pdf.cell(15, 5, str(fila[26]), 0, 0, "R") 
                pdf.cell(15, 5, str(fila[29]), 0, 1, "R") 
            else:
                pdf.set_font("Times", style="I", size=9)

            if fila[14] > 0:

                pdf.cell(20, 5,"PLATA",0,0,"L")
                pdf.cell(15, 5, str(fila[14]), 0, 0, "R")
                pdf.cell(15, 5,"",0,0,"R")
                #pdf.cell(15, 5, str(fila[14]), 0, 0, "R")
                pdf.cell(15, 5, str(fila[24]), 0, 0, "R")
                pdf.cell(15, 5, str(fila[27]), 0, 1, "R") 
            else:
                pdf.set_font("Times", style="I", size=9)

            if fila[15] > 0:
                pdf.cell(20, 5,"PLOMO",0,0,"L")
                pdf.cell(15, 5, str(fila[15]), 0, 0, "R")
                pdf.cell(15, 5,"",0,0,"R")
                #pdf.cell(15, 5, str(fila[15]), 0, 0, "R")
                pdf.cell(15, 5, str(fila[25]), 0, 0, "R")
                pdf.cell(15, 4.5, str(fila[28]), 0, 1, "R")
            else:
                pdf.set_font("Times", style="I", size=9)

            #pdf.ln(5)
            pdf.set_font("Arial", style="B",size=8)
            #pdf.set_draw_color(192, 192, 192)
            pdf.set_fill_color(192, 192, 192)
            pdf.set_text_color(0, 0, 0)  # Negro
            #pdf.set_line_width(4)  
            pdf.set_x(10)
            #pdf.rect(10, 181, 80, 0, "FD")
            pdf.cell(40, 5, "IMPORTE TOTAL   (A)", 0, 0, "R",1)
            pdf.set_fill_color(192, 192, 192)
            pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(50)
            pdf.cell(40, 5,  "{:,.2f}".format(fila[18]), 0, 0, "R",1) 
            pdf.ln(4)

            #=====================================
            # Configura la posición de los resultados en la parte este de la hoja
            # Posición x en la parte este de la hoja
            
            pdf.set_xy(x=93, y=45)  
            pdf.set_font("Arial", size=8) 
            
            for i, row in enumerate(results):
                for j, value in enumerate(row):
                
                    if j == 0:
                        pdf.set_x(93)
                        pdf.cell(15, 4, str(value), 0, 0, "L")  # print the first value on the left side
                    elif j == 2:
                        pdf.set_x(113)
                        pdf.cell(15, 4, str(value) , 0, 0, "R") 
                    elif j == 1:
                        pdf.set_x(123)
                        pdf.cell(25, 4, str(value), 0, 0, "R")  # print the second value on the right side
                pdf.ln(4)


            # Totaliza los descuentos
            total_deductions = Decimal('0.00')
            for row in results:
                valor = row[1].replace(',', '')  # elimina la coma de los miles
                total_deductions += Decimal(valor)

            # Imprime el total de descuentos
            #pdf.ln(4)

            #==========
            pdf.set_font("Arial", style="B",size=8)
            pdf.set_fill_color(192, 192, 192)  # Amarillo
            pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(93)
            pdf.cell(40, 4, 'DESC. DE LEY (B)', 0, 0, 'L', 1)  # Agregamos el parámetro fill=1

            pdf.set_fill_color(192, 192, 192)  # Verde
            pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(120)
            pdf.cell(28, 4, str(total_deductions), 0, 0, 'R', 1)  # Agregamos el parámetro fill=1

            #========
            #pdf.set_font("Arial", size=8) 
            pdf.ln(5)
            num = Decimal(fila[21])
            letras = num_letras(num)
            pdf.cell(20, 4, "", 0, 0, "L")  # empty cell to align with the left side
            pdf.set_xy(x=153, y=75)
            pdf.cell(0, 4, letras, border=0, align='R')

            pdf.ln(20)
            #=====================

            pdf.set_font("Arial", size=8)  
            pdf.set_xy(x=153, y=45)  
            for i, row in enumerate(results1):
                for j, value in enumerate(row):
                
                    if j == 0:
                        pdf.set_x(153)
                        pdf.cell(25, 4, str(value), 0, 0, "L")  # print the first value on the left side
                    elif j == 1:
                        pdf.set_x(175)
                        pdf.cell(10, 4, str(value), 0, 0, "R") 
                    elif j == 2:
                        pdf.set_x(180)
                        pdf.cell(0, 4, str(value), 0, 0, "R")  # print the second value on the right side
                pdf.ln(4)


            # Totaliza los descuentos
            total_deductions = Decimal('0.00')
            for row in results1:
                valor = row[2].replace(',', '')  # elimina la coma de los miles
                total_deductions += Decimal(valor)

            # Imprime el total de descuentos
            #pdf.ln(4)

            #==========
            pdf.set_font("Arial", style="B",size=8)
            pdf.set_fill_color(192, 192, 192)  # Amarillo
            pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(153)
            pdf.cell(53, 4, 'TOTAL DESC (C):', 0, 0, 'L', 1)  # Agregamos el parámetro fill=1

            pdf.set_fill_color(192, 192, 192)  # Verde
            pdf.set_text_color(0, 0, 0)  # Negro
            #pdf.set_x(175)
            pdf.cell(0, 4, str(total_deductions), 0, 0, 'R', 1)  # Agregamos el parámetro fill=1 """

            #========================
            
            pdf.set_xy(x=150, y=20)  # Posición inicial
            pdf.set_font("Arial", style="B", size=10)
            pdf.cell(0, 4, "LOTE N°", border=0, align="C", ln=2)  # Título centrado, salto de línea
            pdf.set_font("Arial", size=10)  # Fuente normal (sin negrita)
            pdf.cell(0, 4, f"{str(fila[36])} - {int(fila[0])}", border=0, align="C")  # Datos centrados
            # Configura la posición del resto de la información en la parte oeste de la hoja
            #pdf.ln(20)
            pdf.set_xy(x=10, y=57)  # Posición x en la parte oeste de la hoja

            pdf.set_font("Arial", style="B",size=8)
            pdf.set_fill_color(192, 192, 192)  # Amarillo
            pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(153)
            pdf.cell(53, 4, 'TOTAL(A.B.C):', 0, 0, 'L', 1)
            pdf.cell(0, 4, "{:,.2f}".format(fila[32]), 0, 0, "R") 

            pdf.set_font("Arial", size=8) 
            pdf.ln(4)
            pdf.cell(165, 4, "BONO TRANS:", 0, 0, "R")
            pdf.cell(0, 4, "{:,.2f}".format(fila[30]), 0, 0, "R") 
            pdf.ln(4)
            pdf.cell(165, 4, "BONO EXTRA:", 0, 0, "R")
            pdf.cell(0, 4, "{:,.2f}".format(fila[31]), 0, 0, "R") 
            pdf.ln(4)

            pdf.set_font("Arial", style="B",size=8)
            pdf.set_fill_color(192, 192, 192)  # Amarillo
            pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(153)
            pdf.cell(53, 4, 'LIQUIDO PAGABLE:', 0, 0, 'L', 1)
            pdf.cell(0, 4, "{:,.2f}".format(fila[21]), 0, 0, "R") 

            pdf.ln(25)
            pdf.set_font("Arial", size=7)
            pdf.cell(60, 0,"Preparado Por",0,0,"C")
            pdf.cell(50, 0,"Autorizado Por",0,0,"L")
            pdf.cell(50, 0,"Sello",0,0,"L")
            pdf.cell(50, 0,"Recibi Conforme",0,1,"L")
            pdf.cell(160, 5,"Tranzado Por:",0,0,"R")
            pdf.cell(0, 5, str(fila[22]), 0, 1, "R")
    
        fecha_hora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        pdf.set_font("arial", "I", size=6)
        pdf.ln(0)
        pdf.cell(0, 5, txt=f"Fecha y hora de impresión:{fecha_hora}", border=0, align='L')    
        # Imprimir el nombre de usuario
        pdf.ln(5)
        if self.username:  # Verificar si el nombre de usuario está definido
            pdf.cell(0, 5, txt=f"Usuario: {self.username}", border=0, align='L', ln=1)
        
            #============================================= repor 2=========
        
        pdf.ln(10)
        pdf.set_xy(x=10, y=120)
        pdf.set_font('Arial', 'B', 7)
        pdf.image('logo menu 7.png', 10, 127, 30)
        #pdf.ln(3)
        pdf.cell(w=50, h=0, txt="EMPRESA MINERA VIRGEN DE COTOCA S.R.L.", ln=10, align='C', border=0, fill=0) 
        #pdf.set_font('Arial', 'B', 7)
        pdf.cell(w=365, h=0, txt="POTOSI-BOLIVIA", ln=10, align='C', border=0, fill=0)
        pdf.ln(5) 
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 0, 'LIQUIDACION   DE   MINERALES   EN   BROZA', 0, 1, 'C')
        pdf.ln(5) 

        
        for fila in datos:
            pdf.set_xy(x=40, y=130)
            #pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(30, 0,"Nombre Proveedor:",0,0,"L")
            pdf.set_font("Arial",size=7)
            pdf.cell(45, 0, str(fila[3]), 0, 0, "L")

            pdf.cell(2, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(15, 0,"CI:",0,0,"L")
            pdf.set_font("Arial",size=8)
            pdf.cell(29, 0, str(fila[4]), 0, 0, "L")

            #===============

            dias_semana = {
                0: "lunes",
                1: "martes",
                2: "miércoles",
                3: "jueves",
                4: "viernes",
                5: "sábado",
                6: "domingo"
            }

            # Define el diccionario para traducir el mes
            meses_espanol = {
                1: "enero",
                2: "febrero",
                3: "marzo",
                4: "abril",
                5: "mayo",
                6: "junio",
                7: "julio",
                8: "agosto",
                9: "septiembre",
                10: "octubre",
                11: "noviembre",
                12: "diciembre"
            }

            # Establece la fuente y el tamaño de la fuente
            pdf.set_font("Arial", size=8)

            # Escribe el título "Fecha de Liquidacion:"
            pdf.ln(4)
            pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B", size=8)
            pdf.cell(30, 0, "Fecha de Internacion:", 0, 0, "L")
            pdf.set_font("Arial", size=8)

            # Convierte la fecha de formato "2024-10-05" a "sábado, 5 de octubre de 2024"
            fecha = str(fila[1])  # asumiendo que fila[2] es la fecha en formato "2024-10-05"
            fecha_obj = datetime.strptime(fecha, "%Y-%m-%d")
            dia_semana = dias_semana[fecha_obj.weekday()]
            mes_espanol = meses_espanol[fecha_obj.month]
            fecha_formateada = f"{dia_semana}, {fecha_obj.day} de {mes_espanol} de {fecha_obj.year}"

            # Escribe la fecha formateada en el PDF
            pdf.cell(45, 0, fecha_formateada, 0, 0, "L")

            #===================

            pdf.cell(2, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(15, 0,"F-101:",0,0,"L")
            pdf.set_font("Arial",size=7)
            pdf.cell(29, 0, str(fila[9]), 0, 0, "L")

            #============

            dias_semana = {
                0: "lunes",
                1: "martes",
                2: "miércoles",
                3: "jueves",
                4: "viernes",
                5: "sábado",
                6: "domingo"
            }

            # Define el diccionario para traducir el mes
            meses_espanol = {
                1: "enero",
                2: "febrero",
                3: "marzo",
                4: "abril",
                5: "mayo",
                6: "junio",
                7: "julio",
                8: "agosto",
                9: "septiembre",
                10: "octubre",
                11: "noviembre",
                12: "diciembre"
            }

            # Establece la fuente y el tamaño de la fuente
            pdf.set_font("Arial", size=8)

            # Escribe el título "Fecha de Liquidacion:"
            pdf.ln(4)
            pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B", size=8)
            pdf.cell(30, 0, "Fecha de Liquidacion:", 0, 0, "L")
            pdf.set_font("Arial", size=8)

            # Convierte la fecha de formato "2024-10-05" a "sábado, 5 de octubre de 2024"
            fecha = str(fila[2])  # asumiendo que fila[2] es la fecha en formato "2024-10-05"
            fecha_obj = datetime.strptime(fecha, "%Y-%m-%d")
            dia_semana = dias_semana[fecha_obj.weekday()]
            mes_espanol = meses_espanol[fecha_obj.month]
            fecha_formateada = f"{dia_semana}, {fecha_obj.day} de {mes_espanol} de {fecha_obj.year}"

            # Escribe la fecha formateada en el PDF
            pdf.cell(45, 0, fecha_formateada, 0, 0, "L")

            #============
        
            pdf.cell(2, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(15, 0,"N° Tiquet:",0,0,"L")
            pdf.set_font("Arial",size=8)
            pdf.cell(29, 0, str(fila[7]), 0, 0, "L")


            pdf.ln(4)
            pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(30, 0,"Denominación:",0,0,"L")
            pdf.set_font("Arial",size=7)
            pdf.cell(45, 0, str(fila[5]), 0, 0, "L")

            pdf.cell(2, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(15, 0,"Mina:",0,0,"L")
            pdf.set_font("Arial",size=7)
            pdf.cell(29, 0, str(fila[8]), 0, 0, "L")

            pdf.ln(4)
            pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(30, 0,"Concesion:",0,0,"L")
            pdf.set_font("Arial",size=7)
            pdf.cell(45, 0, str(fila[10]), 0, 0, "L")

            pdf.cell(2, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(15, 0,"Municipio:",0,0,"L")
            pdf.set_font("Arial",size=7)
            pdf.cell(29, 0, str(fila[6]), 0, 0, "L")

            pdf.cell(2, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(20, 0,"Conjunto:",0,0,"L")
            pdf.set_font("Arial",size=7)
            pdf.cell(20, 0, str(fila[11]), 0, 0, "L") 

            #pdf.ln(5)
            #pdf.line(10, pdf.get_y(), 205, pdf.get_y())
            #pdf.ln(5)

            pdf.set_xy(x=10, y=150)
            #pdf.ln()
            pdf.set_font("Arial", style="B",size=8)

            pdf.set_draw_color(192, 192, 192)
            pdf.set_line_width(4)    
            pdf.rect(10, 152, 80, 0, "FD")
            #pdf.set_y(50)

            pdf.cell(20, 4,"P. NETO",0,0,"C")
            pdf.cell(20, 4,"H2O",0,0,"C")
            pdf.cell(20, 4,"T.M.S",0,0,"C")
            pdf.cell(20, 4,"T/C",0,0,"C")

            #retenciones
            pdf.set_font("Arial", style="B",size=8)
            pdf.set_draw_color(192, 192, 192)
            pdf.set_line_width(4)    
            pdf.rect(93, 152, 55, 0, "FD")
            pdf.cell(28, 4,"RETENCIONES",0,0,"C")
            pdf.cell(15, 4,"%",0,0,"C")
            pdf.cell(15, 4,"Bs.",0,0,"C")

            pdf.set_font("Arial", style="B",size=8)
            pdf.set_draw_color(192, 192, 192)
            pdf.set_line_width(4)    
            pdf.rect(153, 152, 53, 0, "FD")
            pdf.cell(60, 4,"OTROS DESCUENTOS",0,0,"C")
            pdf.ln(4)

            pdf.set_font("Arial", size=8)
            pdf.cell(20, 5, str(fila[12]), 0, 0, "R")
            pdf.cell(15, 5,"",0,0,"R")
            #pdf.cell(20, 5, str(fila[12]), 0, 0, "C")   
            pdf.cell(20, 5, str(fila[13]), 0, 0, "R") 
            pdf.cell(20, 5, str(fila[23]), 0, 0, "R")

            pdf.ln(5)
            pdf.set_font("Arial", style="B",size=8)

            pdf.set_draw_color(192, 192, 192)
            pdf.set_line_width(4)    
            pdf.rect(10, 161.5, 80, 0, "FD")

            pdf.cell(20, 5,"MINERAL",0,0,"L")
            pdf.cell(15, 5,"LEY",0,0,"C")
            pdf.cell(15, 5,"Pto.",0,0,"C")
            pdf.cell(15, 5,"Sus",0,0,"C")
            pdf.cell(15, 5,"Bs",0,1,"C")

            pdf.set_font("Arial",size=8)

            if fila [16] >0:

                pdf.cell(20, 5,"ZINC",0,0,"L")
                pdf.cell(15, 5, str(fila[16]), 0, 0, "R") 
                pdf.cell(15, 5,"",0,0,"R")
                #pdf.cell(15, 5, str(fila[16]), 0, 0, "R") 
                pdf.cell(15, 5, str(fila[26]), 0, 0, "R") 
                pdf.cell(15, 5, str(fila[29]), 0, 1, "R") 
            else:
                pdf.set_font("Times", style="I", size=9)

            if fila[14] > 0:

                pdf.cell(20, 5,"PLATA",0,0,"L")
                pdf.cell(15, 5, str(fila[14]), 0, 0, "R")
                pdf.cell(15, 5,"",0,0,"R")
                #pdf.cell(15, 5, str(fila[14]), 0, 0, "R")
                pdf.cell(15, 5, str(fila[24]), 0, 0, "R")
                pdf.cell(15, 5, str(fila[27]), 0, 1, "R") 
            else:
                pdf.set_font("Times", style="I", size=9)

            if fila[15] > 0:
                pdf.cell(20, 5,"PLOMO",0,0,"L")
                pdf.cell(15, 5, str(fila[15]), 0, 0, "R")
                pdf.cell(15, 5,"",0,0,"R")
                #pdf.cell(15, 5, str(fila[15]), 0, 0, "R")
                pdf.cell(15, 5, str(fila[25]), 0, 0, "R")
                pdf.cell(15, 4.5, str(fila[28]), 0, 1, "R")
            else:
                pdf.set_font("Times", style="I", size=9)

            #pdf.ln(5)
            pdf.set_font("Arial", style="B",size=8)
            #pdf.set_draw_color(192, 192, 192)
            pdf.set_fill_color(192, 192, 192)
            pdf.set_text_color(0, 0, 0)  # Negro
            #pdf.set_line_width(4)  
            pdf.set_x(10)
            #pdf.rect(10, 181, 80, 0, "FD")
            pdf.cell(40, 5, "IMPORTE TOTAL   (A)", 0, 0, "R",1)
            pdf.set_fill_color(192, 192, 192)
            pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(50)
            pdf.cell(40, 5,  "{:,.2f}".format(fila[18]), 0, 0, "R",1) 
            pdf.ln(4)

            #=====================================
            pdf.set_xy(x=93, y=155)  
            pdf.set_font("Arial", size=8) 
            
            for i, row in enumerate(results):
                for j, value in enumerate(row):
                
                    if j == 0:
                        pdf.set_x(93)
                        pdf.cell(15, 4, str(value), 0, 0, "L")  # print the first value on the left side
                    elif j == 2:
                        pdf.set_x(113)
                        pdf.cell(15, 4, str(value), 0, 0, "R") 
                    elif j == 1:
                        pdf.set_x(123)
                        pdf.cell(25, 4, str(value), 0, 0, "R")  # print the second value on the right side
                pdf.ln(4)

            # Totaliza los descuentos
            total_deductions = Decimal('0.00')
            for row in results:
                valor = row[1].replace(',', '')  # elimina la coma de los miles
                total_deductions += Decimal(valor)

            # Imprime el total de descuentos
            #pdf.ln(4)

            #==========
            pdf.set_font("Arial", style="B",size=8)
            pdf.set_fill_color(192, 192, 192)  # Amarillo
            pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(93)
            pdf.cell(40, 4, 'DESC. DE LEY (B)', 0, 0, 'L', 1)  # Agregamos el parámetro fill=1

            pdf.set_fill_color(192, 192, 192)  # Verde
            pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(120)
            pdf.cell(28, 4, str(total_deductions), 0, 0, 'R', 1)  # Agregamos el parámetro fill=1

            #========
            #pdf.set_font("Arial", size=8) 
            pdf.ln(5)
            num = Decimal(fila[21])
            letras = num_letras(num)
            pdf.cell(20, 4, "", 0, 0, "L")  # empty cell to align with the left side
            pdf.set_xy(x=153, y=185)
            pdf.cell(0, 4, letras, border=0, align='R')

            pdf.ln(20)
            #=====================

            pdf.set_font("Arial", size=8)  
            pdf.set_xy(x=153, y=155)  
            for i, row in enumerate(results1):
                for j, value in enumerate(row):
                
                    if j == 0:
                        pdf.set_x(153)
                        pdf.cell(25, 4, str(value), 0, 0, "L")  # print the first value on the left side
                    elif j == 1:
                        pdf.set_x(175)
                        pdf.cell(10, 4, str(value), 0, 0, "R") 
                    elif j == 2:
                        pdf.set_x(180)
                        pdf.cell(0, 4, str(value), 0, 0, "R")  # print the second value on the right side
                pdf.ln(4)


            # Totaliza los descuentos
            total_deductions = Decimal('0.00')
            for row in results1:
                valor = row[2].replace(',', '')  # elimina la coma de los miles
                total_deductions += Decimal(valor)

            # Imprime el total de descuentos
            #pdf.ln(4)

            #==========
            pdf.set_font("Arial", style="B",size=8)
            pdf.set_fill_color(192, 192, 192)  # Amarillo
            pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(153)
            pdf.cell(53, 4, 'TOTAL DESC (C):', 0, 0, 'L', 1)  # Agregamos el parámetro fill=1

            pdf.set_fill_color(192, 192, 192)  # Verde
            pdf.set_text_color(0, 0, 0)  # Negro
            #pdf.set_x(175)
            pdf.cell(0, 4, str(total_deductions), 0, 0, 'R', 1)  # Agregamos el parámetro fill=1 """

            #========================
            
            pdf.set_xy(x=150, y=130)
            pdf.set_font("Arial", style="B", size=10)
            pdf.cell(0, 4, "LOTE N°", border=0, align="C", ln=2)  # Título centrado, salto de línea
            pdf.set_font("Arial", size=10)  # Fuente normal (sin negrita)
            pdf.cell(0, 4, f"{str(fila[36])} - {int(fila[0])}", border=0, align="C")  # Datos centrados

            # Configura la posición del resto de la información en la parte oeste de la hoja
            
            pdf.set_xy(x=10, y=167)  # Posición x en la parte oeste de la hoja

            pdf.set_font("Arial", style="B",size=8)
            pdf.set_fill_color(192, 192, 192)  # Amarillo
            pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(153)
            pdf.cell(53, 4, 'TOTAL(A.B.C):', 0, 0, 'L', 1)
            pdf.cell(0, 4, "{:,.2f}".format(fila[32]), 0, 0, "R") 

            pdf.set_font("Arial", size=8) 
            pdf.ln(4)
            pdf.cell(165, 4, "BONO TRANS:", 0, 0, "R")
            pdf.cell(0, 4, "{:,.2f}".format(fila[30]), 0, 0, "R") 
            pdf.ln(4)
            pdf.cell(165, 4, "BONO EXTRA:", 0, 0, "R")
            pdf.cell(0, 4, "{:,.2f}".format(fila[31]), 0, 0, "R") 
            pdf.ln(4)

            pdf.set_font("Arial", style="B",size=8)
            pdf.set_fill_color(192, 192, 192)  # Amarillo
            pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(153)
            pdf.cell(53, 4, 'LIQUIDO PAGABLE:', 0, 0, 'L', 1)
            pdf.cell(0, 4, "{:,.2f}".format(fila[21]), 0, 0, "R") 

            pdf.ln(25)
            pdf.set_font("Arial", size=7)
            pdf.cell(60, 0,"Preparado Por",0,0,"C")
            pdf.cell(50, 0,"Autorizado Por",0,0,"L")
            pdf.cell(50, 0,"Sello",0,0,"L")
            pdf.cell(50, 0,"Recibi Conforme",0,1,"L")
            pdf.cell(160, 5,"Tranzado Por:",0,0,"R")
            pdf.cell(0, 5, str(fila[22]), 0, 1, "R")
    
        fecha_hora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        pdf.set_font("arial", "I", size=6)
        pdf.ln(0)
        pdf.cell(0, 5, txt=f"Fecha y hora de impresión:{fecha_hora}", border=0, align='L')    
        pdf.ln(5)
        if self.username:  # Verificar si el nombre de usuario está definido
            pdf.cell(0, 5, txt=f"Usuario: {self.username}", border=0, align='L', ln=1)


        #============================================= repor 3=========
                
        pdf.ln(10)
        pdf.set_xy(x=10, y=230)
        pdf.set_font('Arial', 'B', 7)
        pdf.image('logo menu 7.png', 10, 237, 30)
        #pdf.ln(3)
        pdf.cell(w=50, h=0, txt="EMPRESA MINERA VIRGEN DE COTOCA S.R.L.", ln=10, align='C', border=0, fill=0) 
        #pdf.set_font('Arial', 'B', 7)
        pdf.cell(w=365, h=0, txt="POTOSI-BOLIVIA", ln=10, align='C', border=0, fill=0)
        pdf.ln(5) 
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 0, 'LIQUIDACION   DE   MINERALES   EN   BROZA', 0, 1, 'C')
        pdf.ln(5) 

        for fila in datos:
            pdf.set_xy(x=40, y=240)
            #pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(30, 0,"Nombre Proveedor:",0,0,"L")
            pdf.set_font("Arial",size=7)
            pdf.cell(45, 0, str(fila[3]), 0, 0, "L")

            pdf.cell(2, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(15, 0,"CI:",0,0,"L")
            pdf.set_font("Arial",size=8)
            pdf.cell(29, 0, str(fila[4]), 0, 0, "L")

            #===============

            dias_semana = {
                0: "lunes",
                1: "martes",
                2: "miércoles",
                3: "jueves",
                4: "viernes",
                5: "sábado",
                6: "domingo"
            }

            # Define el diccionario para traducir el mes
            meses_espanol = {
                1: "enero",
                2: "febrero",
                3: "marzo",
                4: "abril",
                5: "mayo",
                6: "junio",
                7: "julio",
                8: "agosto",
                9: "septiembre",
                10: "octubre",
                11: "noviembre",
                12: "diciembre"
            }

            # Establece la fuente y el tamaño de la fuente
            pdf.set_font("Arial", size=8)

            # Escribe el título "Fecha de Liquidacion:"
            pdf.ln(4)
            pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B", size=8)
            pdf.cell(30, 0, "Fecha de Internacion:", 0, 0, "L")
            pdf.set_font("Arial", size=8)

            # Convierte la fecha de formato "2024-10-05" a "sábado, 5 de octubre de 2024"
            fecha = str(fila[1])  # asumiendo que fila[2] es la fecha en formato "2024-10-05"
            fecha_obj = datetime.strptime(fecha, "%Y-%m-%d")
            dia_semana = dias_semana[fecha_obj.weekday()]
            mes_espanol = meses_espanol[fecha_obj.month]
            fecha_formateada = f"{dia_semana}, {fecha_obj.day} de {mes_espanol} de {fecha_obj.year}"

            # Escribe la fecha formateada en el PDF
            pdf.cell(45, 0, fecha_formateada, 0, 0, "L")

            #===================

            pdf.cell(2, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(15, 0,"F-101:",0,0,"L")
            pdf.set_font("Arial",size=7)
            pdf.cell(29, 0, str(fila[9]), 0, 0, "L")

            #============

            dias_semana = {
                0: "lunes",
                1: "martes",
                2: "miércoles",
                3: "jueves",
                4: "viernes",
                5: "sábado",
                6: "domingo"
            }

            # Define el diccionario para traducir el mes
            meses_espanol = {
                1: "enero",
                2: "febrero",
                3: "marzo",
                4: "abril",
                5: "mayo",
                6: "junio",
                7: "julio",
                8: "agosto",
                9: "septiembre",
                10: "octubre",
                11: "noviembre",
                12: "diciembre"
            }

            # Establece la fuente y el tamaño de la fuente
            pdf.set_font("Arial", size=8)

            # Escribe el título "Fecha de Liquidacion:"
            pdf.ln(4)
            pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B", size=8)
            pdf.cell(30, 0, "Fecha de Liquidacion:", 0, 0, "L")
            pdf.set_font("Arial", size=8)

            # Convierte la fecha de formato "2024-10-05" a "sábado, 5 de octubre de 2024"
            fecha = str(fila[2])  # asumiendo que fila[2] es la fecha en formato "2024-10-05"
            fecha_obj = datetime.strptime(fecha, "%Y-%m-%d")
            dia_semana = dias_semana[fecha_obj.weekday()]
            mes_espanol = meses_espanol[fecha_obj.month]
            fecha_formateada = f"{dia_semana}, {fecha_obj.day} de {mes_espanol} de {fecha_obj.year}"

            # Escribe la fecha formateada en el PDF
            pdf.cell(45, 0, fecha_formateada, 0, 0, "L")

            #============
        
            pdf.cell(2, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(15, 0,"N° Tiquet:",0,0,"L")
            pdf.set_font("Arial",size=8)
            pdf.cell(29, 0, str(fila[7]), 0, 0, "L")


            pdf.ln(4)
            pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(30, 0,"Denominación:",0,0,"L")
            pdf.set_font("Arial",size=7)
            pdf.cell(45, 0, str(fila[5]), 0, 0, "L")

            pdf.cell(2, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(15, 0,"Mina:",0,0,"L")
            pdf.set_font("Arial",size=7)
            pdf.cell(29, 0, str(fila[8]), 0, 0, "L")

            pdf.ln(4)
            pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(30, 0,"Concesion:",0,0,"L")
            pdf.set_font("Arial",size=7)
            pdf.cell(45, 0, str(fila[10]), 0, 0, "L")

            pdf.cell(2, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(15, 0,"Municipio:",0,0,"L")
            pdf.set_font("Arial",size=7)
            pdf.cell(29, 0, str(fila[6]), 0, 0, "L")

            pdf.cell(2, 4, "", 0, 0, "L")
            pdf.set_font("Arial", style="B",size=8)
            pdf.cell(20, 0,"Conjunto:",0,0,"L")
            pdf.set_font("Arial",size=7)
            pdf.cell(20, 0, str(fila[11]), 0, 0, "L") 

            pdf.set_xy(x=10, y=262)
            #pdf.ln()
            pdf.set_font("Arial", style="B",size=8)

            pdf.set_draw_color(192, 192, 192)
            pdf.set_line_width(4)    
            pdf.rect(10, 264, 80, 0, "FD")
            #pdf.set_y(50)

            pdf.cell(20, 4,"P. NETO",0,0,"C")
            pdf.cell(20, 4,"H2O",0,0,"C")
            pdf.cell(20, 4,"T.M.S",0,0,"C")
            pdf.cell(20, 4,"T/C",0,0,"C")

            #retenciones
            pdf.set_font("Arial", style="B",size=8)
            pdf.set_draw_color(192, 192, 192)
            pdf.set_line_width(4)    
            pdf.rect(93, 264, 55, 0, "FD")
            pdf.cell(28, 4,"RETENCIONES",0,0,"C")
            pdf.cell(15, 4,"%",0,0,"C")
            pdf.cell(15, 4,"Bs.",0,0,"C")

            pdf.set_font("Arial", style="B",size=8)
            pdf.set_draw_color(192, 192, 192)
            pdf.set_line_width(4)    
            pdf.rect(153, 264, 53, 0, "FD")
            pdf.cell(60, 4,"OTROS DESCUENTOS",0,0,"C")
            pdf.ln(4)

            pdf.set_font("Arial", size=8)
            pdf.cell(20, 5, str(fila[12]), 0, 0, "R")
            pdf.cell(15, 5,"",0,0,"R")
            #pdf.cell(20, 5, str(fila[12]), 0, 0, "C")   
            pdf.cell(20, 5, str(fila[13]), 0, 0, "R") 
            pdf.cell(20, 5, str(fila[23]), 0, 0, "R")

            pdf.ln(5)
            pdf.set_font("Arial", style="B",size=8)

            pdf.set_draw_color(192, 192, 192)
            pdf.set_line_width(4)    
            pdf.rect(10, 273.5, 80, 0, "FD")

            pdf.cell(20, 5,"MINERAL",0,0,"L")
            pdf.cell(15, 5,"LEY",0,0,"C")
            pdf.cell(15, 5,"Pto.",0,0,"C")
            pdf.cell(15, 5,"Sus",0,0,"C")
            pdf.cell(15, 5,"Bs",0,1,"C")

            pdf.set_font("Arial",size=8)

            if fila [16] >0:

                pdf.cell(20, 5,"ZINC",0,0,"L")
                pdf.cell(15, 5, str(fila[16]), 0, 0, "R") 
                pdf.cell(15, 5,"",0,0,"R")
                #pdf.cell(15, 5, str(fila[16]), 0, 0, "R") 
                pdf.cell(15, 5, str(fila[26]), 0, 0, "R") 
                pdf.cell(15, 5, str(fila[29]), 0, 1, "R") 
            else:
                pdf.set_font("Times", style="I", size=9)

            if fila[14] > 0:

                pdf.cell(20, 5,"PLATA",0,0,"L")
                pdf.cell(15, 5, str(fila[14]), 0, 0, "R")
                pdf.cell(15, 5,"",0,0,"R")
                #pdf.cell(15, 5, str(fila[14]), 0, 0, "R")
                pdf.cell(15, 5, str(fila[24]), 0, 0, "R")
                pdf.cell(15, 5, str(fila[27]), 0, 1, "R") 
            else:
                pdf.set_font("Times", style="I", size=9)

            if fila[15] > 0:
                pdf.cell(20, 5,"PLOMO",0,0,"L")
                pdf.cell(15, 5, str(fila[15]), 0, 0, "R")
                pdf.cell(15, 5,"",0,0,"R")
                #pdf.cell(15, 5, str(fila[15]), 0, 0, "R")
                pdf.cell(15, 5, str(fila[25]), 0, 0, "R")
                pdf.cell(15, 4.5, str(fila[28]), 0, 1, "R")
            else:
                pdf.set_font("Times", style="I", size=9)

            #pdf.ln(5)
            pdf.set_font("Arial", style="B",size=8)
            #pdf.set_draw_color(192, 192, 192)
            pdf.set_fill_color(192, 192, 192)
            pdf.set_text_color(0, 0, 0)  # Negro
            #pdf.set_line_width(4)  
            pdf.set_x(10)
            #pdf.rect(10, 181, 80, 0, "FD")
            pdf.cell(40, 5, "IMPORTE TOTAL   (A)", 0, 0, "R",1)
            pdf.set_fill_color(192, 192, 192)
            pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(50)
            pdf.cell(40, 5,  "{:,.2f}".format(fila[18]), 0, 0, "R",1) 
            pdf.ln(4)
            #=====================================
            
            pdf.set_xy(x=93, y=267)  
            pdf.set_font("Arial", size=8) 
            
            for i, row in enumerate(results):
                for j, value in enumerate(row):
                
                    if j == 0:
                        pdf.set_x(93)
                        pdf.cell(15, 4, str(value), 0, 0, "L")  # print the first value on the left side
                    elif j == 2:
                        pdf.set_x(113)
                        pdf.cell(15, 4, str(value), 0, 0, "R") 
                    elif j == 1:
                        pdf.set_x(123)
                        pdf.cell(25, 4, str(value), 0, 0, "R")  # print the second value on the right side
                pdf.ln(4)

            # Totaliza los descuentos
            total_deductions = Decimal('0.00')
            for row in results:
                valor = row[1].replace(',', '')  # elimina la coma de los miles
                total_deductions += Decimal(valor)

            # Imprime el total de descuentos

            #==========
            pdf.set_font("Arial", style="B",size=8)
            pdf.set_fill_color(192, 192, 192)  # Amarillo
            pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(93)
            pdf.cell(40, 4, 'DESC. DE LEY (B)', 0, 0, 'L', 1)  # Agregamos el parámetro fill=1

            pdf.set_fill_color(192, 192, 192)  # Verde
            pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(120)
            pdf.cell(28, 4, str(total_deductions), 0, 0, 'R', 1)  # Agregamos el parámetro fill=1

            #========
            #pdf.set_font("Arial", size=8) 
            pdf.ln(5)
            num = Decimal(fila[21])
            letras = num_letras(num)
            pdf.cell(20, 4, "", 0, 0, "L")  # empty cell to align with the left side
            pdf.set_xy(x=153, y=296)
            pdf.cell(0, 4, letras, border=0, align='R')

            pdf.ln(20)
            #=====================

            pdf.set_font("Arial", size=8)  
            pdf.set_xy(x=153, y=267)  
            for i, row in enumerate(results1):
                for j, value in enumerate(row):
                
                    if j == 0:
                        pdf.set_x(153)
                        pdf.cell(25, 4, str(value), 0, 0, "L")  # print the first value on the left side
                    elif j == 1:
                        pdf.set_x(175)
                        pdf.cell(10, 4, str(value), 0, 0, "R") 
                    elif j == 2:
                        pdf.set_x(180)
                        pdf.cell(0, 4, str(value), 0, 0, "R")  # print the second value on the right side
                pdf.ln(4)


            # Totaliza los descuentos
            total_deductions = Decimal('0.00')
            for row in results1:
                valor = row[2].replace(',', '')  # elimina la coma de los miles
                total_deductions += Decimal(valor)

            #==========
            pdf.set_font("Arial", style="B",size=8)
            pdf.set_fill_color(192, 192, 192)  # Amarillo
            pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(153)
            pdf.cell(53, 4, 'TOTAL DESC (C):', 0, 0, 'L', 1)  # Agregamos el parámetro fill=1

            pdf.set_fill_color(192, 192, 192)  # Verde
            pdf.set_text_color(0, 0, 0)  # Negro
            #pdf.set_x(175)
            pdf.cell(0, 4, str(total_deductions), 0, 0, 'R', 1)  # Agregamos el parámetro fill=1 """

            #========================
            
            pdf.set_xy(x=150, y=240)
            pdf.set_font("Arial", style="B", size=10)
            pdf.cell(0, 4, "LOTE N°", border=0, align="C", ln=2)  # Título centrado, salto de línea
            pdf.set_font("Arial", size=10)  # Fuente normal (sin negrita)
            pdf.cell(0, 4, f"{str(fila[36])} - {int(fila[0])}", border=0, align="C")  # Datos centrados

            # Configura la posición del resto de la información en la parte oeste de la hoja
            
            pdf.set_xy(x=10, y=279)  # Posición x en la parte oeste de la hoja

            pdf.set_font("Arial", style="B",size=8)
            pdf.set_fill_color(192, 192, 192)  # Amarillo
            pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(153)
            pdf.cell(53, 4, 'TOTAL(A.B.C):', 0, 0, 'L', 1)
            pdf.cell(0, 4, "{:,.2f}".format(fila[32]), 0, 0, "R") 

            pdf.set_font("Arial", size=8) 
            pdf.ln(4)
            pdf.cell(165, 4, "BONO TRANS:", 0, 0, "R")
            pdf.cell(0, 4, "{:,.2f}".format(fila[30]), 0, 0, "R") 
            pdf.ln(4)
            pdf.cell(165, 4, "BONO EXTRA:", 0, 0, "R")
            pdf.cell(0, 4, "{:,.2f}".format(fila[31]), 0, 0, "R") 
            pdf.ln(4)

            pdf.set_font("Arial", style="B",size=8)
            pdf.set_fill_color(192, 192, 192)  # Amarillo
            pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(153)
            pdf.cell(53, 4, 'LIQUIDO PAGABLE:', 0, 0, 'L', 1)
            pdf.cell(0, 4, "{:,.2f}".format(fila[21]), 0, 0, "R") 

            pdf.ln(25)
            pdf.set_font("Arial", size=7)
            pdf.cell(60, 0,"Preparado Por",0,0,"C")
            pdf.cell(50, 0,"Autorizado Por",0,0,"L")
            pdf.cell(50, 0,"Sello",0,0,"L")
            pdf.cell(50, 0,"Recibi Conforme",0,1,"L")
            pdf.cell(160, 5,"Tranzado Por:",0,0,"R")
            pdf.cell(0, 5, str(fila[22]), 0, 1, "R")
    
        fecha_hora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        pdf.set_font("arial", "I", size=6)
        pdf.ln(0)
        pdf.cell(0, 5, txt=f"Fecha y hora de impresión:{fecha_hora}", border=0, align='L')    
        pdf.ln(5)
        if self.username:  # Verificar si el nombre de usuario está definido
            pdf.cell(0, 5, txt=f"Usuario: {self.username}", border=0, align='L', ln=1)


            #==============================================================

        # Guardar el archivo PDF
        filename = f"liquidacion {numlote}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        
        # Save the PDF in a specific folder (ensure the folder exists)
        output_folder = "liquidaciones"
        os.makedirs(output_folder, exist_ok=True)
        full_path = os.path.join(output_folder, filename)
        
        # Output the PDF to the specified path
        pdf.output(full_path)

        # Open the PDF automatically
        os.startfile(full_path)    
        
    def generar_repote_particular(self,numlote):

        valor = self.conboBoxNumLote3.value

        cone = CConection.ConexionBasedeDatos()
        cursor = cone.cursor()

        # Consulta SQL para extraer los datos
        query = """
                    
                select round((Liquidacion.NumLote),2),
                recepcion.Fecha, 
                FechaLiq, 
                Proveedores.NombresApellidos,
                recepcion.CarnetIdentidad, 
                clientes.Denominacion,
                recepcion.municipio, 
                recepcion.NumeroOrden, 
                Recepcion.Procedencia,
                recepcion.formulario_101,
                recepcion.concesion,
                NombreConjunto, 
                round((recepcion.Peso),0), 
                round((Kns),2),
                LeyesAgLiq, 
                LeyesPbLiq, 
                LeyesZnLiq,
                coalesce(Comprobantes.Egreso, 0) as Anticipo,
                round((VNetoBs),2),
                round((TotalRm),2),
                round((VTDescuentos),2),
                round((VTLiquidoPagable1),2),
                NumLetras,
                cotizaciones.TCSusDia,
                VPrecioAgSus,
                VPrecioPbSus,
                VPrecioZnSus,
                VPrecioAgBs,
                VPrecioPbBs,
                VPrecioZnBs,
                BonoTransporte,
                BonoExtra,
                Totalabc,
                TotalDescuentosLey,
                TotalImporteFinal,
                NombreInicial 
                from Recepcion 
                inner join Proveedores 
                on proveedores.NombresApellidos = recepcion.NombresApellidos 
                inner join clientes 
                on clientes.Denominacion = proveedores.Denominacion 
                inner join cotizaciones 
                on cotizaciones.Fecha = recepcion.Fecha 
                inner join leyes 
                on leyes.NumLote = recepcion.NumLote 
                inner join Liquidacion
                on liquidacion.NumLote = Recepcion.NumLote
                left join Comprobantes
                on Comprobantes.NumLote = Recepcion.NumLote 
                where recepcion.NumLote = %s

            """
        # Ejecutar la consulta y extraer los datos
        try:
            cursor.execute(query, (valor,))
            datos = cursor.fetchall()  # Leer todos los resultados
            
        except mysql.connector.Error as err:
            print("Error: {}".format(err))
            return

    #===============================retenciones

        # Get the NumLote value from the entry field
        numlote = self.conboBoxNumLote3.value

        cnx = CConection.ConexionBasedeDatos()
        
        # Create a cursor object
        cursor = cnx.cursor()

        # Execute the query
        query = """
            SELECT 
            NombreColumna, 
            FORMAT(Valor, 2) AS Valor,
            FORMAT(Porcentaje, 2) AS Porcentaje
            FROM (
            SELECT 
                'REGALIAS' AS NombreColumna, 
                L.Retenciones_Regalias AS Valor, 
                (L.Retenciones_Regalias / L.VNetoBs) * 100 AS Porcentaje,
                R.NumLote
            FROM Liquidacion L
            INNER JOIN Recepcion R ON L.NumLote = R.NumLote
            WHERE L.Retenciones_Regalias IS NOT NULL AND L.Retenciones_Regalias <> 0
            UNION ALL
            SELECT 
                'C.N.S.' AS NombreColumna, 
                L.VCns AS Valor, 
                (L.VCns / L.VNetoBs) * 100 AS Porcentaje,
                R.NumLote
            FROM Liquidacion L
            INNER JOIN Recepcion R ON L.NumLote = R.NumLote
            WHERE L.Retenciones_Fencomin IS NOT NULL AND L.VCns <> 0
            UNION ALL
            SELECT 
                'COMIBOL' AS NombreColumna, 
                L.VComibol AS Valor, 
                (L.VComibol / L.VNetoBs) * 100 AS Porcentaje,
                R.NumLote
            FROM Liquidacion L
            INNER JOIN Recepcion R ON L.NumLote = R.NumLote
            WHERE L.Retenciones_Fencomin IS NOT NULL AND L.VComibol <> 0
            UNION ALL  
            SELECT 
                'FENCOMIN' AS NombreColumna, 
                L.Retenciones_Fencomin AS Valor, 
                (L.Retenciones_Fencomin / L.VNetoBs) * 100 AS Porcentaje,
                R.NumLote
            FROM Liquidacion L
            INNER JOIN Recepcion R ON L.NumLote = R.NumLote
            WHERE L.Retenciones_Fencomin IS NOT NULL AND L.Retenciones_Fencomin <> 0
            UNION ALL
            SELECT 
                'FEDECOMIN' AS NombreColumna, 
                L.Retenciones_Fedecomin AS Valor, 
                (L.Retenciones_Fedecomin / L.VNetoBs) * 100 AS Porcentaje,
                R.NumLote
            FROM Liquidacion L
            INNER JOIN Recepcion R ON L.NumLote = R.NumLote
            WHERE L.Retenciones_Fedecomin IS NOT NULL AND L.Retenciones_Fedecomin <> 0
            UNION ALL
            SELECT 
                'COOPERATIVA' AS NombreColumna, 
                L.Retenciones_Cooperativa AS Valor, 
                (L.Retenciones_Cooperativa / L.VNetoBs) * 100 AS Porcentaje,
                R.NumLote
            FROM Liquidacion L
            INNER JOIN Recepcion R ON L.NumLote = R.NumLote
            WHERE L.Retenciones_Cooperativa IS NOT NULL AND L.Retenciones_Cooperativa <> 0
            UNION ALL
            SELECT 
                'COMUNIDAD' AS NombreColumna, 
                L.Retenciones_Comunidad AS Valor, 
                (L.Retenciones_Comunidad / L.VNetoBs) * 100 AS Porcentaje,
                R.NumLote
            FROM Liquidacion L
            INNER JOIN Recepcion R ON L.NumLote = R.NumLote
            WHERE L.Retenciones_Comunidad IS NOT NULL AND L.Retenciones_Comunidad <> 0
            UNION ALL
            SELECT 
                'DEPORTE' AS NombreColumna, 
                L.Retenciones_Deporte AS Valor, 
                (L.Retenciones_Deporte / L.VNetoBs) * 100 AS Porcentaje,
                R.NumLote
            FROM Liquidacion L
            INNER JOIN Recepcion R ON L.NumLote = R.NumLote
            WHERE L.Retenciones_Deporte IS NOT NULL AND L.Retenciones_Deporte <> 0
            UNION ALL
            SELECT 
                'A.F.P.' AS NombreColumna, 
                L.Retenciones_Afp AS Valor, 
                (L.Retenciones_Afp / L.VNetoBs) * 100 AS Porcentaje,
                R.NumLote
            FROM Liquidacion L
            INNER JOIN Recepcion R ON L.NumLote = R.NumLote
            WHERE L.Retenciones_Afp IS NOT NULL AND L.Retenciones_Afp <> 0
            ) AS T
            WHERE T.NumLote = %s
            LIMIT 0, 1000;
        """
        cursor.execute(query, (numlote,))

        # Fetch the results
        results = cursor.fetchall()
        
        # Get the column names from the cursor
        column_names = [desc[0] for desc in cursor.description]

        # Cerrar la conexión
        cursor.close()
        cone.close()

    #==============================================
        numlote = self.conboBoxNumLote3.value

        descuentos = {
            "transporte": self.var_transporte.value,
            "comprobante": self.var_comprobantes.value,
            "amortizaciones": self.var_amortizaciones.value
        }
        
        # Conectar a la base de datos
        cnx = CConection.ConexionBasedeDatos()
        
        cursor = cnx.cursor()
        
        # Construir la consulta SQL dinámicamente
        query_parts = []
        
        if not descuentos["transporte"]:
            query_parts.append("""
                SELECT 
                    'ANTICIPO P/P' AS NombreColumna, 
                    T.IdTRansporte AS Valor1,
                    T.Anticipo1 AS Valor,
                    R.NumLote
                FROM transporte T
                INNER JOIN Recepcion R ON T.NumLote = R.NumLote
                WHERE T.Anticipo1 IS NOT NULL
            """)
        
        if not descuentos["comprobante"]:
            query_parts.append("""
                SELECT 
                    'ANTICIPO' AS NombreColumna, 
                    C.IdComprobantes AS Valor1,
                    C.egreso AS Valor,
                    R.NumLote
                FROM Comprobantes C
                INNER JOIN Recepcion R ON C.NumLote = R.NumLote
                WHERE C.Egreso IS NOT NULL
            """)
        
        if not descuentos["amortizaciones"]:
            query_parts.append("""
                SELECT 
                    'ANTICIPO P' AS NombreColumna, 
                    a.idamortizaciones AS Valor1,
                    a.monto AS Valor,
                    R.NumLote
                FROM amortizaciones a
                INNER JOIN Recepcion R ON a.NumLote = R.NumLote
                WHERE a.monto IS NOT NULL
            """)
        
        if query_parts:
            query = " UNION ALL ".join(query_parts)
            query = f"""
                SELECT 
                    NombreColumna, 
                    CAST(Valor1 AS UNSIGNED) AS Valor1,
                    FORMAT(Valor, 2) AS Valor
                FROM ({query}) AS T
                WHERE T.NumLote = %s
                LIMIT 0, 1000;
            """
            
            cursor.execute(query, (numlote,))
            results1 = cursor.fetchall()
        
        # Get the column names from the cursor
        column_names = [desc[0] for desc in cursor.description]

        # Cerrar la conexión
        cursor.close()
        cone.close()
        
    #======================================================
    # Crear un PDF
        pdf = FPDF(format="legal", orientation="P")

        # Agregar una página
        pdf.add_page()

        pdf.ln(5)  
        pdf.set_font('Courier', 'B', 13)
        pdf.cell(0, 0, 'PROFORMA DE MINERAL', 0, 1, 'C')
        pdf.ln(7) 

        for fila in datos:
            pdf.set_xy(x=10, y=22)
            #pdf.cell(0, 4, "", 0, 0, "L")
            pdf.set_font("Courier", style="B",size=8)
            pdf.cell(20, 0,"Nombre",0,0,"L")
            pdf.set_font("Courier",size=7)
            pdf.cell(50, 0, str(fila[3]), 0, 0, "R")

            
            #============

            dias_semana = {
                0: "lunes",
                1: "martes",
                2: "miércoles",
                3: "jueves",
                4: "viernes",
                5: "sábado",
                6: "domingo"
            }

            # Define el diccionario para traducir el mes
            meses_espanol = {
                1: "enero",
                2: "febrero",
                3: "marzo",
                4: "abril",
                5: "mayo",
                6: "junio",
                7: "julio",
                8: "agosto",
                9: "septiembre",
                10: "octubre",
                11: "noviembre",
                12: "diciembre"
            }

            # Establece la fuente y el tamaño de la fuente
            pdf.set_font("Courier", size=8)

            # Escribe el título "Fecha de Liquidacion:"
            #pdf.ln(4)
            pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Courier", style="B", size=8)
            pdf.cell(30, 0, "Fecha de Pago:", 0, 0, "L")
            pdf.set_font("Courier", size=8)

            # Convierte la fecha de formato "2024-10-05" a "sábado, 5 de octubre de 2024"
            fecha = str(fila[2])  # asumiendo que fila[2] es la fecha en formato "2024-10-05"
            fecha_obj = datetime.strptime(fecha, "%Y-%m-%d")
            dia_semana = dias_semana[fecha_obj.weekday()]
            mes_espanol = meses_espanol[fecha_obj.month]
            fecha_formateada = f"{dia_semana}, {fecha_obj.day} de {mes_espanol} de {fecha_obj.year}"

            # Escribe la fecha formateada en el PDF
            pdf.cell(50, 0, fecha_formateada, 0, 0, "R")

            #============
        
            pdf.ln(3)
            pdf.set_font("Courier", style="B",size=7)
            pdf.cell(20, 7,"TABLILLA",1,0,"C")
            pdf.cell(15, 7,"LOTE NRO.",1,0,"C")
            pdf.cell(20, 7,"PESO BRUTO",1,0,"C")
            pdf.cell(20, 7,"PESO NETO",1,0,"C")
            pdf.cell(15, 7,"Zn %",1,0,"C")
            pdf.cell(15, 7,"Ag DM",1,0,"C")
            pdf.cell(15, 7,"Pb %",1,0,"C")
            #pdf.set_xy(x=165, y=23)
            #pdf.cell(20, 3.5, "PRECIO BRUTO (Bs)", 1, 0, 'C')
            

            pdf.multi_cell(25, 3.5, "     PRECIO\n   BRUTO (Bs)", 1, 0,"C")
                
            pdf.set_xy(x=155, y=25)
            pdf.multi_cell(25, 3.5, "   DESCUENTOS\n   DE LEY (Bs)", 1, 0, "C")
            pdf.set_xy(x=180, y=25)
            pdf.multi_cell(25, 3.5, "    IMPORTE\n   FINAL (Bs)", 1, 0, "C") 
                        
            pdf.set_font("Courier", size=9)
            pdf.ln(0)
            pdf.cell(20, 7, str(fila[7]), 1, 0, "C")   
            pdf.cell(15, 7, str(fila[0]), 1, 0, "C") 
            pdf.cell(20, 7, str(fila[12]), 1, 0, "C") 
            pdf.cell(20, 7, str(fila[13]), 1, 0, "C") 
            pdf.cell(15, 7, str(fila[16]), 1, 0, "C") # zinc
            pdf.cell(15, 7, str(fila[14]), 1, 0, "C") # #plomo
            pdf.cell(15, 7, str(fila[15]), 1, 0, "C") # plata
            pdf.cell(25, 7, str(fila[18]), 1, 0, "C")
            pdf.cell(25, 7, str(fila[33]), 1, 0, "C")
            pdf.cell(25, 7, "{0:,.2f}".format(fila[34]), 1, 0, "C")
            #pdf.cell(30, 5, str(fila[14]), 1, 0, "C")
            pdf.ln(7)
            
            pdf.set_xy(x=10, y=50)
            #pdf.ln()
            pdf.set_font("Courier", style="B",size=8)

            #=====================================
            
            pdf.set_font("Courier", size=8)  
            pdf.set_xy(x=153, y=40)  
            for i, row in enumerate(results1):
                for j, value in enumerate(row):
                
                    if j == 0:
                        pdf.set_x(140)
                        pdf.cell(40, 4, str(value), 0, 0, "L")  # print the first value on the left side
                    elif j == 1:
                        pdf.set_x(165)
                        pdf.cell(15, 4, str(value), 0, 0, "R") 
                    elif j == 2:
                        pdf.set_x(180)
                        pdf.cell(0, 4, str(value), 0, 0, "R")  # print the second value on the right side
                pdf.ln(4)

            pdf.set_xy(x=200, y=7)
            pdf.ln(4) 
            pdf.set_font("Courier", style="B", size=13) 
            #pdf.cell(340, 0,"LOTE N°",0,0,"C")
            pdf.ln(4) 
            pdf.cell(340, 0, f"{str(fila[35])} - {int(fila[0])}", border=0, align="C")  # Datos centrados

            #pdf.cell(340, 0, txt=f"SM-{int(fila[0])}", border=0, align='C')

            # Configura la posición del resto de la información en la parte oeste de la hoja
            
            pdf.set_xy(x=10, y=52)  # Posición x en la parte oeste de la hoja

            pdf.set_font("Courier", style="B",size=8)
            #pdf.set_fill_color(192, 192, 192)  # Amarillo
            #pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(140)
            pdf.cell(53, 4, 'IMPORTE PARCIAL:', 0, 0, 'L', 0)
            pdf.cell(0, 4, "{:,.2f}".format(fila[32]), 0, 0, "R") 

            pdf.set_font("Courier", size=8) 
            pdf.ln(4)
            pdf.cell(151, 4, "BONO TRANS:", 0, 0, "R")
            pdf.cell(0, 4, "{:,.2f}".format(fila[30]), 0, 0, "R") 
            pdf.ln(4)
            pdf.cell(151, 4, "BONO EXTRA:", 0, 0, "R")
            pdf.cell(0, 4, "{:,.2f}".format(fila[31]), 0, 0, "R") 
            pdf.ln(4)

            pdf.set_font("Courier", style="B",size=8)
            #pdf.set_fill_color(192, 192, 192)  # Amarillo
            #pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(140)
            pdf.cell(53, 4, 'LIQUIDO PAGABLE:', 0, 0, 'L', 0)
            pdf.cell(0, 4, "{:,.2f}".format(fila[21]), 0, 0, "R") 

            pdf.ln(20)
            pdf.set_font("Courier", size=7)
            pdf.cell(60, 0,"Preparado Por",0,0,"C")
            pdf.cell(50, 0,"Autorizado Por",0,0,"L")
            pdf.cell(50, 0,"Cajero",0,0,"L")
            pdf.cell(50, 0,"Recibi Conforme",0,0,"L")
    
        fecha_hora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        pdf.set_font("Courier", "I", size=6)
        pdf.ln(3)
        pdf.cell(0, 5, txt=f"Fecha y hora de impresión:{fecha_hora}", border=0, align='L')

        #========================= copia 1=================
        pdf.set_y(y=92)
        pdf.ln(20)  
        pdf.set_font('Courier', 'B', 13)
        pdf.cell(0, 0, 'PROFORMA DE MINERAL', 0, 1, 'C')
        pdf.ln(5) 

        for fila in datos:
            pdf.set_xy(x=10, y=120)
            #pdf.cell(0, 4, "", 0, 0, "L")
            pdf.set_font("Courier", style="B",size=8)
            pdf.cell(20, 0,"Nombre",0,0,"L")
            pdf.set_font("Courier",size=7)
            pdf.cell(50, 0, str(fila[3]), 0, 0, "R")

            #============

            dias_semana = {
                0: "lunes",
                1: "martes",
                2: "miércoles",
                3: "jueves",
                4: "viernes",
                5: "sábado",
                6: "domingo"
            }

            # Define el diccionario para traducir el mes
            meses_espanol = {
                1: "enero",
                2: "febrero",
                3: "marzo",
                4: "abril",
                5: "mayo",
                6: "junio",
                7: "julio",
                8: "agosto",
                9: "septiembre",
                10: "octubre",
                11: "noviembre",
                12: "diciembre"
            }

            # Establece la fuente y el tamaño de la fuente
            pdf.set_font("Courier", size=8)

            # Escribe el título "Fecha de Liquidacion:"
            #pdf.ln(4)
            pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Courier", style="B", size=8)
            pdf.cell(30, 0, "Fecha de Pago:", 0, 0, "L")
            pdf.set_font("Courier", size=8)

            # Convierte la fecha de formato "2024-10-05" a "sábado, 5 de octubre de 2024"
            fecha = str(fila[2])  # asumiendo que fila[2] es la fecha en formato "2024-10-05"
            fecha_obj = datetime.strptime(fecha, "%Y-%m-%d")
            dia_semana = dias_semana[fecha_obj.weekday()]
            mes_espanol = meses_espanol[fecha_obj.month]
            fecha_formateada = f"{dia_semana}, {fecha_obj.day} de {mes_espanol} de {fecha_obj.year}"

            # Escribe la fecha formateada en el PDF
            pdf.cell(50, 0, fecha_formateada, 0, 0, "R")

            #============
        
            pdf.set_xy(x=10, y=120)
            pdf.ln(3)
            pdf.set_font("Courier", style="B",size=7)
            pdf.cell(20, 7,"TABLILLA",1,0,"C")
            pdf.cell(15, 7,"LOTE NRO.",1,0,"C")
            pdf.cell(20, 7,"PESO BRUTO",1,0,"C")
            pdf.cell(20, 7,"PESO NETO",1,0,"C")
            pdf.cell(15, 7,"Zn %",1,0,"C")
            pdf.cell(15, 7,"Ag DM",1,0,"C")
            pdf.cell(15, 7,"Pb %",1,0,"C")
  
            pdf.multi_cell(25, 3.5, "     PRECIO\n   BRUTO (Bs)", 1, 0,"C")                
            pdf.set_xy(x=155, y=123)
            pdf.multi_cell(25, 3.5, "   DESCUENTOS\n   DE LEY (Bs)", 1, 0, "C")
            pdf.set_xy(x=180, y=123)
            pdf.multi_cell(25, 3.5, "    IMPORTE\n   FINAL (Bs)", 1, 0, "C") 
                                 
            pdf.set_font("Courier", size=9)
            pdf.ln(0)
            pdf.cell(20, 7, str(fila[7]), 1, 0, "C")   
            pdf.cell(15, 7, str(fila[0]), 1, 0, "C") 
            pdf.cell(20, 7, str(fila[12]), 1, 0, "C") 
            pdf.cell(20, 7, str(fila[13]), 1, 0, "C") 
            pdf.cell(15, 7, str(fila[16]), 1, 0, "C") 
            pdf.cell(15, 7, str(fila[14]), 1, 0, "C") 
            pdf.cell(15, 7, str(fila[15]), 1, 0, "C") 
            pdf.cell(25, 7, str(fila[18]), 1, 0, "C")
            pdf.cell(25, 7, str(fila[33]), 1, 0, "C")
            pdf.cell(25, 7, "{0:,.2f}".format(fila[34]), 1, 0, "C")
            #pdf.cell(30, 5, str(fila[14]), 1, 0, "C")
            pdf.ln(7)

            pdf.set_xy(x=10, y=142)
            #pdf.ln()
            pdf.set_font("Courier", style="B",size=8)
           
            pdf.set_font("Courier", size=8)  
            pdf.set_xy(x=153, y=140)  
            for i, row in enumerate(results1):
                for j, value in enumerate(row):
                
                    if j == 0:
                        pdf.set_x(140)
                        pdf.cell(40, 4, str(value), 0, 0, "L")  # print the first value on the left side
                    elif j == 1:
                        pdf.set_x(165)
                        pdf.cell(15, 4, str(value), 0, 0, "R") 
                    elif j == 2:
                        pdf.set_x(180)
                        pdf.cell(0, 4, str(value), 0, 0, "R")  # print the second value on the right side
                pdf.ln(4)

            pdf.set_xy(x=200, y=103)
            pdf.ln(4) 
            pdf.set_font("Courier", style="B", size=13) 
            #pdf.cell(340, 0,"LOTE N°",0,0,"C")
            pdf.ln(4) 
            pdf.cell(340, 0, f"{str(fila[35])} - {int(fila[0])}", border=0, align="C")  # Datos centrados
            #pdf.cell(340, 0, txt=f"SM-{int(fila[0])}", border=0, align='C')

            # Configura la posición del resto de la información en la parte oeste de la hoja
            
            pdf.set_xy(x=10, y=153)  # Posición x en la parte oeste de la hoja

            pdf.set_font("Courier", style="B",size=8)
            #pdf.set_fill_color(192, 192, 192)  # Amarillo
            #pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(140)
            pdf.cell(53, 4, 'IMPORTE PARCIAL:', 0, 0, 'L', 0)
            pdf.cell(0, 4, "{:,.2f}".format(fila[32]), 0, 0, "R") 

            pdf.set_font("Courier", size=8) 
            pdf.ln(4)
            pdf.cell(151, 4, "BONO TRANS:", 0, 0, "R")
            pdf.cell(0, 4, "{:,.2f}".format(fila[30]), 0, 0, "R") 
            pdf.ln(4)
            pdf.cell(151, 4, "BONO EXTRA:", 0, 0, "R")
            pdf.cell(0, 4, "{:,.2f}".format(fila[31]), 0, 0, "R") 
            pdf.ln(4)

            pdf.set_font("Courier", style="B",size=8)
            #pdf.set_fill_color(192, 192, 192)  # Amarillo
            #pdf.set_text_color(0, 0, 0)  # Negro
            pdf.set_x(140)
            pdf.cell(53, 4, 'LIQUIDO PAGABLE:', 0, 0, 'L', 0)
            pdf.cell(0, 4, "{:,.2f}".format(fila[21]), 0, 0, "R") 

            pdf.ln(20)
            pdf.set_font("Courier", size=7)
            pdf.cell(60, 0,"Preparado Por",0,0,"C")
            pdf.cell(50, 0,"Autorizado Por",0,0,"L")
            pdf.cell(50, 0,"Cajero",0,0,"L")
            pdf.cell(50, 0,"Recibi Conforme",0,0,"L")
    
        fecha_hora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        pdf.set_font("Courier", "I", size=6)
        pdf.ln(0)
        pdf.cell(0, 10, txt=f"Fecha y hora de impresión:{fecha_hora}", border=0, align='L')


        #========================= copia 2=================
       

        #====================================================
        
        # Guardar el archivo PDF
        filename = f"liquidacion_particular {numlote}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        
        # Save the PDF in a specific folder (ensure the folder exists)
        output_folder = "liquidaciones_particular"
        os.makedirs(output_folder, exist_ok=True)
        full_path = os.path.join(output_folder, filename)
        
        # Output the PDF to the specified path
        pdf.output(full_path)

        # Open the PDF automatically
        os.startfile(full_path)   


class FrameSiete(ft.Control):

    def __init__(self, page):
        super().__init__()
        self.page = page
        self.controls = []  # Inicializa el atributo controls como una lista vacía
        self.create_ui_elements()  # Llama a un método para crear los elementos de la interfaz

    def create_ui_elements(self):
        # Agrega widgets a la lista controls
        self.controls.append(
            ft.Text("Este es el Frame Siete", size=20, color=ft.Colors.BLACK)
        )
        self.controls.append(
            ft.ElevatedButton("Botón en Frame Siete", on_click=self.on_button_click)
        )

    def on_button_click(self, e):
        print("Botón en Frame Siete clickeado")



class FrameOcho(ft.Control):
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.controls = []
        self.base_size = 18  # Tamaño base de los bloques
        self.size = self.base_size
        self.gap = 3
        self.duration = 2000
        self.running = True
        
        # Colores para cada letra
        self.c1 = ft.Colors.PINK_500      # C
        self.c2 = ft.Colors.AMBER_500     # A
        self.c3 = ft.Colors.LIGHT_GREEN_500  # J
        self.c4 = ft.Colors.DEEP_PURPLE_500  # A
        self.c5 = ft.Colors.BLUE_500      # U
        self.c6 = ft.Colors.ORANGE_500    # N
        self.c7 = ft.Colors.CYAN_500      # O
        
        # Todos los colores disponibles para el modo aleatorio
        self.all_colors = [
            ft.Colors.AMBER_400, ft.Colors.AMBER_ACCENT_400, ft.Colors.BLUE_400,
            ft.Colors.BROWN_400, ft.Colors.CYAN_700, ft.Colors.DEEP_ORANGE_500,
            ft.Colors.CYAN_500, ft.Colors.INDIGO_600, ft.Colors.ORANGE_ACCENT_100,
            ft.Colors.PINK, ft.Colors.RED_600, ft.Colors.GREEN_400,
            ft.Colors.GREEN_ACCENT_200, ft.Colors.TEAL_ACCENT_200, ft.Colors.LIGHT_BLUE_500
        ]
        
        # Definición de las letras (fila, columna, color) - 3 de ancho x 5 de alto
        self.parts = [
            # Letra C (3x5)
            (0, 0, self.c1), (0, 1, self.c1), (0, 2, self.c1),
            (1, 0, self.c1),
            (2, 0, self.c1),
            (3, 0, self.c1),
            (4, 0, self.c1), (4, 1, self.c1), (4, 2, self.c1),
            
            # Espacio entre letras (1 columna)
            
            # Letra A (3x5)
            (0, 4, self.c2), (0, 5, self.c2), (0, 6, self.c2),
            (1, 4, self.c2), (1, 6, self.c2),
            (2, 4, self.c2), (2, 5, self.c2), (2, 6, self.c2),
            (3, 4, self.c2), (3, 6, self.c2),
            (4, 4, self.c2), (4, 6, self.c2),
            
            # Espacio
            
            # Letra J (3x5)
            (0, 8, self.c3), (0, 9, self.c3), (0, 10, self.c3),
            (1, 9, self.c3),
            (2, 9, self.c3),
            (3, 8, self.c3), (3, 9, self.c3),
            (4, 8, self.c3), (4, 9, self.c3),
            
            # Espacio
            
            # Letra A (3x5) - Segunda A
            (0, 12, self.c4), (0, 13, self.c4), (0, 14, self.c4),
            (1, 12, self.c4), (1, 14, self.c4),
            (2, 12, self.c4), (2, 13, self.c4), (2, 14, self.c4),
            (3, 12, self.c4), (3, 14, self.c4),
            (4, 12, self.c4), (4, 14, self.c4),
            
            # Espacio entre palabras (2 columnas)
            
            # Letra U (3x5)
            (0, 17, self.c5), (0, 19, self.c5),
            (1, 17, self.c5), (1, 19, self.c5),
            (2, 17, self.c5), (2, 19, self.c5),
            (3, 17, self.c5), (3, 19, self.c5),
            (4, 17, self.c5), (4, 18, self.c5), (4, 19, self.c5),
            
            # Espacio
            
            # Letra N (3x5)
            (0, 21, self.c6), (0, 23, self.c6),
            (1, 21, self.c6), (1, 22, self.c6), (1, 23, self.c6),
            (2, 21, self.c6), (2, 22, self.c6), (2, 23, self.c6),
            (3, 21, self.c6), (3, 22, self.c6), (3, 23, self.c6),
            (4, 21, self.c6), (4, 23, self.c6),
            
            # Espacio
            
            # Letra O (3x5)
            (0, 25, self.c7), (0, 26, self.c7), (0, 27, self.c7),
            (1, 25, self.c7), (1, 27, self.c7),
            (2, 25, self.c7), (2, 27, self.c7),
            (3, 25, self.c7), (3, 27, self.c7),
            (4, 25, self.c7), (4, 26, self.c7), (4, 27, self.c7)
        ]
        
        # Crear el Stack principal
        self.canvas = ft.Stack(
            expand=True,
            animate_scale=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
            animate_opacity=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
        )
        
        # Crear los bloques
        for _ in range(len(self.parts)):
            self.canvas.controls.append(
                ft.Container(
                    animate=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
                    animate_position=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
                    animate_rotation=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
                    animate_scale=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
                )
            )
        
        # Contenedor principal
        self.main_container = ft.Container(
            self.canvas,
            expand=True
        )
        
        self.controls.append(self.main_container)
        self.assemble()  # Iniciar en estado formado
        
        # Escuchar cambios de tamaño de la pantalla
        self.page.on_resize = self.on_page_resize
        
        # Iniciar animación automática
        self.animation_thread = threading.Thread(target=self.auto_animate, daemon=True)
        self.animation_thread.start()
    
    def on_page_resize(self, e):
        """Ajusta el tamaño de los bloques cuando cambia el tamaño de la pantalla"""
        if self.page.width < 600:  # Pantallas pequeñas (móviles)
            self.size = self.base_size * 0.7
            self.gap = 2
        elif self.page.width < 900:  # Pantallas medianas (tablets)
            self.size = self.base_size * 0.9
            self.gap = 2.5
        else:  # Pantallas grandes (escritorio)
            self.size = self.base_size
            self.gap = 3
        
        self.assemble()
    
    def auto_animate(self):
        """Animación automática que alterna entre los estados"""
        while self.running:
            time.sleep(5)
            if not self.running:
                break
            self.randomize(None)
            
            time.sleep(5)
            if not self.running:
                break
            self.assemble(None)
    
    def randomize(self, e):
        """Desordena los bloques aleatoriamente"""
        random.seed()
        for i in range(len(self.parts)):
            c = self.canvas.controls[i]
            part_size = random.randrange(int(self.size * 1.5), int(self.size * 4))
            c.left = random.randrange(0, int(self.page.width * 0.8))
            c.top = random.randrange(0, int(self.page.height * 0.8))
            c.bgcolor = self.all_colors[random.randrange(0, len(self.all_colors))]
            c.width = part_size
            c.height = part_size
            c.border_radius = random.randrange(0, int(self.size * 2))
            c.rotate = ft.transform.Rotate(random.randrange(0, 360) * 2 * pi / 360)
            c.scale = ft.transform.Scale(random.uniform(0.7, 1.3))
        
        self.canvas.scale = ft.transform.Scale(1)
        self.canvas.opacity = 1
        self.update()
    
    def assemble(self, e=None):
        """Forma las letras 'CAJA UNO' centradas con bloques de 3x5"""
        # Calculamos el ancho total basado en la posición más a la derecha
        max_col = max([col for (row, col, color) in self.parts])
        total_width = (max_col + 1) * (self.size + self.gap)
        
        # Altura basada en 5 filas (tamaño de las letras)
        total_height = 5 * (self.size + self.gap)
        
        center_x = (self.page.width - total_width) / 2
        center_y = (self.page.height - total_height) / 2
        
        for i, (row, col, bgcolor) in enumerate(self.parts):
            c = self.canvas.controls[i]
            c.left = center_x + col * (self.size + self.gap)
            c.top = center_y + row * (self.size + self.gap)
            c.bgcolor = bgcolor
            c.width = self.size
            c.height = self.size
            c.border_radius = 5
            c.rotate = ft.transform.Rotate(0)
            c.scale = ft.transform.Scale(1)
        
        self.canvas.scale = ft.transform.Scale(1)
        self.canvas.opacity = 1
        self.update()
    
    def will_unmount(self):
        """Detener animaciones al desmontar el componente"""
        self.running = False
        if self.animation_thread and self.animation_thread.is_alive():
            self.animation_thread.join(timeout=1)



class FrameOchoUno(ft.Control):
    def __init__(self, page,username=None):
        super().__init__()
        self.page = page
        self.data_entries = []
        self.selected_index = None
        self.filtered_entries = []
        self.dropdownAntiguoNombre = None  # Inicializa el atributo aquí
        self.username = username  # Propiedad para almacenar el nombre de usuario
        self.create_ui_elements()
        self.actualizarListView() 
        self.conboBox_Nombre_gasto()
        self.cola_mensajes = queue.Queue()  # Cola para almacenar los mensajes
        self.mostrando_mensaje = False      # Bandera para controlar si se está mostrando un mensaje
        self.start_auto_update()  # Iniciar la actualización automática

    def start_auto_update(self):
        def update_loop():
            while True:
                self.actualizarListView()  # Actualizar el ListView
                time.sleep(10)  # Esperar 10 segundos antes de la próxima actualización

        # Crear un hilo para ejecutar el bucle de actualización
        threading.Thread(target=update_loop, daemon=True).start()

    def create_ui_elements(self):
        # Crear los widgets con tamaños ajustados
        self.texboxidcomprobante = ft.TextField(label="Número de Com.",text_align=ft.TextAlign.RIGHT, width=400, height=50, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE),on_submit=self.buscar_numero_comprobante)
        self.texboxtipogasto1 = ft.Dropdown(label="Tipo Gastp",text_align=ft.TextAlign.RIGHT, width=400, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE),options=[])
        self.texboxfechacomp= ft.TextField(label="Fecha ", width=400, height=50, value=datetime.today().strftime('%Y-%m-%d'),text_size=15, border_color="teal", border_radius=10,border=ft.border.all(5, ft.Colors.WHITE))
        #self.texboxfechacomp = ft.TextField(label="Fecha",text_align=ft.TextAlign.RIGHT, width=400, height=50, text_size=18, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texboxnumerolote = ft.TextField(label="Lote",text_align=ft.TextAlign.RIGHT, width=400, height=50, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE),suffix=ft.IconButton(icon=ft.Icons.SEARCH,icon_color=Colors.TEAL,on_click=self.buscadorrecepcion,))
        self.texbox_nombres_apellidos = ft.TextField(label="Nombre",text_align=ft.TextAlign.RIGHT, width=400, height=50, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE) ,suffix=ft.IconButton(icon=ft.Icons.SEARCH,icon_color=Colors.TEAL,on_click=self.frame_tres_dialog))
        self.texboxglosa = ft.TextField(label="Glosa",text_align=ft.TextAlign.RIGHT,width=820, min_lines=1, max_lines=None, text_size=15,border_color="teal",border_radius=10,border=ft.border.all(0, ft.Colors.WHITE),multiline=True, expand=True,)
        #self.texbox6 = ft.TextField(label="6",text_align=ft.TextAlign.RIGHT, width=0, height=50, text_size=18, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE), multiline=True)
        #self.texbox7 = ft.TextField(label="7",text_align=ft.TextAlign.RIGHT, width=200, height=50, text_size=18, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texboxingreso = ft.TextField(label="Ingreso",text_align=ft.TextAlign.RIGHT, width=130, height=50, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE), on_change=self.actualizar_saldo)
        self.texboxegreso = ft.TextField(label="Egreso",text_align=ft.TextAlign.RIGHT, width=130, height=50, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE), on_change=self.actualizar_saldo)
        self.texboxsaldo = ft.TextField(label="Saldo",text_align=ft.TextAlign.RIGHT, width=130, height=50, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))

        self.radio_group = ft.RadioGroup(
            content=ft.Row(  # Usar ft.Row en lugar de ft.Column
                controls=[
                    ft.Radio(value="1", label="Egreso"),
                    ft.Radio(value="2", label="Ingreso"),
                ],
                spacing=5 # Espacio entre los radios
            ),
            value="1"  # Establecer el valor predeterminado
        )

        # Títulos de las columnas
        self.column_titles = Row(
            controls=[
                Text("     Comp", width=70, weight="bold", size=12),
                Text("     Cuenta", width=150, weight="bold", size=12),
                Text("fecha", width=80, weight="bold", size=12),
                Text("Lote", width=70, weight="bold", size=12),
                Text("Nombres y Apellidos", width=150, weight="bold", size=12),
                Text("Glosa", width=390, weight="bold", size=12),
                Text("Ingreso", width=100, weight="bold", size=12),
                Text("Salida", width=100, weight="bold", size=12),
                Text("Saldo", width=100, weight="bold", size=12),
            ],
            
            spacing=15,
            expand=True,
        )

        # ListView para mostrar los datos
        self.listview = ListView(
            expand=True,
            spacing=5,
            padding=5,
            auto_scroll=True,
        )

        # Botones con el mismo tamaño
        self.boton_visualizar_caja = ElevatedButton(
            text="VISUALIZAR", on_click=self.generar_reporte_comprobantes_editar, width=200,height=35,
            bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=self.on_hover_boton_visualizar_rec
        )
        self.boton_guardar_caja = ElevatedButton(
            text="GUARDAR", on_click=self.guardarregistros_caja, width=200,height=35,
            bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=self.on_hover_boton_guardar_rec
        )
        self.boton_editar_caja = ElevatedButton(
        text="EDITAR", on_click=self.ModificarComprobante, width=200,height=35,
            bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=self.on_hover_boton_editar_rec
        )
        self.boton_eliminar_caja = ElevatedButton(
            text="ELIMINAR", on_click=self.EliminarComprobante, width=200,height=35,
            bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=self.on_hover_boton_eliminar_rec
        )

        self.selected_row_index = None

        # Título principal
        self.title_container = ft.Container(
            content=ft.Text(
                value="REGISTRO DE INGRESOS Y EGRESOS",
                size=24,
                weight="bold",
                color=ft.Colors.TEAL,
                text_align=ft.TextAlign.CENTER
            ),
            alignment=ft.alignment.center,
            padding=0
        )

        # Contenedor de color teal con inputs de borde blanco
        self.teal_container = ft.Container(
            
            #bgcolor="#0f386a",
            padding=10,
            content=ft.Column(
                controls=[
                    ft.ResponsiveRow(
                        controls=[
                            ft.Column(controls=[self.texboxtipogasto1], col={"xs": 12, "sm": 6, "md": 6, "lg": 6, "xl": 6}),
                            ft.Column(controls=[self.texboxfechacomp], col={"xs": 12, "sm": 6, "md": 6, "lg": 6, "xl": 6}),
                            ft.Column(controls=[self.texboxnumerolote], col={"xs": 12, "sm": 6, "md": 6, "lg": 6, "xl": 6}),
                            ft.Column(controls=[self.texbox_nombres_apellidos], col={"xs": 12, "sm": 6, "md": 6, "lg": 6, "xl": 6}),
                            ft.Column(controls=[self.texboxglosa], col={"xs": 12, "sm": 6, "md": 6, "lg": 12, "xl": 12}),
                            #ft.Column(controls=[self.texBox6], col={"xs": 12, "sm": 6, "md": 6, "lg": 6, "xl": 6}),

                        ],
                        alignment=ft.MainAxisAlignment.CENTER,
                        
                        spacing=10,
                    ),
                ],
                scroll=ft.ScrollMode.AUTO,
                expand=True  # Ajusta la altura según sea necesario
            ),
            expand=True,
            
            border_radius=10
        )

        self.black_container = ft.Container(
            
            #bgcolor="#0f386a",
            padding=10,
            content=ft.Column(
                controls=[
                    ft.ResponsiveRow(
                        controls=[
                            ft.Column(controls=[self.radio_group], col={"xs": 12, "sm": 6, "md": 12, "lg": 12, "xl": 12}),
                            ft.Column(controls=[self.texboxidcomprobante], col={"xs": 12, "sm": 6, "md": 12, "lg": 12, "xl": 12}),
                        ],
                        #alignment=ft.MainAxisAlignment.CENTER,
                        
                        spacing=10,
                    ),
                ],
                scroll=ft.ScrollMode.AUTO,
                expand=True  # Ajusta la altura según sea necesario
            ),
            expand=True,
            
            border_radius=10
        )

        self.orange_container = ft.Container(
            
            #bgcolor="#0f386a",
            padding=10,
            content=ft.Column(
                controls=[
                    ft.ResponsiveRow(
                        controls=[
                            ft.Column(controls=[], col={"xs": 12, "sm": 6, "md": 4, "lg": 1.33, "xl": 1.33}),
                            ft.Column(controls=[], col={"xs": 12, "sm": 6, "md": 4, "lg": 1.33, "xl": 1.33}),
                            ft.Column(controls=[], col={"xs": 12, "sm": 6, "md": 4, "lg": 1.33, "xl": 1.33}),
                            ft.Column(controls=[], col={"xs": 12, "sm": 6, "md": 4, "lg": 1.33, "xl": 1.33}),
                            ft.Column(controls=[], col={"xs": 12, "sm": 6, "md": 4, "lg": 1.33, "xl": 1.33}),
                            ft.Column(controls=[], col={"xs": 12, "sm": 6, "md": 4, "lg": 1.33, "xl": 1.33}),
                            ft.Column(controls=[self.texboxingreso], col={"xs": 12, "sm": 6, "md": 4, "lg": 1.33, "xl": 1.33}),
                            ft.Column(controls=[self.texboxegreso], col={"xs": 12, "sm": 6, "md": 4, "lg": 1.33, "xl": 1.33}),
                            ft.Column(controls=[self.texboxsaldo], col={"xs": 12, "sm": 6, "md": 4, "lg": 1.33, "xl": 1.33}),
                            
                        ],
                        alignment=ft.MainAxisAlignment.CENTER,
                        
                        spacing=10,
                    ),
                ],
                scroll=ft.ScrollMode.AUTO,
                expand=True  # Ajusta la altura según sea necesario
            ),
            expand=True,
            
            border_radius=10
        )

        self.listview_container = Container(
            content=Column(
                controls=[self.listview],
                alignment=alignment.center,
                scroll=ft.ScrollMode.AUTO,
                height=200,
                width=1800,
            ),
            padding=padding.all(10),
        )

        # Contenedor para los botones
        self.buttons_container = ft.Container(
            content=ft.Column(
                controls=[
                    self.boton_visualizar_caja,
                    self.boton_guardar_caja,
                    self.boton_editar_caja,
                    self.boton_eliminar_caja,            
                ],
                alignment=ft.MainAxisAlignment.CENTER,
                spacing=10,
                expand=True
            ),
            padding=5,
            expand=True,
            border_radius=10
        )

        self.scrollable_content = ft.Column(
            controls=[
                ft.Row(
                    controls=[
                        ft.Column(
                            controls=[
                                self.teal_container
                            ],
                            expand=8
                        ),

                        ft.Column(
                            controls=[
                                self.black_container
                            ],
                            expand=2
                        ),

                        ft.Column(
                            controls=[
                                self.buttons_container
                            ],
                            expand=2
                        )
                    ],
                    expand=True
                ),
                ft.Column(
                    controls=[
                        self.orange_container,
                        self.column_titles,
                        self.listview_container
                    ],
                    expand=1.3
                ),
            ],
            scroll=ft.ScrollMode.AUTO,  # Habilitar scroll
            expand=True
        )

        # Asignar el título y el contenido desplazable a los controles
        self.controls = [
            self.title_container,  # Título fijo
            self.scrollable_content  # Contenido con scroll
        ]

        # Contenedor principal

    """def on_text_change2(self,e):
        self.texBoxProcedencia.value = self.texBoxProcedencia.value.upper()
        self.pa
        
        ge.update()   """ 

    def on_hover_boton_visualizar_rec(self, e):
        self.boton_visualizar_caja.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_visualizar_caja.update()


    def on_hover_boton_guardar_rec(self, e):
        self.boton_guardar_caja.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_guardar_caja.update()

    def on_hover_boton_editar_rec(self, e):
        self.boton_editar_caja.bgcolor = "orange" if e.data == "true" else "teal"
        self.boton_editar_caja.update()

    def on_hover_boton_eliminar_rec(self, e):
        self.boton_eliminar_caja.bgcolor = "red" if e.data == "true" else "teal"
        self.boton_eliminar_caja.update()
 
    def mostrar_mensaje8(self, mensaje, tipo="error"):
        """
        Agrega un mensaje a la cola para mostrarlo en un SnackBar.
        
        Parámetros:
            mensaje (str): El mensaje a mostrar.
            tipo (str): Tipo de mensaje ("éxito", "error" o "advertencia").
        """
        # Definir el color de fondo según el tipo de mensaje
        if tipo == "éxito":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.GREEN)  # 70% de opacidad
        elif tipo == "advertencia":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.TEAL)   # 70% de opacidad
        else:  # Por defecto, es un error
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.RED)    # 70% de opacidad
        
        # Crear el contenido del SnackBar con bordes redondeados y transparencia
        snack_content = ft.Container(
            content=ft.Text(mensaje, size=18, color=ft.Colors.WHITE),  # Texto del mensaje en blanco
            bgcolor=color_fondo,                              # Color de fondo con transparencia
            border_radius=10,                                 # Bordes redondeados de 10
            padding=10,                                       # Espaciado interno
        )
        
        # Crear el SnackBar
        snack_bar = ft.SnackBar(
            content=snack_content,  # Usar el contenedor con bordes redondeados y transparencia
            open=True,              # Abrir automáticamente
            duration=5000,          # Duración de 5 segundos
            bgcolor=ft.Colors.TRANSPARENT,  # Fondo transparente para el SnackBar
        )
        
        # Agregar el mensaje a la cola
        self.cola_mensajes.put(snack_bar)
        
        # Iniciar el proceso de mostrar mensajes si no está en curso
        if not self.mostrando_mensaje:
            self.mostrar_siguiente_mensaje()

    def mostrar_siguiente_mensaje(self):
        """
        Muestra el siguiente mensaje en la cola.
        """
        if not self.cola_mensajes.empty():
            self.mostrando_mensaje = True
            snack_bar = self.cola_mensajes.get()
            
            # Mostrar el SnackBar
            self.page.overlay.append(snack_bar)
            self.page.update()
            
            # Esperar a que el mensaje se cierre antes de mostrar el siguiente
            threading.Timer(5, self.cerrar_mensaje).start()  # 5 segundos de duración
        else:
            self.mostrando_mensaje = False

    def cerrar_mensaje(self):
        """
        Cierra el mensaje actual y muestra el siguiente.
        """
        self.page.overlay.clear()  # Limpiar el SnackBar actual
        self.page.update()
        self.mostrar_siguiente_mensaje()  # Mostrar el siguiente mensaje

    def verificar_liquidacion4(self, num_lote):
        try:
            with CConection.ConexionBasedeDatos() as cone, cone.cursor(prepared=True) as cursor:
                sql = "SELECT VNetoBs FROM Liquidacion WHERE NumLote = %s"
                params = (num_lote,)
                cursor.execute(sql, params)
                resultado = cursor.fetchone()

                if resultado and resultado[0] is not None:
                    self.mostrar_mensaje8(f"El lote {num_lote} ya está liquidado", tipo="advertencia")
                    self.limpiar_campos()
                    return False
                else:
                    return True
        except mysql.connector.Error as e:
            self.mostrar_mensaje8(f"Error en la base de datos: {str(e)}", tipo="error")
            return False

    def verificar_lote_anticipo8(self, num_lote):
        if num_lote == 0:
            return True  # No se realiza ninguna acción si el lote es 0

        try:
            with CConection.ConexionBasedeDatos() as cnx, cnx.cursor(prepared=True) as cursor:
                sql = "SELECT COUNT(*) FROM Comprobantes WHERE NumLote = %s"
                params = (num_lote,)
                cursor.execute(sql, params)
                resultado = cursor.fetchone()

                if resultado and resultado[0] is not None:
                    count = resultado[0]
                    if count == 0:
                        self.mostrar_mensaje8(f" El Lote {num_lote}, es el primer anticipo. ¡has abonando exitosamente! ", tipo="advertencia")
                    elif count == 1:
                        self.mostrar_mensaje8(f" El Lote {num_lote}, es el segundo anticipo. ¡has abonando exitosamente! ", tipo="advertencia")
                    elif count == 2:
                        self.mostrar_mensaje8(f" El Lote {num_lote}, es el tercer anticipo. ¡has abonando exitosamente! ", tipo="advertencia")
                    else:
                        self.mostrar_mensaje8(f" El Lote {num_lote} ya tiene {count} anticipos. ¡estas abonando exitosamente un nuevo anticipo! ", tipo="advertencia")
                    return True
                else:
                    return True
        except mysql.connector.Error as e:
            self.mostrar_mensaje8(f"Error en la base de datos: {str(e)}", tipo="error")
            return False

    def limpiar_campos(self):
        # Limpiar todos los campos de texto
        self.texboxidcomprobante.value = ""
        self.texboxtipogasto1.value = ""
        #self.texboxfechacomp.value = ""
        self.texboxnumerolote.value = ""
        self.texbox_nombres_apellidos.value = ""
        self.texboxglosa.value = ""
        self.texboxingreso.value = ""
        self.texboxegreso.value = ""
        self.texboxsaldo.value = ""
        self.page.update()

    def verificar_lote(self, e):
        num_lote = self.texboxnumerolote.value

        if not num_lote:
            self.mostrar_mensaje8("Por favor, ingrese un número de lote.", tipo="error")
            return

        if not self.verificar_liquidacion4(num_lote):
            return

        if not self.verificar_lote_anticipo8(num_lote):
            return

        # Si todo está bien, continuar con la operación
        self.mostrar_mensaje8("El lote está listo para ser procesado.", tipo="éxito")

    def guardarregistros_caja(self, e,comprobante_id=None):
        try:
            num_lote = self.texboxnumerolote.value

            # Obtener los valores de los campos
            ingreso = float(self.texboxingreso.value) if self.texboxingreso.value else 0.0
            egreso = float(self.texboxegreso.value) if self.texboxegreso.value else 0.0

            # Validar que no se ingresen valores negativos
            if ingreso < 0 or egreso < 0:
                raise ValueError("Los valores de ingreso y egreso no pueden ser negativos.")

            # Validar que no se registren ambos valores (ingreso y egreso) al mismo tiempo
            if ingreso > 0 and egreso > 0:
                raise ValueError("No se puede registrar un ingreso y un egreso al mismo tiempo.")

            # Verificar condiciones antes de guardar
            if not self.verificar_liquidacion4(num_lote):
                return
            if not self.verificar_lote_anticipo8(num_lote):
                return

            # Actualizar el TreeView (simulado)
            self.actualizarListView()

            # Conexión a la base de datos
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    query = """
                        INSERT INTO Comprobantes (TipoGasto, FechaComp, NumLote, NombresApellidos, Glosa, Ingreso, Egreso, Saldocaja)
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                    """
                    values = (
                        self.texboxtipogasto1.value,
                        self.texboxfechacomp.value,
                        self.texboxnumerolote.value,
                        self.texbox_nombres_apellidos.value,
                        self.texboxglosa.value,
                        self.texboxingreso.value,
                        self.texboxegreso.value,
                        self.texboxsaldo.value
                    )
                    cursor.execute(query, values)
                    cnx.commit()
                    comprobante_id = cursor.lastrowid

            # Mostrar mensaje de éxito
            self.mostrar_mensaje8(f"El Comprobante '{comprobante_id}' se ha registrado exitosamente", tipo="éxito")

            # Generar reporte y actualizar saldos
            self.generar_reporte_comprobantes(comprobante_id)
            self.actualizar_saldos_comprobantes(e)
            self.actualizarListView()

            # Limpiar los campos de entrada
            self.limpiar_campos()
            
        except ValueError as e:
            self.mostrar_mensaje8(f"Error : {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje8(f"Error: No se guardaron los registros: {e}", tipo="error")
            print({e})

    def actualizarListView(self):
        try:
            # Limpiar la lista
            self.listview.controls.clear()

            # Obtener los nuevos datos
            datos = CComprobantes.mostrarComprobantes()

            # Insertar los nuevos datos en la lista
            for index, row in enumerate(datos):
                self.listview.controls.append(
                    GestureDetector(
                        content=Container(
                            content=Row(
                                controls=[
                                    Text(row[0], width=70),
                                    Text(row[1], width=150),
                                    Text(row[2], width=80),
                                    Text(row[3], width=70),
                                    Text(row[4], width=150),
                                    Text(row[5], width=390),
                                    Text(row[6], width=100),
                                    Text(row[7], width=100),
                                    Text(row[8], width=100),
                                  
                                ],
                                alignment=ft.MainAxisAlignment.START,
                            ),
                            padding=5,
                            border=border.all(1, Colors.TEAL),
                            border_radius=10,
                        ),
                        on_tap=lambda e, row=row, index=index: self.seleccionarRegistro(row, index)
                    )
                )
            self.page.update()
        except ValueError as error:
            print('Error al Actualizar Lista {}'.format(error))

    def seleccionarRegistro(self, row, index):
        try:
            self.selected_row_index = index

            # Establecer los valores en los campos de texto
            self.texboxidcomprobante.value = row[0]
            self.texboxtipogasto1.value = row[1]
            self.texboxfechacomp.value = row[2]
            self.texboxnumerolote.value = row[3]
            self.texbox_nombres_apellidos.value = row[4]
            self.texboxglosa.value = row[5]
            self.texboxingreso.value = row[6]
            self.texboxegreso.value = row[7]
            self.texboxsaldo.value = row[8]

            # Marcar la fila seleccionada
            for i, control in enumerate(self.listview.controls):
                container = control.content
                if i == self.selected_row_index:  # Ajuste del índice
                    container.border = border.all(2, Colors.TEAL)
                    for cell in container.content.controls:
                        cell.color = Colors.TEAL
                else:
                    container.border = border.all(1, Colors.TEAL)
                    for cell in container.content.controls:
                        cell.color = Colors.BLACK
            self.page.update()
        except Exception as error:
            print(f'Error al seleccionar Registro {error}')

    def ModificarComprobante(self, e):
        # Verificar si los widgets están inicializados  
        if any(var is None for var in [self.texboxtipogasto1, self.texboxfechacomp, self.texboxnumerolote, self.texbox_nombres_apellidos, self.texboxglosa, self.texboxingreso, self.texboxegreso, self.texboxsaldo, self.texboxidcomprobante]):
            self.mostrar_mensaje8("Los widgets no están inicializados", tipo="advertencia")            
            return

        values = []
        for widget in [self.texboxtipogasto1, self.texboxfechacomp, self.texboxnumerolote, self.texbox_nombres_apellidos, self.texboxglosa, self.texboxingreso, self.texboxegreso, self.texboxsaldo, self.texboxidcomprobante]:
            value = widget.value
            if value is None or value == '':
                self.mostrar_mensaje8(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                return
            values.append(value)
        num_comp= int(self.texboxidcomprobante.value)
        num_lote = int(self.texboxnumerolote.value)

        if not self.verificar_liquidacion4(num_lote):
                return
        if not self.verificar_lote_anticipo8(num_lote):
                return

        try:
            CComprobantes.ModificarComprobante(self.page, *values)
            self.actualizar_saldos_comprobantes(e)
            self.actualizarListView()
            self.generar_reporte_comprobantes_editar(e)
            self.limpiar_campos()

        except ValueError as e:
            self.mostrar_mensaje8(f"Error: El Comprobante '{num_comp}' {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje8(f"Error: El Comprobante '{num_comp}' {e}", tipo="error")

    def EliminarComprobante(self, e):
        # Verificar si los widgets están inicializados  
        if any(var is None for var in [self.texboxidcomprobante]):
            self.mostrar_mensaje8("Los widgets no están inicializados", tipo="advertencia")            
            return

        values = []
        for widget in [self.texboxidcomprobante,]:
            value = widget.value
            if not value:
                self.mostrar_mensaje8(f'Seleccione Un Numero de Lote', tipo="advertencia")                           
                return
            values.append(value)

        num_lote = int(self.texboxnumerolote.value)
        if not self.verificar_liquidacion4(num_lote):
            return

        try:
            CComprobantes.EliminarComprobante(self.page, *values)
            self. actualizar_saldos_comprobantes(e)
            self.actualizarListView()
            self.limpiar_campos()

        except ValueError as e:
            self.mostrar_mensaje8(f"Error de Eliminacion: {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje8(f"Error: No se eliminaron los registros: {e}", tipo="error")

    def conboBox_Nombre_gasto(self):
        # Obtener los datos de la base de datos
        nombre_gasto = CComprobantes.conboBox_Nombre_gasto()  # Llamada al método estático

        # Verificar si hay datos
        if nombre_gasto:
            # Crear las opciones del Dropdown
            opciones = [ft.dropdown.Option(nombre) for nombre in nombre_gasto]

            # Asignar las opciones al Dropdown
            self.texboxtipogasto1.options = opciones

            # Seleccionar el último conjunto (el primero en la lista ordenada DESC)
            self.texboxtipogasto1.value = nombre_gasto[0]

        # Actualizar la página para reflejar los cambios
        self.page.update()

    def actualizar_saldos_comprobantes(self, e):
        try:
            with CConection.ConexionBasedeDatos() as cone, cone.cursor() as cursor:
                # Iniciar una transacción
                cone.start_transaction()

                # Obtener todos los comprobantes en orden
                cursor.execute("SELECT IdComprobantes, Ingreso, Egreso FROM Comprobantes ORDER BY IdComprobantes")
                comprobantes = cursor.fetchall()

                # Inicializar el saldo acumulado
                saldo_acumulado = Decimal(0)

                # Actualizar el saldo de cada comprobante
                for id_comprobante, ingreso, egreso in comprobantes:
                    ingreso = Decimal(ingreso or 0)  # Manejar valores nulos
                    egreso = Decimal(egreso or 0)  # Manejar valores nulos

                    saldo_acumulado += ingreso  # Sumar ingreso al saldo
                    saldo_acumulado -= egreso  # Restar egreso del saldo

                    # Actualizar el saldo en la base de datos
                    cursor.execute(
                        "UPDATE Comprobantes SET Saldocaja = %s WHERE IdComprobantes = %s",
                        (saldo_acumulado, id_comprobante),
                    )

                # Confirmar la transacción
                cone.commit()
                #self.mostrar_mensaje7(f'Seleccione Un Numero de Lote', tipo="advertencia")                           
                #ft.alert(self.page, 'Información', 'Saldos actualizados correctamente.')
        except Error as err:
            # Revertir la transacción en caso de error
            if 'cone' in locals():
                cone.rollback()
            self.mostrar_mensaje8(f"Error: {err}", tipo="error")
            #ft.alert(self.page, 'Error', str(err))

    def calcular_saldo(self):
        saldo_total = Decimal(0.0)
        try:
            with CConection.ConexionBasedeDatos() as cnx, cnx.cursor() as cursor:
                # Ejecutar la consulta para obtener la lista de transacciones
                cursor.execute("SELECT Ingreso, Egreso FROM Comprobantes ORDER BY IdComprobantes")

                # Iterar sobre la lista de transacciones
                for ingreso, egreso in cursor.fetchall():
                    ingreso = Decimal(ingreso) if isinstance(ingreso, (float, int)) else Decimal(ingreso)
                    egreso = Decimal(egreso) if isinstance(egreso, (float, int)) else Decimal(egreso)

                    # Calcular el nuevo saldo
                    saldo_total += ingreso - egreso
        except Error as err:
            self.mostrar_mensaje8(f"Error:  {err}", tipo="error")
            #ft.alert(self.page, 'Error', str(err))
        return saldo_total

    def actualizar_saldo(self, e):
        saldo_total = Decimal(0.0)

        # Obtener el valor actual de los Entry
        ingreso = self.texboxingreso.value
        egreso = self.texboxegreso.value

        # Convertir los valores a Decimal, manejando posibles errores
        try:
            if ingreso:
                saldo_total += Decimal(ingreso)  # Sumar ingreso al saldo
            if egreso:
                saldo_total -= Decimal(egreso)  # Restar egreso del saldo
        except InvalidOperation:
            self.mostrar_mensaje8(f"Error: ingrese valores numéricos validos ", tipo="error")
            #ft.alert(self.page, 'Error', 'Por favor, ingrese valores numéricos válidos.')
            return

        # Calcular el saldo total de la base de datos
        saldo_total_db = self.calcular_saldo()

        # Actualizar el saldo total sumando el saldo de la base de datos
        saldo_total += saldo_total_db

        # Actualizar el Entry con el saldo calculado
        self.texboxsaldo.value = str(saldo_total)
        self.texboxsaldo.update()
    
    def buscar_numero_comprobante(self, e):
        try:
            with CConection.ConexionBasedeDatos() as cone, cone.cursor() as cursor:
                sql = """
                    SELECT 
                        c.tipogasto,
                        c.fechacomp,
                        c.numlote,
                        c.nombresapellidos,
                        c.glosa,
                        c.ingreso,
                        c.egreso,
                        c.saldocaja
                    FROM 
                        Comprobantes c
                    WHERE 
                        c.idcomprobantes = %s
                """
                params = (self.texboxidcomprobante.value,)
                cursor.execute(sql, params)
                miResultado = cursor.fetchone()

                if miResultado:
                    campos = [
                        self.texboxtipogasto1, self.texboxfechacomp, self.texboxnumerolote,
                        self.texbox_nombres_apellidos, self.texboxglosa, self.texboxingreso,
                        self.texboxegreso, self.texboxsaldo
                    ]

                    for i, campo in enumerate(campos):
                        campo.value = miResultado[i]

                    self.mostrar_mensaje8(f"Comprobante encontrado. Puedes Editar Comprobante.", tipo="éxito")
                    #ft.AlertDialog(title=ft.Text("Información"), content=ft.Text("Comprobante encontrado. Puedes Editar Comprobante.")).open()
                else:
                    self.mostrar_mensaje8(f"Comprobante no Existe.", tipo="advertencia")
                    #ft.AlertDialog(title=ft.Text("Advertencia"), content=ft.Text("Comprobante no Existe")).open()
        except mysql.connector.Error as e:
            self.mostrar_mensaje8(f"Error: {e}", tipo="error")
            #ft.AlertDialog(title=ft.Text("Error"), content=ft.Text(str(e))).open()

    def buscar_numero_lote(self, e):
        try:
            with CConection.ConexionBasedeDatos() as cone, cone.cursor() as cursor:
                sql = """
                    SELECT 
                        r.NombresApellidos
                    FROM 
                        Recepcion r
                    WHERE 
                        r.numlote = %s
                """
                params = (self.texboxnumerolote.value,)
                cursor.execute(sql, params)
                miResultado = cursor.fetchone()

                if miResultado:
                    self.texbox_nombres_apellidos.value = miResultado[0]
                else:
                    self.texbox_nombres_apellidos.value = ""
                    self.mostrar_mensaje8("El lote No existe", tipo="advertencia")            
                    #ft.AlertDialog(title=ft.Text("Información"), content=ft.Text("Lote No Existe")).open()
        except mysql.connector.Error as e:
            self.mostrar_mensaje8(f"Error: El Comprobante  {e}", tipo="error")
            #ft.AlertDialog(title=ft.Text("Error"), content=ft.Text(str(e))).open()
    
    def buscadorrecepcion(self, e):
        self.buscarlote()

    def buscarlote(self):
        def on_hover_boton_buscar(e):
            boton_buscar.bgcolor = "green" if e.data == "true" else "teal"
            boton_buscar.update()

        def buscar_proveedorliquidacionesrecepcion(e=None):
            try:
                search_term = entry_nombres_apellidos.value
                num_lote = entry_num_lote.value

                # Obtener el valor seleccionado del RadioGroup
                estado_seleccionado = estado_group.value
                estado_condition = ""
                if estado_seleccionado == "Liquidado":
                    estado_condition = "AND Recepcion.Estado = 'Liquidado'"
                elif estado_seleccionado == "No Liquidado":
                    estado_condition = "AND Recepcion.Estado = 'No Liquidado'"

                fecha_inicio = entry_fecha_inicio.value
                fecha_final = entry_fecha_final.value
                fecha_condition = ""
                if fecha_inicio and fecha_final:
                    fecha_condition = "AND Recepcion.fecha BETWEEN %s AND %s"
                elif fecha_inicio:
                    fecha_condition = "AND Recepcion.fecha >= %s"
                elif fecha_final:
                    fecha_condition = "AND Recepcion.fecha <= %s"

                if num_lote:
                    num_lote_condition = "AND Recepcion.NumLote = %s"
                else:
                    num_lote_condition = ""

                sql = f"""
                    SELECT 
                        Recepcion.fecha, 
                        CONCAT(COALESCE(Liquidacion.NombreInicial, '0'), '-', Recepcion.Numlote) as LoteCompleto,
                        ROUND(Recepcion.Peso, 0) AS Peso, 
                        Recepcion.NombresApellidos, 
                        Recepcion.Denominacion, 
                        COALESCE(Liquidacion.leyesZnliq, 0) AS leyesZnliq, 
                        COALESCE(Liquidacion.leyesAgliq, 0) AS leyesAgliq, 
                        COALESCE(Liquidacion.leyespbliq, 0) AS leyespbliq,
                        GROUP_CONCAT(Comprobantes.idcomprobantes SEPARATOR '-') AS NumRecibo,
                        GROUP_CONCAT(COALESCE(Comprobantes.egreso, 0) SEPARATOR '-') AS AnticipoS,
                        COALESCE(Liquidacion.fechaliq, '0') AS fechaliq, 
                        Recepcion.estado 
                    FROM 
                        Recepcion
                    LEFT JOIN 
                        Liquidacion ON Recepcion.NumLote = Liquidacion.NumLote 
                    LEFT JOIN 
                        Comprobantes ON Comprobantes.NumLote = Recepcion.NumLote 
                    INNER JOIN 
                        Proveedores ON Proveedores.NombresApellidos = Recepcion.NombresApellidos 
                    LEFT JOIN  -- Cambiado de INNER JOIN a LEFT JOIN para permitir valores nulos
                        Inicial ON Inicial.NombreInicial = Liquidacion.NombreInicial
                    WHERE 
                        Proveedores.NombresApellidos LIKE %s 
                        {num_lote_condition}
                        {estado_condition} 
                        {fecha_condition}
                    GROUP BY 
                        Recepcion.fecha, Recepcion.NumLote, Recepcion.Peso, Recepcion.NombresApellidos, 
                        Recepcion.Denominacion, Liquidacion.leyesZnliq, Liquidacion.leyesAgliq, 
                        Liquidacion.leyespbliq, Liquidacion.fechaliq, Recepcion.estado, Liquidacion.NombreInicial
                    ORDER BY 
                        Recepcion.NumLote
                    """

                params = ['%' + search_term + '%']
                if num_lote:
                    params.append(num_lote)
                if fecha_inicio and fecha_final:
                    params.extend([fecha_inicio, fecha_final])
                elif fecha_inicio:
                    params.append(fecha_inicio)
                elif fecha_final:
                    params.append(fecha_final)

                conn = CConection.ConexionBasedeDatos()
                if conn is None:
                    raise Exception("No se pudo establecer la conexión a la base de datos.")

                with conn:
                    with conn.cursor() as cursor:
                        cursor.execute(sql, params)
                        rows = cursor.fetchall()

                        listview_proveedores.controls.clear()

                        # Agregar los títulos
                        listview_proveedores.controls.append(
                            Container(
                                content=Row(
                                    controls=[
                                        Text("Fecha", width=80, weight="bold"),
                                        Text("Lote", width=70, weight="bold"),
                                        Text("Peso", width=80, weight="bold"),
                                        Text("Nombres y Apellidos", width=150, weight="bold"),
                                        Text("Denominación", width=100, weight="bold"),
                                        Text("Leyes Zn", width=80, weight="bold"),
                                        Text("Leyes Ag", width=80, weight="bold"),
                                        Text("Leyes Pb", width=80, weight="bold"),
                                        Text("Num Recibo", width=100, weight="bold"),
                                        Text("Anticipo", width=100, weight="bold"),
                                        Text("Fecha Liquidación", width=80, weight="bold"),
                                        Text("Estado", width=100, weight="bold"),
                                    ],
                                    alignment=ft.MainAxisAlignment.START,
                                ),
                                padding=10,
                                border=border.all(1, Colors.TEAL),
                                border_radius=10,
                            )
                        )

                        for row in rows:
                            listview_proveedores.controls.append(
                                Container(
                                    content=Row(
                                        controls=[
                                            Text(row[0], width=80),
                                            Text(row[1], width=70),
                                            Text(row[2], width=80),
                                            Text(row[3], width=150),
                                            Text(row[4], width=100),
                                            Text(row[5], width=80),
                                            Text(row[6], width=80),
                                            Text(row[7], width=80),
                                            Text(row[8], width=100),
                                            Text(row[9], width=100),
                                            Text(row[10], width=80),
                                            Text(row[11], width=100),
                                        ],
                                        alignment=ft.MainAxisAlignment.START,
                                    ),
                                    padding=5, #espacio del texto y los bordes
                                    border=border.all(1, Colors.TEAL),
                                    border_radius=10,
                                    
                                )
                            )
                        listview_proveedores.update()

            except Exception as e:
                self.mostrar_mensaje8(f"Error: No se encontraron los registros. Error: {e}", tipo="error")

        # Crear los widgets con estilos
        entry_nombres_apellidos = TextField(
            label="Nombres y Apellidos",
            on_change=buscar_proveedorliquidacionesrecepcion,
            width=300, border_color="teal", border_radius=10,
            border=ft.border.all(5, Colors.TEAL), suffix_icon=ft.Icon(name=ft.Icons.SEARCH, color=Colors.TEAL),
        )
        entry_num_lote = TextField(
            label="Número de Lote",
            on_change=buscar_proveedorliquidacionesrecepcion,
            width=300, border_color="teal", border_radius=10,
            border=ft.border.all(5, Colors.TEAL), suffix_icon=ft.Icon(name=ft.Icons.SEARCH, color=Colors.TEAL),
        )

        # Crear RadioGroup con RadioButtons
        estado_group = ft.RadioGroup(
            content=Row(
                controls=[
                    ft.Radio(value="Todos", label="Todos"),
                    ft.Radio(value="Liquidado", label="Liquidado"),
                    ft.Radio(value="No Liquidado", label="No Liquidado"),
                ],
                spacing=30,
            ),
            on_change=buscar_proveedorliquidacionesrecepcion,
        )

        entry_fecha_inicio = TextField(
            label="Fecha Inicio (YYYY-MM-DD)",
            width=300, border_color="teal", border_radius=10,
            border=ft.border.all(5, Colors.TEAL)
        )
        entry_fecha_final = TextField(
            label="Fecha Final (YYYY-MM-DD)",
            width=300, border_color="teal", border_radius=10,
            border=ft.border.all(5, Colors.TEAL)
        )

        listview_proveedores = ListView(
            expand=True,
            spacing=5,
            padding=10,
            width=2100,
            auto_scroll=True
        )

        

        # Botón para ejecutar la búsqueda con estilos
        boton_buscar = ElevatedButton(
            text="Buscar",
            on_click=buscar_proveedorliquidacionesrecepcion,
            width=200, bgcolor=Colors.TEAL, color=Colors.WHITE,
            on_hover=on_hover_boton_buscar
        )

        # Agregar todos los componentes a la columna
        controls = [
            ft.ResponsiveRow(
                controls=[
                    Column(
                        controls=[
                            entry_nombres_apellidos,
                        ],
                        col={"xs": 12, "sm": 6, "md": 4, "lg": 3},
                        spacing=10,
                    ),
                    Column(
                        controls=[
                            entry_num_lote,
                        ],
                        col={"xs": 12, "sm": 6, "md": 4, "lg": 3},
                        spacing=10,
                    ),
                    Column(
                        controls=[
                            entry_fecha_inicio,
                        ],
                        col={"xs": 12, "sm": 6, "md": 4, "lg": 3},
                        spacing=10,
                    ),
                    Column(
                        controls=[
                            entry_fecha_final,
                        ],
                        col={"xs": 12, "sm": 6, "md": 4, "lg": 3},
                        spacing=10,
                    ),
                    Column(
                        controls=[
                            estado_group,  # Usar el RadioGroup aquí
                        ],
                        col={"xs": 12, "sm": 6, "md": 4, "lg": 3},
                        spacing=50,
                    ),
                ],
                spacing=10,
            ),
            boton_buscar,
            listview_proveedores,
        ]

        # Envolver los controles en un Column sin scroll
        scrollable_column = Column(
            controls=controls,
            height=600  # Ajusta la altura según sea necesario
        )

        self.dialog = AlertDialog(
            title=Text("BUSCAR PROVEEDORES", size=24,
                    weight="bold",
                    color=Colors.TEAL,
                    text_align=ft.TextAlign.CENTER),
            content=scrollable_column,
            actions=[ft.TextButton("Cerrar", on_click=lambda e: self.close_dialog())]
        )

        self.page.overlay.append(self.dialog)
        self.dialog.open = True
        self.page.update()

    def close_dialog(self):
        self.dialog.open = False
        self.page.update()
    
    def frame_tres_dialog(self, e):
        def on_hover_boton_guardar_prov(e):
            self.boton_guardar_trans.bgcolor = "green" if e.data == "true" else "teal"
            self.boton_guardar_trans.update()

        def on_hover_boton_editar_prov(e):
            self.boton_editar_trans.bgcolor = "orange" if e.data == "true" else "teal"
            self.boton_editar_trans.update()

        def on_hover_boton_eliminar_prov(e):
            self.boton_eliminar_trans.bgcolor = "red" if e.data == "true" else "teal"
            self.boton_eliminar_trans.update()

        
        def guardarregistrostrans(e):
            # Verificar que todos los widgets estén inicializados
            if any(var is None for var in [self.conboBoxNumLote21, self.texBoxFechaAntTrans, self.texBoxAnticipo1, self.texBoxAntLiteral1]):
                self.mostrar_mensaje8("Los widgets no están inicializados", tipo="advertencia")            
                return

            # Obtener valores de los widgets
            values = []
            for widget in [self.conboBoxNumLote21, self.texBoxFechaAntTrans, self.texBoxAnticipo1, self.texBoxAntLiteral1]:
                value = widget.value
                if value is None or value == '':
                    self.mostrar_mensaje8(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                    return
                values.append(value)

            num_lote = self.conboBoxNumLote21.value

            try:
                # Insertar valores en la base de datos
                CTransporte.IngresarAnticipoTrans(self.page, *values)
                actualizarListView_trans()
                limpiarCampos_tres_dialog()
                
            except ValueError as e:
                self.mostrar_mensaje8(f"Error: El Lote '{num_lote}' {e}", tipo="error")
            except Exception as e:
                self.mostrar_mensaje8(f"Error: El Lote '{num_lote}' {e}", tipo="error")

        def actualizarListView_trans():
            try:
                # Limpiar la lista
                self.listviewtrans.controls.clear()

                # Agregar los títulos de las columnas
                self.listviewtrans.controls.append(
                    Container(
                        content=Row(
                            controls=[
                                Text("No", width=80, weight="bold"),
                                Text("Lote", width=100, weight="bold"),
                                Text("Fecha", width=150, weight="bold"),
                                Text("Monto Bs", width=100, weight="bold"),
                                Text("Estado", width=180, weight="bold"),
                            ],
                            alignment=ft.MainAxisAlignment.START,
                        ),
                        padding=10,
                        border=border.all(1, Colors.TEAL),
                        border_radius=10,
                    )
                )

                # Obtener los nuevos datos
                self.data_entries = CTransporte.mostrarAnticipoTrans()
                self.filtered_entries = self.data_entries

                # Insertar los nuevos datos en la lista
                for index, row in enumerate(self.filtered_entries):
                    self.listviewtrans.controls.append(
                        GestureDetector(
                            content=Container(
                                content=Row(
                                    controls=[
                                        Text(row[0], width=80),
                                        Text(row[1], width=100),
                                        Text(row[2], width=150),
                                        Text(row[3], width=100),
                                        Text(row[4], width=100),
                                    ],
                                    alignment=ft.MainAxisAlignment.START,
                                ),
                                padding=10,
                                border=border.all(1, Colors.TEAL),
                                border_radius=10,
                            ),
                            on_tap=lambda e, row=row, index=index: seleccionarRegistro_trans(row, index)
                        )
                    )
                self.page.update()
            except ValueError as error:
                print('Error al Actualizar Lista {}'.format(error))

        def seleccionarRegistro_trans(row, index):
            try:
                #nonlocal selected_row_index
                selected1_row_index = index

                # Establecer los valores en los campos de texto
                self.texBoxIdTransporte.value = row[0]
                self.conboBoxNumLote21.value = row[1]
                self.texBoxFechaAntTrans.value = row[2]
                self.texBoxAnticipo1.value = row[3]
                self.texBoxAntLiteral1.value = row[4]

                # Marcar la fila seleccionada
                for i, control in enumerate(self.listviewtrans.controls[1:]):  # Saltar el título de las columnas
                    container = control.content  # Obtener el contenedor
                    if i == selected1_row_index:  # Ajuste del índice
                        container.border = border.all(2, Colors.TEAL)
                        for cell in container.content.controls:
                            cell.color = Colors.TEAL
                    else:
                        container.border = border.all(1, Colors.TEAL)
                        for cell in container.content.controls:
                            cell.color = Colors.BLACK
                self.page.update()
            except Exception as error:
                print(f'Error al seleccionar Registro {error}')

        def Modificartransporte(e):
            # Verificar si los widgets están inicializados  
            if any(var is None for var in [self.conboBoxNumLote21, self.texBoxFechaAntTrans, self.texBoxAnticipo1, self.texBoxAntLiteral1,self.texBoxIdTransporte]):
                self.mostrar_mensaje8("Los widgets no están inicializados", tipo="advertencia")            
                return

            values = []
            for widget in [self.conboBoxNumLote21, self.texBoxFechaAntTrans, self.texBoxAnticipo1, self.texBoxAntLiteral1,self.texBoxIdTransporte]:
                value = widget.value
                if value is None or value == '':
                    self.mostrar_mensaje8(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                    return
                values.append(value)
            nun_lote = self.conboBoxNumLote21.value
            try:
                CTransporte.ModificarAnticipoTrans(self.page, *values)
                actualizarListView_trans()
                limpiarCampos_tres_dialog()

            except ValueError as e:
                self.mostrar_mensaje8(f"Error: El Lote '{nun_lote} no Puede ser Editado' {e}", tipo="error")
            except Exception as e:
                self.mostrar_mensaje8(f"Error: El Lote '{nun_lote} no puede ser Editado' {e}", tipo="error")

        def EliminarTransporte(e):
            # Verificar si los widgets están inicializados  
            if any(var is None for var in [self.texBoxIdTransporte,self.conboBoxNumLote21]):
                self.mostrar_mensaje8("Los widgets no están inicializados", tipo="advertencia")            
                return

            values = []
            for widget in [self.texBoxIdTransporte,self.conboBoxNumLote21]:
                value = widget.value
                if not value:
                    self.mostrar_mensaje8(f'Seleccione Un Numero de Lote', tipo="advertencia")                           
                    return
                values.append(value)

            try:
                CTransporte.EliminarAnticipoTrans(self.page, *values)
                actualizarListView_trans()
                limpiarCampos_tres_dialog()

            except ValueError as e:
                self.mostrar_mensaje8(f"Error de Eliminacion: {e}", tipo="error")
            except Exception as e:
                self.mostrar_mensaje8(f"Error: No se eliminaron los registros: {e}", tipo="error")

        
        def limpiarCampos_tres_dialog():
            # Lista de widgets
            widgets = [
                self.texBoxIdTransporte, self.conboBoxNumLote21, self.texBoxFechaAntTrans, self.texBoxAnticipo1,self.texBoxAntLiteral1
            ]
            
            # Limpiar todos los widgets
            for widget in widgets:
                widget.value = ""
            self.page.update()

        
        def buscar_lote_trans(e=None):

            num_lote = self.conboBoxNumLote21.value

            num_lote_str = str(num_lote)

        # Validar si el valor ingresado es un número
            if not num_lote_str.isdigit():
                self.mostrar_mensaje8('El número de lote debe ser un valor numérico entero', tipo="advertencia")
                return


            try:
                # Buscar el lote en la base de datos
                row = CTransporte.buscarLotetransporte(num_lote)
                if row:
                    self.texBoxIdTransporte.value = row[0]
                    self.conboBoxNumLote21.value = row[1]
                    self.texBoxFechaAntTrans.value = row[2]
                    self.texBoxAnticipo1.value = row[3]
                    self.texBoxAntLiteral1.value = row[4]
                    
                    self.page.update()
                    self.mostrar_mensaje8(f" El Lote '{num_lote}' Encontrado Puedes Editar ", tipo="éxito")
                else:
                    #self.limpiarCampos_tres_dialog()
                    self.mostrar_mensaje8(f" El Lote '{num_lote}'no esta Recepcionado",tipo="advertencia")
            except Exception as e:
                    self.mostrar_mensaje8(f"Error: No se pudo buscar el Lote '{num_lote}'. Detalle: {e}", tipo="error")

        # Crear los widgets con tamaños ajustados
        self.texBoxIdTransporte = TextField(label="Id Transporte", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL), disabled=True)
        #self.texBoxNombresApellidos = TextField(label="Nombres y Apellidos", border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL),suffix_icon=ft.Icon(name=ft.Icons.SEARCH, color=Colors.TEAL), on_change=buscar_proveedorliquidacionesrecepcion)
        
        self.conboBoxNumLote21 = TextField(
            label="Lote",on_submit=buscar_lote_trans,
            width=300,
            height=50,
            border_color="teal",
            border_radius=10,
            border=ft.border.all(5, Colors.TEAL),
             ) # Función que se ejecuta al presionar Enter
        
        
        self.texBoxFechaAntTrans = TextField(label="Fecha", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL))
        self.texBoxAnticipo1 = TextField(label="Monto Bs", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL))
        self.texBoxAntLiteral1 = TextField(label="Estado", width=300, border_color="teal", border_radius=10, border=ft.border.all(5, Colors.TEAL))
        
        # ListView para mostrar los datos
        self.listviewtrans = ListView(
            expand=True,
            spacing=10,
            padding=padding.only(left=10, right=0, top=10, bottom=10),
            auto_scroll=True,
            #width=600,  # Ajusta la altura según sea necesario
        )

        # Botones con el mismo tamaño
        self.boton_guardar_trans = ElevatedButton(text="GUARDAR", on_click=guardarregistrostrans, width=200, bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=on_hover_boton_guardar_prov)
        self.boton_editar_trans = ElevatedButton(text="EDITAR", on_click=Modificartransporte, width=200, bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=on_hover_boton_editar_prov)
        self.boton_eliminar_trans = ElevatedButton(text="ELIMINAR", on_click=EliminarTransporte, width=200, bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=on_hover_boton_eliminar_prov)

        self.selected2_row_index = None
        #self.controls = [boton_proveedoes_actualizar]

        # Agregar todos los componentes a la columna
        dialog_content = Column(
            controls=[
                ft.ResponsiveRow(
                    controls=[
                        Column(controls=[self.conboBoxNumLote21], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                        Column(controls=[self.texBoxFechaAntTrans], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                    ],
                    spacing=7,
                ),
                ft.ResponsiveRow(
                    controls=[
                        Column(controls=[self.texBoxAnticipo1], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                        Column(controls=[self.texBoxAntLiteral1], col={"xs": 12, "sm": 6, "md": 4, "lg": 6}, spacing=7),
                    ],
                    spacing=7,
                ),
                ft.ResponsiveRow(
                    controls=[
                        Column(controls=[self.boton_guardar_trans], col={"xs": 12, "sm": 6, "md": 4, "lg": 4}, spacing=7),
                        Column(controls=[self.boton_editar_trans], col={"xs": 12, "sm": 6, "md": 4, "lg": 4}, spacing=7),
                        Column(controls=[self.boton_eliminar_trans], col={"xs": 12, "sm": 6, "md": 4, "lg": 4}, spacing=7),
                    ],
                    alignment=ft.MainAxisAlignment.CENTER,
                    spacing=60,
                ),
                self.listviewtrans,
            ],
            width=600,
            height=400
        )

        self.dialog = AlertDialog(
            title=Text("REGISTRO DE ANTICIPOS DE TRANSPORTE EN CUSTODIA",size=24, weight="bold", text_align="center", color=Colors.TEAL),
            content=dialog_content,
            actions=[
                ElevatedButton(text="Cerrar", on_click=lambda e: self.close_dialog3())
            ],
            actions_alignment=alignment.center,
        )

        self.page.overlay.append(self.dialog)  # Usar Page.overlay.append(dialog) en lugar de self.page.dialog
        self.dialog.open = True
        self.page.update()

        
        actualizarListView_trans()

    def close_dialog3(self):
        self.dialog.open = False
        self.page.update()

    def set_username(self, username):
        # Actualizar el nombre de usuario
        self.username = username
        #self.create_ui_elements()
    
    def generar_reporte_comprobantes_egreso(self,comprobante_id):
        
        cnx = CConection.ConexionBasedeDatos()
        cursor = cnx.cursor()

        # Consulta SQL para extraer los datos
        query = """
            SELECT 
            c.IdComprobantes,
            c.TipoGasto,
            c.FechaComp,
            c.NumLote,
            c.NombresApellidos,
            c.Glosa,
            c.Ingreso,
            c.Egreso,
            c.Saldocaja
            FROM 
            Comprobantes c
            WHERE 
            c.IdComprobantes = %s
        """

        # Ejecutar la consulta y extraer los datos
        try:
            cursor.execute(query, (comprobante_id,))
            datos = cursor.fetchall()  # Leer todos los resultados
        except mysql.connector.Error as err:
            print("Error: {}".format(err))
            return
        finally:
            cursor.close()
            cnx.close()    
    #======================================================
    # Crear un PDF
        pdf = FPDF(format="legal", orientation="P")

        # Agregar una página
        pdf.add_page()

        # Agregar título centrado
        pdf.set_font('Arial', 'B', 7)
        pdf.image('logo menu 7.png', 15, 8, 50)
        pdf.set_xy(x=215, y=5)
        pdf.ln(5) 
        pdf.set_font("Times", style="BI",size=12)
        pdf.cell(215, 7, 'EMPRESA MINERA VIRGEN DE COTOCA S.R.L.', 0, 1, 'C')
        pdf.set_font("Times",size=8)
        pdf.cell(215, 4, 'OFICINA CENTRAL: AV. EL MINERO # 18', 0, 1, 'C')
        pdf.cell(215, 4, 'TELF: 6221020 * CEL: 72443475-69639245-73860757', 0, 1, 'C')
        pdf.cell(215, 4, 'NIT: 341040029 POTOSI-BOLIVIA', 0, 1, 'C')
        pdf.set_font("Times", style="BI",size=14)
        pdf.cell(215, 7, 'COMPROBANTE DE CAJA EGRESO', 0, 1, 'C')
        pdf.ln(5) 
        
        for fila in datos:
            
            pdf.set_xy(x=330, y=25)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "N°", 0, 0, "R")
            pdf.cell(30, 5, "00"+str(fila[0]), 0,0 , "R")

            pdf.set_xy(x=330, y=35)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "Bs: ", 0, 0, "R")
            pdf.cell(30, 5,  "{:,.2f}".format(fila[7]), 1, 1, "R") 
            
            dias_semana = {
                
                0: "LUNES",
                1: "MARTES",
                2: "MIERCOLES",
                3: "JUEVES",
                4: "VIERNES",
                5: "SABADO",
                6: "DOMINDO"
            }

            # Define el diccionario para traducir el mes
            meses_espanol = {
                1: "ENERO",
                2: "FEBRERO",
                3: "MARZO",
                4: "ABRIL",
                5: "MAYO",
                6: "JUNIO",
                7: "JULIO",
                8: "AGOSTO",
                9: "SEPTIEMBRE",
                10: "OCTUBRE",
                11: "NOVIEMBRE",
                12: "DICIEMBRE"
            }

            # Establece la fuente y el tamaño de la fuente
            pdf.set_font("Times", size=9)

            # Escribe el título "Fecha de Liquidacion:"
            
            pdf.set_xy(x=30, y=40)
            pdf.ln(5)
            #pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Times", style="BI", size=9)
            pdf.cell(30, 5, "Potosi, ", 0, 0, "L")
            pdf.set_font("Times", style="I",size=9)

            # Convierte la fecha de formato "2024-10-05" a "sábado, 5 de octubre de 2024"
            fecha = str(fila[2])  # asumiendo que fila[2] es la fecha en formato "2024-10-05"
            fecha_obj = datetime.strptime(fecha, "%Y-%m-%d")
            dia_semana = dias_semana[fecha_obj.weekday()]
            mes_espanol = meses_espanol[fecha_obj.month]
            fecha_formateada = f"{dia_semana}, {fecha_obj.day} DE {mes_espanol} DEL {fecha_obj.year}"

            # Escribe la fecha formateada en el PDF
            pdf.cell(45, 5, fecha_formateada, 0, 0, "L")


            if fila[3] > 0:
                pdf.ln(5)
                pdf.set_font("Times", style="I", size=9)
                pdf.cell(30, 5, "Numero Lote :", 0, 0, "L")
                pdf.set_font("Times",style="I",size=9)
                pdf.cell(45, 5, txt=f"SM- {int(fila[3])}", border=0, align='L')
            else:
                pdf.set_font("Times", style="I", size=9)

            pdf.ln(5)
            pdf.cell(30, 5, "Pagado a :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, str(fila[4]), 0, 1, "L")

            num = Decimal(fila[7])
            letras = num_letras(num)
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 5, "La Suma de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, letras, 0, 1, "L")
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 10, "Por Concepto de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.multi_cell(150, 5, str(fila[5]), 0, 1, "L") 

            pdf.ln(20)
            pdf.set_font("Arial", size=8)
            #pdf.cell(60, 0,"Preparado Por",0,0,"C")
            pdf.cell(70, 0,"Autorizado Por",0,0,"C")
            pdf.cell(70, 0,"Entregue Conforme",0,0,"C")
            pdf.cell(70, 0,"Recibi Conforme",0,1,"C")
            pdf.ln(3)
            pdf.cell(180, 5,"Nombre...........................",0,0,"R")
            
        
        fecha_hora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        pdf.set_font("arial", "I", size=6)
        pdf.ln(0)
        pdf.cell(0, 5, txt=f"Fecha y hora de impresión:{fecha_hora}", border=0, align='L')
        pdf.set_font("Arial", size=6)
        pdf.ln(5)
        if self.username:  # Verificar si el nombre de usuario está definido
            pdf.cell(0, 0, txt=f"Usuario: {self.username}", border=0, align='L', ln=1)
        pdf.cell(180, 5,"Cel...........................",0,0,"R")

        pdf.ln(5) 
        pdf.set_font("Times", style="BI",size=12)
        pdf.cell(0, 7, '. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .', 0, 1, 'C')

        #===================================== Copia Uno =====================

        
        pdf.set_font('Arial', 'B', 7)
        pdf.image('logo menu 7.png', 15, 118, 50)
        pdf.set_xy(x=215, y=115)
        pdf.ln(5) 
        pdf.set_font("Times", style="BI",size=12)
        pdf.cell(215, 7, 'EMPRESA MINERA VIRGEN DE COTOCA S.R.L.', 0, 1, 'C')
        #pdf.cell(0, 7, 'VIRGEN DE COTOCA', 0, 1, 'C')
        pdf.set_font("Times",size=8)
        pdf.cell(215, 4, 'OFICINA CENTRAL: AV. EL MINERO # 18', 0, 1, 'C')
        pdf.cell(215, 4, 'TELF: 6221020 * CEL: 72443475-69639245-73860757', 0, 1, 'C')
        pdf.cell(215, 4, 'NIT: 341040029 POTOSI-BOLIVIA', 0, 1, 'C')
        pdf.set_font("Times", style="BI",size=14)
        pdf.cell(215, 7, 'COMPROBANTE DE CAJA EGRESO', 0, 1, 'C')
        pdf.ln(5) 
        
        for fila in datos:
            
            pdf.set_xy(x=330, y=135)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "N°", 0, 0, "R")
            pdf.cell(30, 5, "00"+str(fila[0]), 0,0 , "R")

            pdf.set_xy(x=330, y=145)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "Bs: ", 0, 0, "R")
            pdf.cell(30, 5,  "{:,.2f}".format(fila[7]), 1, 1, "R") 
            #pdf.cell(30, 5, str(fila[7]), 1,1 , "R")
            
            dias_semana = {
                0: "LUNES",
                1: "MARTES",
                2: "MIERCOLES",
                3: "JUEVES",
                4: "VIERNES",
                5: "SABADO",
                6: "DOMINDO"
            }

            # Define el diccionario para traducir el mes
            meses_espanol = {
                1: "ENERO",
                2: "FEBRERO",
                3: "MARZO",
                4: "ABRIL",
                5: "MAYO",
                6: "JUNIO",
                7: "JULIO",
                8: "AGOSTO",
                9: "SEPTIEMBRE",
                10: "OCTUBRE",
                11: "NOVIEMBRE",
                12: "DICIEMBRE"
            }

            # Establece la fuente y el tamaño de la fuente
            pdf.set_font("Times", size=9)

            # Escribe el título "Fecha de Liquidacion:"
            
            pdf.set_xy(x=30, y=150)
            pdf.ln(5)
            #pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Times", style="BI", size=9)
            pdf.cell(30, 5, "Potosi, ", 0, 0, "L")
            pdf.set_font("Times", style="I",size=9)

            # Convierte la fecha de formato "2024-10-05" a "sábado, 5 de octubre de 2024"
            fecha = str(fila[2])  # asumiendo que fila[2] es la fecha en formato "2024-10-05"
            fecha_obj = datetime.strptime(fecha, "%Y-%m-%d")
            dia_semana = dias_semana[fecha_obj.weekday()]
            mes_espanol = meses_espanol[fecha_obj.month]
            fecha_formateada = f"{dia_semana}, {fecha_obj.day} DE {mes_espanol} DEL {fecha_obj.year}"

            # Escribe la fecha formateada en el PDF
            pdf.cell(45, 5, fecha_formateada, 0, 0, "L")

            if fila[3] > 0:
                pdf.ln(5)
                pdf.set_font("Times", style="I", size=9)
                pdf.cell(30, 5, "Numero Lote :", 0, 0, "L")
                pdf.set_font("Times",style="I",size=9)
                pdf.cell(45, 5, txt=f"SM- {int(fila[3])}", border=0, align='L')
            else:
                pdf.set_font("Times", style="I", size=9)

            pdf.ln(5)
            pdf.cell(30, 5, "Pagado a :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, str(fila[4]), 0, 1, "L")

            num = Decimal(fila[7])
            letras = num_letras(num)
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 5, "La Suma de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, letras, 0, 1, "L")
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 10, "Por Concepto de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.multi_cell(150, 5, str(fila[5]), 0, 1, "L") 

            pdf.ln(20)
            pdf.set_font("Arial", size=8)
            #pdf.cell(60, 0,"Preparado Por",0,0,"C")
            pdf.cell(70, 0,"Autorizado Por",0,0,"C")
            pdf.cell(70, 0,"Entregue Conforme",0,0,"C")
            pdf.cell(70, 0,"Recibi Conforme",0,1,"C")
            pdf.ln(3)
            pdf.cell(180, 5,"Nombre...........................",0,0,"R")
            
        
        fecha_hora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        pdf.set_font("arial", "I", size=6)
        pdf.ln(0)
        pdf.cell(0, 5, txt=f"Fecha y hora de impresión:{fecha_hora}", border=0, align='L')
        pdf.set_font("Arial", size=6)
        pdf.ln(5)
        if self.username:  # Verificar si el nombre de usuario está definido
            pdf.cell(0, 0, txt=f"Usuario: {self.username}", border=0, align='L', ln=1)
        pdf.cell(180, 5,"Cel...........................",0,0,"R")

        pdf.ln(10) 
        pdf.set_font("Times", style="BI",size=12)
        pdf.cell(0, 7, '. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .', 0, 1, 'C')

        #===================================== Copia Dos =====================
        
        pdf.set_font('Arial', 'B', 7)
        pdf.image('logo menu 7.png', 15, 228, 50)
        #pdf.ln(3)
        #pdf.cell(w=50, h=10, txt="EMPRESA MINERA VIRGEN DE COTOCA S.R.L.", ln=10, align='C', border=0, fill=0) 
        #pdf.set_font('Arial', 'B', 7)
        #pdf.cell(w=365, h=0, txt="POTOSI-BOLIVIA", ln=10, align='C', border=0, fill=0)
        pdf.set_xy(x=215, y=225)
        pdf.ln(5) 
        pdf.set_font("Times", style="BI",size=12)
        pdf.cell(215, 7, 'EMPRESA MINERA VIRGEN DE COTOCA S.R.L.', 0, 1, 'C')
        #pdf.cell(0, 7, 'VIRGEN DE COTOCA', 0, 1, 'C')
        pdf.set_font("Times",size=8)
        pdf.cell(215, 4, 'OFICINA CENTRAL: AV. EL MINERO # 18', 0, 1, 'C')
        pdf.cell(215, 4, 'TELF: 6221020 * CEL: 72443475-69639245-73860757', 0, 1, 'C')
        pdf.cell(215, 4, 'NIT: 341040029 POTOSI-BOLIVIA', 0, 1, 'C')
        pdf.set_font("Times", style="BI",size=14)
        pdf.cell(215, 7, 'COMPROBANTE DE CAJA EGRESO', 0, 1, 'C')
        pdf.ln(5) 
        
        for fila in datos:
            
            pdf.set_xy(x=330, y=245)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "N°", 0, 0, "R")
            pdf.cell(30, 5, "00"+str(fila[0]), 0,0 , "R")

            pdf.set_xy(x=330, y=255)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "Bs: ", 0, 0, "R")
            pdf.cell(30, 5,  "{:,.2f}".format(fila[7]), 1, 1, "R") 
            #pdf.cell(30, 5, str(fila[7]), 1,1 , "R")
            
            dias_semana = {
                0: "LUNES",
                1: "MARTES",
                2: "MIERCOLES",
                3: "JUEVES",
                4: "VIERNES",
                5: "SABADO",
                6: "DOMINDO"
            }

            # Define el diccionario para traducir el mes
            meses_espanol = {
                1: "ENERO",
                2: "FEBRERO",
                3: "MARZO",
                4: "ABRIL",
                5: "MAYO",
                6: "JUNIO",
                7: "JULIO",
                8: "AGOSTO",
                9: "SEPTIEMBRE",
                10: "OCTUBRE",
                11: "NOVIEMBRE",
                12: "DICIEMBRE"
            }

            # Establece la fuente y el tamaño de la fuente
            pdf.set_font("Times", size=9)

            # Escribe el título "Fecha de Liquidacion:"
            
            pdf.set_xy(x=30, y=260)
            pdf.ln(5)
            #pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Times", style="BI", size=9)
            pdf.cell(30, 5, "Potosi, ", 0, 0, "L")
            pdf.set_font("Times", style="I",size=9)

            # Convierte la fecha de formato "2024-10-05" a "sábado, 5 de octubre de 2024"
            fecha = str(fila[2])  # asumiendo que fila[2] es la fecha en formato "2024-10-05"
            fecha_obj = datetime.strptime(fecha, "%Y-%m-%d")
            dia_semana = dias_semana[fecha_obj.weekday()]
            mes_espanol = meses_espanol[fecha_obj.month]
            fecha_formateada = f"{dia_semana}, {fecha_obj.day} DE {mes_espanol} DEL {fecha_obj.year}"

            # Escribe la fecha formateada en el PDF
            pdf.cell(45, 5, fecha_formateada, 0, 0, "L")

            if fila[3] > 0:
                pdf.ln(5)
                pdf.set_font("Times", style="I", size=9)
                pdf.cell(30, 5, "Numero Lote :", 0, 0, "L")
                pdf.set_font("Times",style="I",size=9)
                pdf.cell(45, 5, txt=f"SM- {int(fila[3])}", border=0, align='L')
            else:
                pdf.set_font("Times", style="I", size=9)

            pdf.ln(5)
            pdf.cell(30, 5, "Pagado a :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, str(fila[4]), 0, 1, "L")

            num = Decimal(fila[7])
            letras = num_letras(num)
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 5, "La Suma de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, letras, 0, 1, "L")
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 10, "Por Concepto de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.multi_cell(150, 5, str(fila[5]), 0, 1, "L") 

            pdf.ln(20)
            pdf.set_font("Arial", size=8)
            #pdf.cell(60, 0,"Preparado Por",0,0,"C")
            pdf.cell(70, 0,"Autorizado Por",0,0,"C")
            pdf.cell(70, 0,"Entregue Conforme",0,0,"C")
            pdf.cell(70, 0,"Recibi Conforme",0,1,"C")
            pdf.ln(3)
            pdf.cell(180, 5,"Nombre...........................",0,0,"R")
            
        
        fecha_hora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        pdf.set_font("arial", "I", size=6)
        pdf.ln(0)
        pdf.cell(0, 5, txt=f"Fecha y hora de impresión:{fecha_hora}", border=0, align='L')
        pdf.set_font("Arial", size=6)
        pdf.ln(5)
        if self.username:  # Verificar si el nombre de usuario está definido
            pdf.cell(0, 0, txt=f"Usuario: {self.username}", border=0, align='L', ln=1)
        pdf.cell(180, 5,"Cel...........................",0,0,"R")

        pdf.ln(10) 
        pdf.set_font("Times", style="BI",size=12)
        #pdf.cell(0, 7, '. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .', 0, 1, 'C')

        #====================================================================

        # Guardar el archivo PDF
        filename = f"personnel_report_{comprobante_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        
        # Save the PDF in a specific folder (ensure the folder exists)
        output_folder = "comp egreso"
        os.makedirs(output_folder, exist_ok=True)
        full_path = os.path.join(output_folder, filename)
        
        # Output the PDF to the specified path
        pdf.output(full_path)

        # Open the PDF automatically
        os.startfile(full_path)

    def generar_reporte_comprobantes_ingreso(self,comprobante_id):

        
        cnx = CConection.ConexionBasedeDatos()
        cursor = cnx.cursor()

        # Consulta SQL para extraer los datos
        query = """
            SELECT 
            c.IdComprobantes,
            c.TipoGasto,
            c.FechaComp,
            c.NumLote,
            c.NombresApellidos,
            c.Glosa,
            c.Ingreso,
            c.Egreso,
            c.Saldocaja
            FROM 
            Comprobantes c
            WHERE 
            c.IdComprobantes = %s
        """

        # Ejecutar la consulta y extraer los datos
        try:
            cursor.execute(query, (comprobante_id,))
            datos = cursor.fetchall()  # Leer todos los resultados
        except mysql.connector.Error as err:
            print("Error: {}".format(err))
            return
        finally:
            cursor.close()
            cnx.close()   

    #======================================================
    # Crear un PDF
        pdf = FPDF(format="legal", orientation="P")

        # Agregar una página
        pdf.add_page()

        # Agregar logo en la esquina superior izquierda
        #pdf.image('cayo5.png', 10, 5, 20)

        # Agregar título centrado
        pdf.set_font('Arial', 'B', 7)
        pdf.image('logo menu 7.png', 15, 8, 50)
        #pdf.ln(3)
        #pdf.cell(w=50, h=10, txt="EMPRESA MINERA VIRGEN DE COTOCA S.R.L.", ln=10, align='C', border=0, fill=0) 
        #pdf.set_font('Arial', 'B', 7)
        #pdf.cell(w=365, h=0, txt="POTOSI-BOLIVIA", ln=10, align='C', border=0, fill=0)
        pdf.set_xy(x=215, y=5)
        pdf.ln(5) 
        pdf.set_font("Times", style="BI",size=12)
        pdf.cell(215, 7, 'EMPRESA MINERA VIRGEN DE COTOCA S.R.L.', 0, 1, 'C')
        #pdf.cell(0, 7, 'VIRGEN DE COTOCA', 0, 1, 'C')
        pdf.set_font("Times",size=8)
        pdf.cell(215, 4, 'OFICINA CENTRAL: AV. EL MINERO # 18', 0, 1, 'C')
        pdf.cell(215, 4, 'TELF: 6221020 * CEL: 72443475-69639245-73860757', 0, 1, 'C')
        pdf.cell(215, 4, 'NIT: 341040029 POTOSI-BOLIVIA', 0, 1, 'C')
        pdf.set_font("Times", style="BI",size=14)
        pdf.cell(215, 7, 'COMPROBANTE DE CAJA INGRESO', 0, 1, 'C')
        pdf.ln(5) 
        
        for fila in datos:
            
            pdf.set_xy(x=330, y=25)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "N°", 0, 0, "R")
            pdf.cell(30, 5, "00"+str(fila[0]), 0,0 , "R")

            pdf.set_xy(x=330, y=35)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "Bs: ", 0, 0, "R")
            pdf.cell(30, 5,  "{:,.2f}".format(fila[6]), 1, 1, "R") 
            #pdf.cell(30, 5, str(fila[7]), 1,1 , "R")
            
            dias_semana = {
                0: "LUNES",
                1: "MARTES",
                2: "MIERCOLES",
                3: "JUEVES",
                4: "VIERNES",
                5: "SABADO",
                6: "DOMINDO"
            }

            # Define el diccionario para traducir el mes
            meses_espanol = {
                1: "ENERO",
                2: "FEBRERO",
                3: "MARZO",
                4: "ABRIL",
                5: "MAYO",
                6: "JUNIO",
                7: "JULIO",
                8: "AGOSTO",
                9: "SEPTIEMBRE",
                10: "OCTUBRE",
                11: "NOVIEMBRE",
                12: "DICIEMBRE"
            }

            # Establece la fuente y el tamaño de la fuente
            pdf.set_font("Times", size=9)

            # Escribe el título "Fecha de Liquidacion:"
            
            pdf.set_xy(x=30, y=40)
            pdf.ln(5)
            #pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Times", style="BI", size=9)
            pdf.cell(30, 5, "Potosi, ", 0, 0, "L")
            pdf.set_font("Times", style="I",size=9)

            # Convierte la fecha de formato "2024-10-05" a "sábado, 5 de octubre de 2024"
            fecha = str(fila[2])  # asumiendo que fila[2] es la fecha en formato "2024-10-05"
            fecha_obj = datetime.strptime(fecha, "%Y-%m-%d")
            dia_semana = dias_semana[fecha_obj.weekday()]
            mes_espanol = meses_espanol[fecha_obj.month]
            fecha_formateada = f"{dia_semana}, {fecha_obj.day} DE {mes_espanol} DEL {fecha_obj.year}"

            # Escribe la fecha formateada en el PDF
            pdf.cell(45, 5, fecha_formateada, 0, 0, "L")

            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 5, "Recibi de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, str(fila[4]), 0, 1, "L")

            num = Decimal(fila[6])
            letras = num_letras(num)
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 5, "La Suma de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, letras, 0, 1, "L")
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 10, "Por Concepto de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.multi_cell(150, 5, str(fila[5]), 0, 1, "L") 

            pdf.ln(20)
            pdf.set_font("Arial", size=8)
            #pdf.cell(60, 0,"Preparado Por",0,0,"C")
            pdf.cell(70, 0,"Autorizado Por",0,0,"C")
            pdf.cell(70, 0,"Entregue Conforme",0,0,"C")
            pdf.cell(70, 0,"Recibi Conforme",0,1,"C")
            pdf.ln(3)
            pdf.cell(190, 5,"Ci..............................",0,0,"R")
        
        fecha_hora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        pdf.set_font("arial", "I", size=6)
        pdf.ln(0)
        pdf.cell(0, 5, txt=f"Fecha y hora de impresión:{fecha_hora}", border=0, align='L',ln=1)
        if self.username:  # Verificar si el nombre de usuario está definido
            pdf.cell(0, 0, txt=f"Usuario: {self.username}", border=0, align='L', ln=1)

        pdf.ln(15) 
        pdf.set_font("Times", style="BI",size=12)
        pdf.cell(0, 7, '. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .', 0, 1, 'C')

        #===================================== Copia Uno =====================
        
        pdf.set_font('Arial', 'B', 7)
        pdf.image('logo menu 7.png', 15, 118, 50)
        #pdf.ln(3)
        #pdf.cell(w=50, h=10, txt="EMPRESA MINERA VIRGEN DE COTOCA S.R.L.", ln=10, align='C', border=0, fill=0) 
        #pdf.set_font('Arial', 'B', 7)
        #pdf.cell(w=365, h=0, txt="POTOSI-BOLIVIA", ln=10, align='C', border=0, fill=0)
        pdf.set_xy(x=215, y=115)
        pdf.ln(5) 
        pdf.set_font("Times", style="BI",size=12)
        pdf.cell(215, 7, 'EMPRESA MINERA VIRGEN DE COTOCA S.R.L.', 0, 1, 'C')
        #pdf.cell(0, 7, 'VIRGEN DE COTOCA', 0, 1, 'C')
        pdf.set_font("Times",size=8)
        pdf.cell(215, 4, 'OFICINA CENTRAL: AV. EL MINERO # 18', 0, 1, 'C')
        pdf.cell(215, 4, 'TELF: 6221020 * CEL: 72443475-69639245-73860757', 0, 1, 'C')
        pdf.cell(215, 4, 'NIT: 341040029 POTOSI-BOLIVIA', 0, 1, 'C')
        pdf.set_font("Times", style="BI",size=14)
        pdf.cell(215, 7, 'COMPROBANTE DE CAJA INGRESO', 0, 1, 'C')
        pdf.ln(5) 
        
        for fila in datos:
            
            pdf.set_xy(x=330, y=135)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "N°", 0, 0, "R")
            pdf.cell(30, 5, "00"+str(fila[0]), 0,0 , "R")

            pdf.set_xy(x=330, y=145)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "Bs: ", 0, 0, "R")
            pdf.cell(30, 5,  "{:,.2f}".format(fila[6]), 1, 1, "R") 
            #pdf.cell(30, 5, str(fila[7]), 1,1 , "R")
            
            dias_semana = {
                0: "LUNES",
                1: "MARTES",
                2: "MIERCOLES",
                3: "JUEVES",
                4: "VIERNES",
                5: "SABADO",
                6: "DOMINDO"
            }

            # Define el diccionario para traducir el mes
            meses_espanol = {
                1: "ENERO",
                2: "FEBRERO",
                3: "MARZO",
                4: "ABRIL",
                5: "MAYO",
                6: "JUNIO",
                7: "JULIO",
                8: "AGOSTO",
                9: "SEPTIEMBRE",
                10: "OCTUBRE",
                11: "NOVIEMBRE",
                12: "DICIEMBRE"
            }

            # Establece la fuente y el tamaño de la fuente
            pdf.set_font("Times", size=9)

            # Escribe el título "Fecha de Liquidacion:"
            
            pdf.set_xy(x=30, y=150)
            pdf.ln(5)
            #pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Times", style="BI", size=9)
            pdf.cell(30, 5, "Potosi, ", 0, 0, "L")
            pdf.set_font("Times", style="I",size=9)

            # Convierte la fecha de formato "2024-10-05" a "sábado, 5 de octubre de 2024"
            fecha = str(fila[2])  # asumiendo que fila[2] es la fecha en formato "2024-10-05"
            fecha_obj = datetime.strptime(fecha, "%Y-%m-%d")
            dia_semana = dias_semana[fecha_obj.weekday()]
            mes_espanol = meses_espanol[fecha_obj.month]
            fecha_formateada = f"{dia_semana}, {fecha_obj.day} DE {mes_espanol} DEL {fecha_obj.year}"

            # Escribe la fecha formateada en el PDF
            pdf.cell(45, 5, fecha_formateada, 0, 0, "L")

            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 5, "Recibi de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, str(fila[4]), 0, 1, "L")

            num = Decimal(fila[6])
            letras = num_letras(num)
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 5, "La Suma de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, letras, 0, 1, "L")
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 10, "Por Concepto de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.multi_cell(150, 5, str(fila[5]), 0, 1, "L") 

            pdf.ln(20)
            pdf.set_font("Arial", size=8)
            #pdf.cell(60, 0,"Preparado Por",0,0,"C")
            pdf.cell(70, 0,"Autorizado Por",0,0,"C")
            pdf.cell(70, 0,"Entregue Conforme",0,0,"C")
            pdf.cell(70, 0,"Recibi Conforme",0,1,"C")
            pdf.ln(3)
            pdf.cell(190, 5,"Ci..............................",0,0,"R")
        
        fecha_hora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        pdf.set_font("arial", "I", size=6)
        pdf.ln(0)
        pdf.cell(0, 5, txt=f"Fecha y hora de impresión:{fecha_hora}", border=0, align='L',ln=1)
        if self.username:  # Verificar si el nombre de usuario está definido
            pdf.cell(0, 0, txt=f"Usuario: {self.username}", border=0, align='L', ln=1)

        pdf.ln(15) 
        pdf.set_font("Times", style="BI",size=12)
        pdf.cell(0, 7, '. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .', 0, 1, 'C')

        #===================================== Copia Dos =====================
        
        pdf.set_font('Arial', 'B', 7)
        pdf.image('logo menu 7.png', 15, 228, 50)
        #pdf.ln(3)
        #pdf.cell(w=50, h=10, txt="EMPRESA MINERA VIRGEN DE COTOCA S.R.L.", ln=10, align='C', border=0, fill=0) 
        #pdf.set_font('Arial', 'B', 7)
        #pdf.cell(w=365, h=0, txt="POTOSI-BOLIVIA", ln=10, align='C', border=0, fill=0)
        pdf.set_xy(x=215, y=225)
        pdf.ln(5) 
        pdf.set_font("Times", style="BI",size=12)
        pdf.cell(215, 7, 'EMPRESA MINERA VIRGEN DE COTOCA S.R.L.', 0, 1, 'C')
        #pdf.cell(0, 7, 'VIRGEN DE COTOCA', 0, 1, 'C')
        pdf.set_font("Times",size=8)
        pdf.cell(215, 4, 'OFICINA CENTRAL: AV. EL MINERO # 18', 0, 1, 'C')
        pdf.cell(215, 4, 'TELF: 6221020 * CEL: 72443475-69639245-73860757', 0, 1, 'C')
        pdf.cell(215, 4, 'NIT: 341040029 POTOSI-BOLIVIA', 0, 1, 'C')
        pdf.set_font("Times", style="BI",size=14)
        pdf.cell(215, 7, 'COMPROBANTE DE CAJA INGRESO', 0, 1, 'C')
        pdf.ln(5) 
        
        for fila in datos:
            
            pdf.set_xy(x=330, y=245)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "N°", 0, 0, "R")
            pdf.cell(30, 5, "00"+str(fila[0]), 0,0 , "R")

            pdf.set_xy(x=330, y=255)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "Bs: ", 0, 0, "R")
            pdf.cell(30, 5,  "{:,.2f}".format(fila[6]), 1, 1, "R") 
            #pdf.cell(30, 5, str(fila[7]), 1,1 , "R")
            
            dias_semana = {
                0: "LUNES",
                1: "MARTES",
                2: "MIERCOLES",
                3: "JUEVES",
                4: "VIERNES",
                5: "SABADO",
                6: "DOMINDO"
            }

            # Define el diccionario para traducir el mes
            meses_espanol = {
                1: "ENERO",
                2: "FEBRERO",
                3: "MARZO",
                4: "ABRIL",
                5: "MAYO",
                6: "JUNIO",
                7: "JULIO",
                8: "AGOSTO",
                9: "SEPTIEMBRE",
                10: "OCTUBRE",
                11: "NOVIEMBRE",
                12: "DICIEMBRE"
            }

            # Establece la fuente y el tamaño de la fuente
            pdf.set_font("Times", size=9)

            # Escribe el título "Fecha de Liquidacion:"
            
            pdf.set_xy(x=30, y=260)
            pdf.ln(5)
            #pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Times", style="BI", size=9)
            pdf.cell(30, 5, "Potosi, ", 0, 0, "L")
            pdf.set_font("Times", style="I",size=9)

            # Convierte la fecha de formato "2024-10-05" a "sábado, 5 de octubre de 2024"
            fecha = str(fila[2])  # asumiendo que fila[2] es la fecha en formato "2024-10-05"
            fecha_obj = datetime.strptime(fecha, "%Y-%m-%d")
            dia_semana = dias_semana[fecha_obj.weekday()]
            mes_espanol = meses_espanol[fecha_obj.month]
            fecha_formateada = f"{dia_semana}, {fecha_obj.day} DE {mes_espanol} DEL {fecha_obj.year}"

            # Escribe la fecha formateada en el PDF
            pdf.cell(45, 5, fecha_formateada, 0, 0, "L")

            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 5, "Recibi de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, str(fila[4]), 0, 1, "L")

            num = Decimal(fila[6])
            letras = num_letras(num)
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 5, "La Suma de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, letras, 0, 1, "L")
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 10, "Por Concepto de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.multi_cell(150, 5, str(fila[5]), 0, 1, "L") 

            pdf.ln(20)
            pdf.set_font("Arial", size=8)
            #pdf.cell(60, 0,"Preparado Por",0,0,"C")
            pdf.cell(70, 0,"Autorizado Por",0,0,"C")
            pdf.cell(70, 0,"Entregue Conforme",0,0,"C")
            pdf.cell(70, 0,"Recibi Conforme",0,1,"C")
            pdf.ln(3)
            pdf.cell(190, 5,"Ci..............................",0,0,"R")
        
        fecha_hora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        pdf.set_font("arial", "I", size=6)
        pdf.ln(0)
        pdf.cell(0, 5, txt=f"Fecha y hora de impresión:{fecha_hora}", border=0, align='L',ln=1)
        if self.username:  # Verificar si el nombre de usuario está definido
            pdf.cell(0,0, txt=f"Usuario: {self.username}", border=0, align='L', ln=1)

        filename = f"personnel_report_{comprobante_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        
        # Save the PDF in a specific folder (ensure the folder exists)
        output_folder = "comp ingreso"
        os.makedirs(output_folder, exist_ok=True)
        full_path = os.path.join(output_folder, filename)
        
        # Output the PDF to the specified path
        pdf.output(full_path)

        # Open the PDF automatically
        os.startfile(full_path)

    def generar_reporte_comprobantes(self, comprobante_id):
        radio_value = self.radio_group.value

        if radio_value == "1":  # Comparar con cadena "1" en lugar de 1
            self.generar_reporte_comprobantes_egreso(comprobante_id)
        elif radio_value == "2":  # Comparar con cadena "2" en lugar de 2
            self.generar_reporte_comprobantes_ingreso(comprobante_id)
            
    
    #......................EDITAR VISUALIZAR......................

    def generar_reporte_editar_egreso(self,e):
        
        valor = self.texboxidcomprobante.value

        cone = CConection.ConexionBasedeDatos()
        cursor = cone.cursor()

        # Consulta SQL para extraer los datos
        query = """
                SELECT 
                c.idcomprobantes,
                c.tipogasto,
                c.fechacomp,
                c.numlote,
                c.nombresapellidos,
                c.glosa,
                c.ingreso,
                c.egreso,
                c.saldocaja
            FROM 
                Comprobantes c
            WHERE 
                c.idcomprobantes = %s
            """
        # Ejecutar la consulta y extraer los datos
        try:
            cursor.execute(query, (valor,))
            datos = cursor.fetchall()  # Leer todos los resultados
            
        except mysql.connector.Error as err:
            print("Error: {}".format(err))
            return
    #======================================================
    # Crear un PDF
        pdf = FPDF(format="legal", orientation="P")

        # Agregar una página
        pdf.add_page()

        # Agregar logo en la esquina superior izquierda
        #pdf.image('cayo5.png', 10, 5, 20)

        # Agregar título centrado
        pdf.set_font('Arial', 'B', 7)
        pdf.image('logo menu 7.png', 15, 8, 50)
        #pdf.ln(3)
        #pdf.cell(w=50, h=10, txt="EMPRESA MINERA VIRGEN DE COTOCA S.R.L.", ln=10, align='C', border=0, fill=0) 
        #pdf.set_font('Arial', 'B', 7)
        #pdf.cell(w=365, h=0, txt="POTOSI-BOLIVIA", ln=10, align='C', border=0, fill=0)
        pdf.set_xy(x=215, y=5)
        pdf.ln(5) 
        pdf.set_font("Times", style="BI",size=12)
        pdf.cell(215, 7, 'EMPRESA MINERA VIRGEN DE COTOCA S.R.L.', 0, 1, 'C')
        #pdf.cell(0, 7, 'VIRGEN DE COTOCA', 0, 1, 'C')
        pdf.set_font("Times",size=8)
        pdf.cell(215, 4, 'OFICINA CENTRAL: AV. EL MINERO # 18', 0, 1, 'C')
        pdf.cell(215, 4, 'TELF: 6221020 * CEL: 72443475-69639245-73860757', 0, 1, 'C')
        pdf.cell(215, 4, 'NIT: 341040029 POTOSI-BOLIVIA', 0, 1, 'C')
        pdf.set_font("Times", style="BI",size=14)
        pdf.cell(215, 7, 'COMPROBANTE DE CAJA EGRESO', 0, 1, 'C')
        pdf.ln(5) 
        
        for fila in datos:
            
            pdf.set_xy(x=330, y=25)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "N°", 0, 0, "R")
            pdf.cell(30, 5, "00"+str(fila[0]), 0,0 , "R")

            pdf.set_xy(x=330, y=35)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "Bs: ", 0, 0, "R")
            pdf.cell(30, 5,  "{:,.2f}".format(fila[7]), 1, 1, "R") 
            #pdf.cell(30, 5, str(fila[7]), 1,1 , "R")
            
            dias_semana = {
                
                0: "LUNES",
                1: "MARTES",
                2: "MIERCOLES",
                3: "JUEVES",
                4: "VIERNES",
                5: "SABADO",
                6: "DOMINDO"
            }

            # Define el diccionario para traducir el mes
            meses_espanol = {
                1: "ENERO",
                2: "FEBRERO",
                3: "MARZO",
                4: "ABRIL",
                5: "MAYO",
                6: "JUNIO",
                7: "JULIO",
                8: "AGOSTO",
                9: "SEPTIEMBRE",
                10: "OCTUBRE",
                11: "NOVIEMBRE",
                12: "DICIEMBRE"
            }

            # Establece la fuente y el tamaño de la fuente
            pdf.set_font("Times", size=9)

            # Escribe el título "Fecha de Liquidacion:"
            
            pdf.set_xy(x=30, y=40)
            pdf.ln(5)
            #pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Times", style="BI", size=9)
            pdf.cell(30, 5, "Potosi, ", 0, 0, "L")
            pdf.set_font("Times", style="I",size=9)

            # Convierte la fecha de formato "2024-10-05" a "sábado, 5 de octubre de 2024"
            fecha = str(fila[2])  # asumiendo que fila[2] es la fecha en formato "2024-10-05"
            fecha_obj = datetime.strptime(fecha, "%Y-%m-%d")
            dia_semana = dias_semana[fecha_obj.weekday()]
            mes_espanol = meses_espanol[fecha_obj.month]
            fecha_formateada = f"{dia_semana}, {fecha_obj.day} DE {mes_espanol} DEL {fecha_obj.year}"

            # Escribe la fecha formateada en el PDF
            pdf.cell(45, 5, fecha_formateada, 0, 0, "L")

                #................
            # Verificar el valor de fila[3]
            if fila[3] > 0:
                pdf.ln(5)
                pdf.set_font("Times", style="I", size=9)
                pdf.cell(30, 5, "Numero Lote :", 0, 0, "L")
                pdf.set_font("Times",style="I",size=9)
                pdf.cell(45, 5, txt=f"SM- {int(fila[3])}", border=0, align='L')
            else:
                pdf.set_font("Times", style="I", size=9)

            #....................

            pdf.ln(5)
            pdf.cell(30, 5, "Pagado a :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, str(fila[4]), 0, 1, "L")

            num = Decimal(fila[7])
            letras = num_letras(num)
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 5, "La Suma de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, letras, 0, 1, "L")
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 10, "Por Concepto de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.multi_cell(150, 5, str(fila[5]), 0, 1, "L") 

            pdf.ln(20)
            pdf.set_font("Arial", size=8)
            #pdf.cell(60, 0,"Preparado Por",0,0,"C")
            pdf.cell(70, 0,"Autorizado Por",0,0,"C")
            pdf.cell(70, 0,"Entregue Conforme",0,0,"C")
            pdf.cell(70, 0,"Recibi Conforme",0,1,"C")
            pdf.ln(3)
            pdf.cell(180, 5,"Nombre...........................",0,0,"R")
            
        
        fecha_hora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        pdf.set_font("arial", "I", size=6)
        pdf.ln(0)
        pdf.cell(0, 5, txt=f"Fecha y hora de impresión:{fecha_hora}", border=0, align='L')
        pdf.set_font("Arial", size=6)
        pdf.ln(5)
        if self.username:  # Verificar si el nombre de usuario está definido
            pdf.cell(0, 0, txt=f"Usuario: {self.username}", border=0, align='L', ln=1)
        pdf.cell(180, 5,"Cel...........................",0,0,"R")

        pdf.ln(5) 
        pdf.set_font("Times", style="BI",size=12)
        pdf.cell(0, 7, '. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .', 0, 1, 'C')

        #===================================== Copia Uno =====================
        
        pdf.set_font('Arial', 'B', 7)
        pdf.image('logo menu 7.png', 15, 118, 50)
        #pdf.ln(3)
        #pdf.cell(w=50, h=10, txt="EMPRESA MINERA VIRGEN DE COTOCA S.R.L.", ln=10, align='C', border=0, fill=0) 
        #pdf.set_font('Arial', 'B', 7)
        #pdf.cell(w=365, h=0, txt="POTOSI-BOLIVIA", ln=10, align='C', border=0, fill=0)
        pdf.set_xy(x=215, y=115)
        pdf.ln(5) 
        pdf.set_font("Times", style="BI",size=12)
        pdf.cell(215, 7, 'EMPRESA MINERA VIRGEN DE COTOCA S.R.L.', 0, 1, 'C')
        #pdf.cell(0, 7, 'VIRGEN DE COTOCA', 0, 1, 'C')
        pdf.set_font("Times",size=8)
        pdf.cell(215, 4, 'OFICINA CENTRAL: AV. EL MINERO # 18', 0, 1, 'C')
        pdf.cell(215, 4, 'TELF: 6221020 * CEL: 72443475-69639245-73860757', 0, 1, 'C')
        pdf.cell(215, 4, 'NIT: 341040029 POTOSI-BOLIVIA', 0, 1, 'C')
        pdf.set_font("Times", style="BI",size=14)
        pdf.cell(215, 7, 'COMPROBANTE DE CAJA EGRESO', 0, 1, 'C')
        pdf.ln(5) 
        
        for fila in datos:
            
            pdf.set_xy(x=330, y=135)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "N°", 0, 0, "R")
            pdf.cell(30, 5, "00"+str(fila[0]), 0,0 , "R")

            pdf.set_xy(x=330, y=145)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "Bs: ", 0, 0, "R")
            pdf.cell(30, 5,  "{:,.2f}".format(fila[7]), 1, 1, "R") 
            #pdf.cell(30, 5, str(fila[7]), 1,1 , "R")
            
            dias_semana = {
                0: "LUNES",
                1: "MARTES",
                2: "MIERCOLES",
                3: "JUEVES",
                4: "VIERNES",
                5: "SABADO",
                6: "DOMINDO"
            }

            # Define el diccionario para traducir el mes
            meses_espanol = {
                1: "ENERO",
                2: "FEBRERO",
                3: "MARZO",
                4: "ABRIL",
                5: "MAYO",
                6: "JUNIO",
                7: "JULIO",
                8: "AGOSTO",
                9: "SEPTIEMBRE",
                10: "OCTUBRE",
                11: "NOVIEMBRE",
                12: "DICIEMBRE"
            }

            # Establece la fuente y el tamaño de la fuente
            pdf.set_font("Times", size=9)

            # Escribe el título "Fecha de Liquidacion:"
            
            pdf.set_xy(x=30, y=150)
            pdf.ln(5)
            #pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Times", style="BI", size=9)
            pdf.cell(30, 5, "Potosi, ", 0, 0, "L")
            pdf.set_font("Times", style="I",size=9)

            # Convierte la fecha de formato "2024-10-05" a "sábado, 5 de octubre de 2024"
            fecha = str(fila[2])  # asumiendo que fila[2] es la fecha en formato "2024-10-05"
            fecha_obj = datetime.strptime(fecha, "%Y-%m-%d")
            dia_semana = dias_semana[fecha_obj.weekday()]
            mes_espanol = meses_espanol[fecha_obj.month]
            fecha_formateada = f"{dia_semana}, {fecha_obj.day} DE {mes_espanol} DEL {fecha_obj.year}"

            # Escribe la fecha formateada en el PDF
            pdf.cell(45, 5, fecha_formateada, 0, 0, "L")

            if fila[3] > 0:
                pdf.ln(5)
                pdf.set_font("Times", style="I", size=9)
                pdf.cell(30, 5, "Numero Lote :", 0, 0, "L")
                pdf.set_font("Times",style="I",size=9)
                pdf.cell(45, 5, txt=f"SM- {int(fila[3])}", border=0, align='L')
            else:
                pdf.set_font("Times", style="I", size=9)

            pdf.ln(5)
            pdf.cell(30, 5, "Pagado a :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, str(fila[4]), 0, 1, "L")

            num = Decimal(fila[7])
            letras = num_letras(num)
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 5, "La Suma de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, letras, 0, 1, "L")
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 10, "Por Concepto de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.multi_cell(150, 5, str(fila[5]), 0, 1, "L") 

            pdf.ln(20)
            pdf.set_font("Arial", size=8)
            #pdf.cell(60, 0,"Preparado Por",0,0,"C")
            pdf.cell(70, 0,"Autorizado Por",0,0,"C")
            pdf.cell(70, 0,"Entregue Conforme",0,0,"C")
            pdf.cell(70, 0,"Recibi Conforme",0,1,"C")
            pdf.ln(3)
            pdf.cell(180, 5,"Nombre...........................",0,0,"R")
            
        
        fecha_hora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        pdf.set_font("arial", "I", size=6)
        pdf.ln(0)
        pdf.cell(0, 5, txt=f"Fecha y hora de impresión:{fecha_hora}", border=0, align='L')
        pdf.set_font("Arial", size=6)
        pdf.ln(5)
        if self.username:  # Verificar si el nombre de usuario está definido
            pdf.cell(0, 0, txt=f"Usuario: {self.username}", border=0, align='L', ln=1)
        pdf.cell(180, 5,"Cel...........................",0,0,"R")

        pdf.ln(10) 
        pdf.set_font("Times", style="BI",size=12)
        pdf.cell(0, 7, '. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .', 0, 1, 'C')

        #====================================================================
        pdf.set_font('Arial', 'B', 7)
        pdf.image('logo menu 7.png', 15, 228, 50)
        #pdf.ln(3)
        #pdf.cell(w=50, h=10, txt="EMPRESA MINERA VIRGEN DE COTOCA S.R.L.", ln=10, align='C', border=0, fill=0) 
        #pdf.set_font('Arial', 'B', 7)
        #pdf.cell(w=365, h=0, txt="POTOSI-BOLIVIA", ln=10, align='C', border=0, fill=0)
        pdf.set_xy(x=215, y=225)
        pdf.ln(5) 
        pdf.set_font("Times", style="BI",size=12)
        pdf.cell(215, 7, 'EMPRESA MINERA VIRGEN DE COTOCA S.R.L.', 0, 1, 'C')
        #pdf.cell(0, 7, 'VIRGEN DE COTOCA', 0, 1, 'C')
        pdf.set_font("Times",size=8)
        pdf.cell(215, 4, 'OFICINA CENTRAL: AV. EL MINERO # 18', 0, 1, 'C')
        pdf.cell(215, 4, 'TELF: 6221020 * CEL: 72443475-69639245-73860757', 0, 1, 'C')
        pdf.cell(215, 4, 'NIT: 341040029 POTOSI-BOLIVIA', 0, 1, 'C')
        pdf.set_font("Times", style="BI",size=14)
        pdf.cell(215, 7, 'COMPROBANTE DE CAJA EGRESO', 0, 1, 'C')
        pdf.ln(5) 
        
        for fila in datos:
            
            pdf.set_xy(x=330, y=245)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "N°", 0, 0, "R")
            pdf.cell(30, 5, "00"+str(fila[0]), 0,0 , "R")

            pdf.set_xy(x=330, y=255)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "Bs: ", 0, 0, "R")
            pdf.cell(30, 5,  "{:,.2f}".format(fila[7]), 1, 1, "R") 
            #pdf.cell(30, 5, str(fila[7]), 1,1 , "R")
            
            dias_semana = {
                0: "LUNES",
                1: "MARTES",
                2: "MIERCOLES",
                3: "JUEVES",
                4: "VIERNES",
                5: "SABADO",
                6: "DOMINDO"
            }

            # Define el diccionario para traducir el mes
            meses_espanol = {
                1: "ENERO",
                2: "FEBRERO",
                3: "MARZO",
                4: "ABRIL",
                5: "MAYO",
                6: "JUNIO",
                7: "JULIO",
                8: "AGOSTO",
                9: "SEPTIEMBRE",
                10: "OCTUBRE",
                11: "NOVIEMBRE",
                12: "DICIEMBRE"
            }

            # Establece la fuente y el tamaño de la fuente
            pdf.set_font("Times", size=9)

            # Escribe el título "Fecha de Liquidacion:"
            
            pdf.set_xy(x=30, y=260)
            pdf.ln(5)
            #pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Times", style="BI", size=9)
            pdf.cell(30, 5, "Potosi, ", 0, 0, "L")
            pdf.set_font("Times", style="I",size=9)

            # Convierte la fecha de formato "2024-10-05" a "sábado, 5 de octubre de 2024"
            fecha = str(fila[2])  # asumiendo que fila[2] es la fecha en formato "2024-10-05"
            fecha_obj = datetime.strptime(fecha, "%Y-%m-%d")
            dia_semana = dias_semana[fecha_obj.weekday()]
            mes_espanol = meses_espanol[fecha_obj.month]
            fecha_formateada = f"{dia_semana}, {fecha_obj.day} DE {mes_espanol} DEL {fecha_obj.year}"

            # Escribe la fecha formateada en el PDF
            pdf.cell(45, 5, fecha_formateada, 0, 0, "L")

            if fila[3] > 0:
                pdf.ln(5)
                pdf.set_font("Times", style="I", size=9)
                pdf.cell(30, 5, "Numero Lote :", 0, 0, "L")
                pdf.set_font("Times",style="I",size=9)
                pdf.cell(45, 5, txt=f"SM- {int(fila[3])}", border=0, align='L')
            else:
                pdf.set_font("Times", style="I", size=9)


            pdf.ln(5)
            pdf.cell(30, 5, "Pagado a :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, str(fila[4]), 0, 1, "L")

            num = Decimal(fila[7])
            letras = num_letras(num)
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 5, "La Suma de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, letras, 0, 1, "L")
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 10, "Por Concepto de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.multi_cell(150, 5, str(fila[5]), 0, 1, "L") 

            pdf.ln(20)
            pdf.set_font("Arial", size=8)
            #pdf.cell(60, 0,"Preparado Por",0,0,"C")
            pdf.cell(70, 0,"Autorizado Por",0,0,"C")
            pdf.cell(70, 0,"Entregue Conforme",0,0,"C")
            pdf.cell(70, 0,"Recibi Conforme",0,1,"C")
            pdf.ln(3)
            pdf.cell(180, 5,"Nombre...........................",0,0,"R")
            
        
        fecha_hora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        pdf.set_font("arial", "I", size=6)
        pdf.ln(0)
        pdf.cell(0, 5, txt=f"Fecha y hora de impresión:{fecha_hora}", border=0, align='L')
        pdf.set_font("Arial", size=6)
        pdf.ln(5)
        if self.username:  # Verificar si el nombre de usuario está definido
            pdf.cell(0, 0, txt=f"Usuario: {self.username}", border=0, align='L', ln=1)
        pdf.cell(180, 5,"Cel...........................",0,0,"R")

        pdf.ln(10) 
        pdf.set_font("Times", style="BI",size=12)
        #pdf.cell(0, 7, '. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .', 0, 1, 'C')
        #====================================================================

        # Guardar el archivo PDF
        pdf.output('Comp. de Egreso.pdf', "F")

        # Crear un archivo temporal
        temp_file = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False)
        temp_file = temp_file
        # Abrir el archivo PDF generado
        os.startfile('Comp. de Egreso.pdf')
        
        # Eliminar el archivo temporal cuando se cierre
        temp_file.close()
        pdf_file = "Comp. de Egreso.pdf"
        pdf.output(pdf_file)
        #messagebox.showinfo("Reporte", f"Reporte guardado como {pdf_file}")
        #print_pdf(pdf_file)

    def generar_reporte_editar_ingreso(self,e):
    #def generar_reporte_comprobantes_egreso

        valor = self.texboxidcomprobante.value

        cone = CConection.ConexionBasedeDatos()
        cursor = cone.cursor()

        # Consulta SQL para extraer los datos
        query = """
                SELECT 
                c.idcomprobantes,
                c.tipogasto,
                c.fechacomp,
                c.numlote,
                c.nombresapellidos,
                c.glosa,
                c.ingreso,
                c.egreso,
                c.saldocaja
            FROM 
                Comprobantes c
            WHERE 
                c.idcomprobantes = %s
            """
        # Ejecutar la consulta y extraer los datos
        try:
            cursor.execute(query, (valor,))
            datos = cursor.fetchall()  # Leer todos los resultados
            
        except mysql.connector.Error as err:
            print("Error: {}".format(err))
            return
        
    #======================================================
    # Crear un PDF
        pdf = FPDF(format="legal", orientation="P")

        # Agregar una página
        pdf.add_page()

        # Agregar logo en la esquina superior izquierda
        #pdf.image('cayo5.png', 10, 5, 20)

        # Agregar título centrado
        pdf.set_font('Arial', 'B', 7)
        pdf.image('logo menu 7.png', 15, 8, 50)
        #pdf.ln(3)
        #pdf.cell(w=50, h=10, txt="EMPRESA MINERA VIRGEN DE COTOCA S.R.L.", ln=10, align='C', border=0, fill=0) 
        #pdf.set_font('Arial', 'B', 7)
        #pdf.cell(w=365, h=0, txt="POTOSI-BOLIVIA", ln=10, align='C', border=0, fill=0)
        pdf.set_xy(x=215, y=5)
        pdf.ln(5) 
        pdf.set_font("Times", style="BI",size=12)
        pdf.cell(215, 7, 'EMPRESA MINERA VIRGEN DE COTOCA S.R.L.', 0, 1, 'C')
        #pdf.cell(0, 7, 'VIRGEN DE COTOCA', 0, 1, 'C')
        pdf.set_font("Times",size=8)
        pdf.cell(215, 4, 'OFICINA CENTRAL: AV. EL MINERO # 18', 0, 1, 'C')
        pdf.cell(215, 4, 'TELF: 6221020 * CEL: 72443475-69639245-73860757', 0, 1, 'C')
        pdf.cell(215, 4, 'NIT: 341040029 POTOSI-BOLIVIA', 0, 1, 'C')
        pdf.set_font("Times", style="BI",size=14)
        pdf.cell(215, 7, 'COMPROBANTE DE CAJA INGRESO', 0, 1, 'C')
        pdf.ln(5) 
        
        for fila in datos:
            
            pdf.set_xy(x=330, y=25)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "N°", 0, 0, "R")
            pdf.cell(30, 5, "00"+str(fila[0]), 0,0 , "R")

            pdf.set_xy(x=330, y=35)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "Bs: ", 0, 0, "R")
            pdf.cell(30, 5,  "{:,.2f}".format(fila[6]), 1, 1, "R") 
            #pdf.cell(30, 5, str(fila[7]), 1,1 , "R")
            
            dias_semana = {
                0: "LUNES",
                1: "MARTES",
                2: "MIERCOLES",
                3: "JUEVES",
                4: "VIERNES",
                5: "SABADO",
                6: "DOMINDO"
            }

            # Define el diccionario para traducir el mes
            meses_espanol = {
                1: "ENERO",
                2: "FEBRERO",
                3: "MARZO",
                4: "ABRIL",
                5: "MAYO",
                6: "JUNIO",
                7: "JULIO",
                8: "AGOSTO",
                9: "SEPTIEMBRE",
                10: "OCTUBRE",
                11: "NOVIEMBRE",
                12: "DICIEMBRE"
            }

            # Establece la fuente y el tamaño de la fuente
            pdf.set_font("Times", size=9)

            # Escribe el título "Fecha de Liquidacion:"
            
            pdf.set_xy(x=30, y=40)
            pdf.ln(5)
            #pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Times", style="BI", size=9)
            pdf.cell(30, 5, "Potosi, ", 0, 0, "L")
            pdf.set_font("Times", style="I",size=9)

            # Convierte la fecha de formato "2024-10-05" a "sábado, 5 de octubre de 2024"
            fecha = str(fila[2])  # asumiendo que fila[2] es la fecha en formato "2024-10-05"
            fecha_obj = datetime.strptime(fecha, "%Y-%m-%d")
            dia_semana = dias_semana[fecha_obj.weekday()]
            mes_espanol = meses_espanol[fecha_obj.month]
            fecha_formateada = f"{dia_semana}, {fecha_obj.day} DE {mes_espanol} DEL {fecha_obj.year}"

            # Escribe la fecha formateada en el PDF
            pdf.cell(45, 5, fecha_formateada, 0, 0, "L")

            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 5, "Recibi de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, str(fila[4]), 0, 1, "L")

            num = Decimal(fila[6])
            letras = num_letras(num)
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 5, "La Suma de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, letras, 0, 1, "L")
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 10, "Por Concepto de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.multi_cell(150, 5, str(fila[5]), 0, 1, "L") 

            pdf.ln(20)
            pdf.set_font("Arial", size=8)
            #pdf.cell(60, 0,"Preparado Por",0,0,"C")
            pdf.cell(70, 0,"Autorizado Por",0,0,"C")
            pdf.cell(70, 0,"Entregue Conforme",0,0,"C")
            pdf.cell(70, 0,"Recibi Conforme",0,1,"C")
            pdf.ln(3)
            pdf.cell(190, 5,"Ci..............................",0,0,"R")
        
        fecha_hora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        pdf.set_font("arial", "I", size=6)
        pdf.ln(0)
        pdf.cell(0, 5, txt=f"Fecha y hora de impresión:{fecha_hora}", border=0, align='L',ln=1)
        if self.username:  # Verificar si el nombre de usuario está definido
            pdf.cell(0, 0, txt=f"Usuario: {self.username}", border=0, align='L', ln=1)

        pdf.ln(15) 
        pdf.set_font("Times", style="BI",size=12)
        pdf.cell(0, 7, '. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .', 0, 1, 'C')

        #===================================== Copia Uno =====================

        pdf.set_font('Arial', 'B', 7)
        pdf.image('logo menu 7.png', 15, 118, 50)
        #pdf.ln(3)
        #pdf.cell(w=50, h=10, txt="EMPRESA MINERA VIRGEN DE COTOCA S.R.L.", ln=10, align='C', border=0, fill=0) 
        #pdf.set_font('Arial', 'B', 7)
        #pdf.cell(w=365, h=0, txt="POTOSI-BOLIVIA", ln=10, align='C', border=0, fill=0)
        pdf.set_xy(x=215, y=115)
        pdf.ln(5) 
        pdf.set_font("Times", style="BI",size=12)
        pdf.cell(215, 7, 'EMPRESA MINERA VIRGEN DE COTOCA S.R.L.', 0, 1, 'C')
        #pdf.cell(0, 7, 'VIRGEN DE COTOCA', 0, 1, 'C')
        pdf.set_font("Times",size=8)
        pdf.cell(215, 4, 'OFICINA CENTRAL: AV. EL MINERO # 18', 0, 1, 'C')
        pdf.cell(215, 4, 'TELF: 6221020 * CEL: 72443475-69639245-73860757', 0, 1, 'C')
        pdf.cell(215, 4, 'NIT: 341040029 POTOSI-BOLIVIA', 0, 1, 'C')
        pdf.set_font("Times", style="BI",size=14)
        pdf.cell(215, 7, 'COMPROBANTE DE CAJA INGRESO', 0, 1, 'C')
        pdf.ln(5) 
        
        for fila in datos:
            
            pdf.set_xy(x=330, y=135)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "N°", 0, 0, "R")
            pdf.cell(30, 5, "00"+str(fila[0]), 0,0 , "R")

            pdf.set_xy(x=330, y=145)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "Bs: ", 0, 0, "R")
            pdf.cell(30, 5,  "{:,.2f}".format(fila[6]), 1, 1, "R") 
            #pdf.cell(30, 5, str(fila[7]), 1,1 , "R")
            
            dias_semana = {
                0: "LUNES",
                1: "MARTES",
                2: "MIERCOLES",
                3: "JUEVES",
                4: "VIERNES",
                5: "SABADO",
                6: "DOMINDO"
            }

            # Define el diccionario para traducir el mes
            meses_espanol = {
                1: "ENERO",
                2: "FEBRERO",
                3: "MARZO",
                4: "ABRIL",
                5: "MAYO",
                6: "JUNIO",
                7: "JULIO",
                8: "AGOSTO",
                9: "SEPTIEMBRE",
                10: "OCTUBRE",
                11: "NOVIEMBRE",
                12: "DICIEMBRE"
            }

            # Establece la fuente y el tamaño de la fuente
            pdf.set_font("Times", size=9)

            # Escribe el título "Fecha de Liquidacion:"
            
            pdf.set_xy(x=30, y=150)
            pdf.ln(5)
            #pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Times", style="BI", size=9)
            pdf.cell(30, 5, "Potosi, ", 0, 0, "L")
            pdf.set_font("Times", style="I",size=9)

            # Convierte la fecha de formato "2024-10-05" a "sábado, 5 de octubre de 2024"
            fecha = str(fila[2])  # asumiendo que fila[2] es la fecha en formato "2024-10-05"
            fecha_obj = datetime.strptime(fecha, "%Y-%m-%d")
            dia_semana = dias_semana[fecha_obj.weekday()]
            mes_espanol = meses_espanol[fecha_obj.month]
            fecha_formateada = f"{dia_semana}, {fecha_obj.day} DE {mes_espanol} DEL {fecha_obj.year}"

            # Escribe la fecha formateada en el PDF
            pdf.cell(45, 5, fecha_formateada, 0, 0, "L")

            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 5, "Recibi de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, str(fila[4]), 0, 1, "L")

            num = Decimal(fila[6])
            letras = num_letras(num)
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 5, "La Suma de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, letras, 0, 1, "L")
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 10, "Por Concepto de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.multi_cell(150, 5, str(fila[5]), 0, 1, "L") 

            pdf.ln(20)
            pdf.set_font("Arial", size=8)
            #pdf.cell(60, 0,"Preparado Por",0,0,"C")
            pdf.cell(70, 0,"Autorizado Por",0,0,"C")
            pdf.cell(70, 0,"Entregue Conforme",0,0,"C")
            pdf.cell(70, 0,"Recibi Conforme",0,1,"C")
            pdf.ln(3)
            pdf.cell(190, 5,"Ci..............................",0,0,"R")
        
        fecha_hora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        pdf.set_font("arial", "I", size=6)
        pdf.ln(0)
        pdf.cell(0, 5, txt=f"Fecha y hora de impresión:{fecha_hora}", border=0, align='L',ln=1)
        if self.username:  # Verificar si el nombre de usuario está definido
            pdf.cell(0, 0, txt=f"Usuario: {self.username}", border=0, align='L', ln=1)

        pdf.ln(15) 
        pdf.set_font("Times", style="BI",size=12)
        pdf.cell(0, 7, '. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .', 0, 1, 'C')
        #===================================== Copia Dos =====================
        
        pdf.set_font('Arial', 'B', 7)
        pdf.image('logo menu 7.png', 15, 228, 50)
        #pdf.ln(3)
        #pdf.cell(w=50, h=10, txt="EMPRESA MINERA VIRGEN DE COTOCA S.R.L.", ln=10, align='C', border=0, fill=0) 
        #pdf.set_font('Arial', 'B', 7)
        #pdf.cell(w=365, h=0, txt="POTOSI-BOLIVIA", ln=10, align='C', border=0, fill=0)
        pdf.set_xy(x=215, y=225)
        pdf.ln(5) 
        pdf.set_font("Times", style="BI",size=12)
        pdf.cell(215, 7, 'EMPRESA MINERA VIRGEN DE COTOCA S.R.L.', 0, 1, 'C')
        #pdf.cell(0, 7, 'VIRGEN DE COTOCA', 0, 1, 'C')
        pdf.set_font("Times",size=8)
        pdf.cell(215, 4, 'OFICINA CENTRAL: AV. EL MINERO # 18', 0, 1, 'C')
        pdf.cell(215, 4, 'TELF: 6221020 * CEL: 72443475-69639245-73860757', 0, 1, 'C')
        pdf.cell(215, 4, 'NIT: 341040029 POTOSI-BOLIVIA', 0, 1, 'C')
        pdf.set_font("Times", style="BI",size=14)
        pdf.cell(215, 7, 'COMPROBANTE DE CAJA INGRESO', 0, 1, 'C')
        pdf.ln(5) 
        
        for fila in datos:
            
            pdf.set_xy(x=330, y=245)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "N°", 0, 0, "R")
            pdf.cell(30, 5, "00"+str(fila[0]), 0,0 , "R")

            pdf.set_xy(x=330, y=255)
            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=13)
            pdf.cell(160, 5, "Bs: ", 0, 0, "R")
            pdf.cell(30, 5,  "{:,.2f}".format(fila[6]), 1, 1, "R") 
            #pdf.cell(30, 5, str(fila[7]), 1,1 , "R")
            
            dias_semana = {
                0: "LUNES",
                1: "MARTES",
                2: "MIERCOLES",
                3: "JUEVES",
                4: "VIERNES",
                5: "SABADO",
                6: "DOMINDO"
            }

            # Define el diccionario para traducir el mes
            meses_espanol = {
                1: "ENERO",
                2: "FEBRERO",
                3: "MARZO",
                4: "ABRIL",
                5: "MAYO",
                6: "JUNIO",
                7: "JULIO",
                8: "AGOSTO",
                9: "SEPTIEMBRE",
                10: "OCTUBRE",
                11: "NOVIEMBRE",
                12: "DICIEMBRE"
            }

            # Establece la fuente y el tamaño de la fuente
            pdf.set_font("Times", size=9)

            # Escribe el título "Fecha de Liquidacion:"
            
            pdf.set_xy(x=30, y=260)
            pdf.ln(5)
            #pdf.cell(30, 4, "", 0, 0, "L")
            pdf.set_font("Times", style="BI", size=9)
            pdf.cell(30, 5, "Potosi, ", 0, 0, "L")
            pdf.set_font("Times", style="I",size=9)

            # Convierte la fecha de formato "2024-10-05" a "sábado, 5 de octubre de 2024"
            fecha = str(fila[2])  # asumiendo que fila[2] es la fecha en formato "2024-10-05"
            fecha_obj = datetime.strptime(fecha, "%Y-%m-%d")
            dia_semana = dias_semana[fecha_obj.weekday()]
            mes_espanol = meses_espanol[fecha_obj.month]
            fecha_formateada = f"{dia_semana}, {fecha_obj.day} DE {mes_espanol} DEL {fecha_obj.year}"

            # Escribe la fecha formateada en el PDF
            pdf.cell(45, 5, fecha_formateada, 0, 0, "L")

            pdf.ln(5) 
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 5, "Recibi de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, str(fila[4]), 0, 1, "L")

            num = Decimal(fila[6])
            letras = num_letras(num)
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 5, "La Suma de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.cell(45, 5, letras, 0, 1, "L")
            
            pdf.set_font("Times", style="BI",size=9)
            pdf.cell(30, 10, "Por Concepto de :", 0, 0, "L")
            pdf.set_font("Times",style="I",size=9)
            pdf.multi_cell(150, 5, str(fila[5]), 0, 1, "L") 

            pdf.ln(20)
            pdf.set_font("Arial", size=8)
            #pdf.cell(60, 0,"Preparado Por",0,0,"C")
            pdf.cell(70, 0,"Autorizado Por",0,0,"C")
            pdf.cell(70, 0,"Entregue Conforme",0,0,"C")
            pdf.cell(70, 0,"Recibi Conforme",0,1,"C")
            pdf.ln(3)
            pdf.cell(190, 5,"Ci..............................",0,0,"R")
        
        fecha_hora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        pdf.set_font("arial", "I", size=6)
        pdf.ln(0)
        pdf.cell(0, 5, txt=f"Fecha y hora de impresión:{fecha_hora}", border=0, align='L',ln=1)
        if self.username:  # Verificar si el nombre de usuario está definido
            pdf.cell(0, 0, txt=f"Usuario: {self.username}", border=0, align='L', ln=1)
   
        #====================================================================

        # Guardar el archivo PDF
        pdf.output('Comp. de Ingreso.pdf', "F")

        # Crear un archivo temporal
        temp_file = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False)

        # Abrir el archivo PDF generado
        import os
        os.startfile('Comp. de Ingreso.pdf')
        
        # Eliminar el archivo temporal cuando se cierre
        temp_file.close()

    def generar_reporte_comprobantes_editar(self,e):
        radio_value = self.radio_group.value

        if radio_value == "1":  # Comparar con cadena "1"
            self.generar_reporte_editar_egreso(e)
        elif radio_value == "2":  # Comparar con cadena "2"
            self.generar_reporte_editar_ingreso(e)
            


class FrameOchoDos(ft.Control):
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.data_entries = []
        self.selected_index = None
        self.filtered_entries = []
        self.dropdownAntiguoNombre = None  # Inicializa el atributo aquí
        self.username = None  # Propiedad para almacenar el nombre de usuario
        self.create_ui_elements()
        self.actualizarListView() 
        self.cola_mensajes = queue.Queue()  # Cola para almacenar los mensajes
        self.mostrando_mensaje = False      # Bandera para controlar si se está mostrando un mensaje
        
    def create_ui_elements(self):
        # Crear los widgets con tamaños ajustados
        self.texboxidtipogasto = ft.TextField(label="Id Tipo Gasto",text_align=ft.TextAlign.RIGHT, width=600, height=50, text_size=18, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texboxtipogasto = ft.TextField(label="Tipo Gasto",text_align=ft.TextAlign.RIGHT,width=600, min_lines=1, max_lines=None, text_size=18,border_color="teal",border_radius=10,border=ft.border.all(0, ft.Colors.WHITE),multiline=True, expand=True,)
        
        # Títulos de las columnas
        self.column_titles = Row(
            controls=[
                Text("   Num", width=600, weight="bold", size=12),
                Text("Tipo Gasto", width=600, weight="bold", size=12),
            ],
            spacing=10,
            expand=True,
        )

        # ListView para mostrar los datos
        self.listview = ListView(
            expand=True,
            spacing=5,
            padding=5,
            auto_scroll=True,
        )

        # Botones con el mismo tamaño
        self.boton_guardar_caja = ElevatedButton(
            text="GUARDAR", on_click=self.guardar_tipo_gasto, width=200,height=40,
            bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=self.on_hover_boton_guardar_rec
        )
        self.boton_editar_caja = ElevatedButton(
        text="EDITAR", on_click=self.Modificar_tipo_gasto, width=200,height=40,
            bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=self.on_hover_boton_editar_rec
        )
        self.boton_eliminar_caja = ElevatedButton(
            text="ELIMINAR", on_click=self.Eliminar_tipo_gasto, width=200,height=40,
            bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=self.on_hover_boton_eliminar_rec
        )

        self.selected_row_index = None

        # Título principal
        self.title_container = ft.Container(
            content=ft.Text(
                value="REGISTRO TIPOS DE GASTO",
                size=24,
                weight="bold",
                color=ft.Colors.TEAL,
                text_align=ft.TextAlign.CENTER
            ),
            alignment=ft.alignment.center,
            padding=0
        )

        # Contenedor de color teal con inputs de borde blanco
        self.teal_container = ft.Container(
            
            #bgcolor="#0f386a",
            padding=10,
            content=ft.Column(
                controls=[
                    ft.ResponsiveRow(
                        controls=[
                            ft.Column(controls=[self.texboxidtipogasto], col={"xs": 12, "sm": 6, "md": 6, "lg": 12, "xl": 12}),
                            ft.Column(controls=[self.texboxtipogasto], col={"xs": 12, "sm": 6, "md": 6, "lg": 12, "xl": 12}),
                        ],
                        alignment=ft.MainAxisAlignment.CENTER,
                        
                        spacing=10,
                    ),
                ],
                scroll=ft.ScrollMode.AUTO,
                expand=True  # Ajusta la altura según sea necesario
            ),
            expand=True,
            
            border_radius=10
        )

        self.listview_container = Container(
            content=Column(
                controls=[self.listview],
                alignment=alignment.center,
                scroll=ft.ScrollMode.AUTO,
                height=320,
                width=1500,
            ),
            padding=padding.all(10),
        )

        # Contenedor para los botones
        self.buttons_container = ft.Container(
            content=ft.Column(
                controls=[
                    self.boton_guardar_caja,
                    self.boton_editar_caja,
                    self.boton_eliminar_caja,            
                ],
                alignment=ft.MainAxisAlignment.CENTER,
                spacing=10,
                expand=True
            ),
            padding=5,
            expand=True,
            border_radius=10
        )

        self.scrollable_content = ft.Column(
            controls=[
                ft.Row(
                    controls=[
                        ft.Column(
                            controls=[
                                self.teal_container
                            ],
                            expand=8
                        ),
                        ft.Column(
                            controls=[
                                self.buttons_container
                            ],
                            expand=2
                        )
                    ],
                    expand=True
                ),
                ft.Column(
                    controls=[
                        self.column_titles,
                        self.listview_container
                    ],
                    expand=1.3
                ),
            ],
            scroll=ft.ScrollMode.AUTO,  # Habilitar scroll
            expand=True
        )

        # Asignar el título y el contenido desplazable a los controles
        self.controls = [
            self.title_container,  # Título fijo
            self.scrollable_content  # Contenido con scroll
        ]

        # Contenedor principal

    def on_hover_boton_guardar_rec(self, e):
        self.boton_guardar_caja.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_guardar_caja.update()

    def on_hover_boton_editar_rec(self, e):
        self.boton_editar_caja.bgcolor = "orange" if e.data == "true" else "teal"
        self.boton_editar_caja.update()

    def on_hover_boton_eliminar_rec(self, e):
        self.boton_eliminar_caja.bgcolor = "red" if e.data == "true" else "teal"
        self.boton_eliminar_caja.update()
 
    def mostrar_mensaje8_1(self, mensaje, tipo="error"):
        """
        Agrega un mensaje a la cola para mostrarlo en un SnackBar.
        
        Parámetros:
            mensaje (str): El mensaje a mostrar.
            tipo (str): Tipo de mensaje ("éxito", "error" o "advertencia").
        """
        # Definir el color de fondo según el tipo de mensaje
        if tipo == "éxito":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.GREEN)  # 70% de opacidad
        elif tipo == "advertencia":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.TEAL)   # 70% de opacidad
        else:  # Por defecto, es un error
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.RED)    # 70% de opacidad
        
        # Crear el contenido del SnackBar con bordes redondeados y transparencia
        snack_content = ft.Container(
            content=ft.Text(mensaje, size=18, color=ft.Colors.WHITE),  # Texto del mensaje en blanco
            bgcolor=color_fondo,                              # Color de fondo con transparencia
            border_radius=10,                                 # Bordes redondeados de 10
            padding=10,                                       # Espaciado interno
        )
        
        # Crear el SnackBar
        snack_bar = ft.SnackBar(
            content=snack_content,  # Usar el contenedor con bordes redondeados y transparencia
            open=True,              # Abrir automáticamente
            duration=5000,          # Duración de 5 segundos
            bgcolor=ft.Colors.TRANSPARENT,  # Fondo transparente para el SnackBar
        )
        
        # Agregar el mensaje a la cola
        self.cola_mensajes.put(snack_bar)
        
        # Iniciar el proceso de mostrar mensajes si no está en curso
        if not self.mostrando_mensaje:
            self.mostrar_siguiente_mensaje()

    def mostrar_siguiente_mensaje(self):
        """
        Muestra el siguiente mensaje en la cola.
        """
        if not self.cola_mensajes.empty():
            self.mostrando_mensaje = True
            snack_bar = self.cola_mensajes.get()
            
            # Mostrar el SnackBar
            self.page.overlay.append(snack_bar)
            self.page.update()
            
            # Esperar a que el mensaje se cierre antes de mostrar el siguiente
            threading.Timer(5, self.cerrar_mensaje).start()  # 5 segundos de duración
        else:
            self.mostrando_mensaje = False

    def cerrar_mensaje(self):
        """
        Cierra el mensaje actual y muestra el siguiente.
        """
        self.page.overlay.clear()  # Limpiar el SnackBar actual
        self.page.update()
        self.mostrar_siguiente_mensaje()  # Mostrar el siguiente mensaje

    
    def limpiar_campos(self):
        # Limpiar todos los campos de texto
        self.texboxidtipogasto.value = ""
        self.texboxtipogasto.value = ""
        self.page.update()

    def guardar_tipo_gasto(self, e):
        # Verificar que todos los widgets estén inicializados
        if any(var is None for var in [self.texboxidtipogasto, self.texboxtipogasto]):
            self.mostrar_mensaje8_1("Los widgets no están inicializados", tipo="advertencia")            
            return

        # Obtener valores de los widgets
        values = []
        for widget in [self.texboxtipogasto]:
            value = widget.value
            if value is None or value == '':
                self.mostrar_mensaje8_1(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                return
            values.append(value)

        tipo_gasto= self.texboxidtipogasto.value

        try:
            # Insertar valores en la base de datos
            CTipoGasto.IngresarTipoGasto(self.page,*values)
            self.actualizarListView()
            
            # Limpiar todos los widgets
            self.limpiar_campos()
            
        except ValueError as e:
            self.mostrar_mensaje8_1(f"Error: {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje8_1(f"Error: {e}", tipo="error")

    def actualizarListView(self):
        try:
            # Limpiar la lista
            self.listview.controls.clear()

            # Obtener los nuevos datos
            datos = CTipoGasto.mostrarTipoGasto()

            # Insertar los nuevos datos en la lista
            for index, row in enumerate(datos):
                self.listview.controls.append(
                    GestureDetector(
                        content=Container(
                            content=Row(
                                controls=[
                                    Text(row[0], width=100),
                                    Text(row[1], width=800),
                                ],
                                alignment=ft.MainAxisAlignment.START,
                            ),
                            padding=10,
                            border=border.all(1, Colors.TEAL),
                            border_radius=10,
                        ),
                        on_tap=lambda e, row=row, index=index: self.seleccionarRegistro(row, index)
                    )
                )
            self.page.update()
        except ValueError as error:
            print('Error al Actualizar Lista {}'.format(error))

    def seleccionarRegistro(self, row, index):
        try:
            self.selected_row_index = index

            # Establecer los valores en los campos de texto
            self.texboxidtipogasto.value = row[0]
            self.texboxtipogasto.value = row[1]
            
            # Marcar la fila seleccionada
            for i, control in enumerate(self.listview.controls):
                container = control.content
                if i == self.selected_row_index:  # Ajuste del índice
                    container.border = border.all(2, Colors.TEAL)
                    for cell in container.content.controls:
                        cell.color = Colors.TEAL
                else:
                    container.border = border.all(1, Colors.TEAL)
                    for cell in container.content.controls:
                        cell.color = Colors.BLACK
            self.page.update()
        except Exception as error:
            print(f'Error al seleccionar Registro {error}')

    def Modificar_tipo_gasto(self, e):
        # Verificar si los widgets están inicializados  
        if any(var is None for var in [self.texboxtipogasto, self.texboxidtipogasto]):
            self.mostrar_mensaje8_1("Los widgets no están inicializados", tipo="advertencia")            
            return

        values = []
        for widget in [self.texboxtipogasto, self.texboxidtipogasto]:
            value = widget.value
            if value is None or value == '':
                self.mostrar_mensaje8_1(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                return
            values.append(value)
        try:
            CTipoGasto.ModificarTipoGasto(self.page, *values)
            self.actualizarListView()
            self.limpiar_campos()

        except ValueError as e:
            self.mostrar_mensaje8_1(f"Error: {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje8_1(f"Error: {e}", tipo="error")

    def Eliminar_tipo_gasto(self, e):
        # Verificar si los widgets están inicializados  
        if any(var is None for var in [self.texboxidtipogasto]):
            self.mostrar_mensaje8_1("Los widgets no están inicializados", tipo="advertencia")            
            return

        values = []
        for widget in [self.texboxidtipogasto,]:
            value = widget.value
            if not value:
                self.mostrar_mensaje8_1(f'Seleccione Un Tipo de Gasto', tipo="advertencia")                           
                return
            values.append(value)

        try:
            CTipoGasto.EliminarTipoGasto(self.page, *values)
            self.actualizarListView()
            self.limpiar_campos()

        except ValueError as e:
            self.mostrar_mensaje8_1(f"Error de Eliminacion: {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje8_1(f"Error: No se eliminaron los registros: {e}", tipo="error")

    
class FrameOchoTres(ft.Control):
    def __init__(self, page, username = None):
        super().__init__()
        self.page = page
        self.username = username
        self.create_ui_elements()
        self.fill_denominations()

    def mostrar_mensaje4(self, mensaje, tipo="error"):
        """
        Muestra un mensaje en un SnackBar.
        
        Parámetros:
            mensaje (str): El mensaje a mostrar.
            tipo (str): Tipo de mensaje ("éxito", "error" o "advertencia").
        """
        # Definir el color de fondo según el tipo de mensaje
        if tipo == "éxito":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.GREEN)  # 70% de opacidad
        elif tipo == "advertencia":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.TEAL)   # 70% de opacidad
        else:  # Por defecto, es un error
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.RED)    # 70% de opacidad
        
        # Crear el contenido del SnackBar con bordes redondeados y transparencia
        snack_content = ft.Container(
            content=ft.Text(mensaje, size=18, color=ft.Colors.WHITE),  # Texto del mensaje en blanco
            bgcolor=color_fondo,                              # Color de fondo con transparencia
            border_radius=10,                                 # Bordes redondeados de 10
            padding=10,                                       # Espaciado interno
        )
        
        # Crear el SnackBar
        snack_bar = ft.SnackBar(
            content=snack_content,  # Usar el contenedor con bordes redondeados y transparencia
            open=True,              # Abrir automáticamente
            duration=5000,          # Duración de 5 segundos
            bgcolor=ft.Colors.TRANSPARENT,  # Fondo transparente para el SnackBar
        )
        
        # Agregar el SnackBar a la página y actualizar la UI
        self.page.overlay.append(snack_bar)
        self.page.update()

    def create_ui_elements(self):
        # Título
        self.titulo_container = Container(
            content=Text("REPORTE INGRESOS Y EGRESOS CAJA", size=24, weight="bold", text_align="center", color=Colors.TEAL),
            alignment=alignment.center,
            padding=padding.all(0),
        )

        # Títulos de las columnas
        self.column_titles = ft.Row(
            controls=[
                ft.Text("Comp.", width=50, weight="bold", size=10),
                ft.Text("Tipo de Cuenta", width=150, weight="bold", size=10),
                ft.Text("Fecha", width=80, weight="bold", size=10),
                ft.Text("Lote", width=80, weight="bold", size=10),
                ft.Text("Nombres Apellidos", width=150, weight="bold", size=10),
                ft.Text("Glosa", width=400, weight="bold", size=10),
                ft.Text("Ingreso", width=80, weight="bold", size=10),
                ft.Text("Egreso", width=80, weight="bold", size=10),
                ft.Text("Saldo", width=80, weight="bold", size=10),
            ],
            spacing=2,
            expand=True,
        )

        # Contenedor para los resultados con Column en lugar de ListView
        self.listview_container = ft.Container(
            content=ft.Column(
                spacing=1,
                scroll=ft.ScrollMode.AUTO,
            ),
            height=200,
            #border=ft.border.all(1, ft.Colors.GREY_300),
        )

        # Entradas de fecha usando TextField
        self.entry_fecha_inicio = ft.TextField(
            label="Fecha Inicio (YYYY-MM-DD)",
            value=datetime.today().strftime('%Y-%m-%d'),
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )
        self.entry_fecha_fin = ft.TextField(
            label="Fecha Fin (YYYY-MM-DD)",
            value=datetime.today().strftime('%Y-%m-%d'),
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )

        # ComboBox para denominación
        self.combo_denominacion = ft.Dropdown(
            label="Tipo de Gasto", 
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE),
            value="TODAS"
        )

        # Entrada para número de lote
        self.entry_num_lote_inicio = ft.TextField(
            label="Número de Lote", 
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )

        # Campo de búsqueda en tiempo real
        self.search_field = ft.TextField(
            label="Buscar por nombre o Tipo de Gasto",
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE),
            on_change=self.buscar_en_tiempo_real
        )

        # Checkboxes para incluir/excluir valores cero
        self.valor_cero_var = ft.Checkbox(label="Excluir valor cero", value=False)
        self.valor_cero_var_incluir = ft.Checkbox(label="Incluir solo valor cero", value=False)

        # Radio buttons para tipo de consulta
        self.consulta_tipo_var = ft.RadioGroup(
            content=ft.ResponsiveRow(
                controls=[
                    ft.Column(
                        controls=[ft.Radio(value="1", label="Fecha")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=10,
                    ),
                    ft.Column(
                        controls=[ft.Radio(value="2", label="Número de lote")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=10,
                    ),
                    ft.Column(
                        controls=[ft.Radio(value="3", label="Fecha Liq")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=2,
                    ),
                ],
                spacing=10,
            ),
            value="1"
        )

        # Botones
        self.boton_ejecutar = ft.ElevatedButton(
            text="Ejecutar consulta",
            on_click=lambda e: self.ejecutar_consulta1(e),
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_ejecutar
        )
        self.boton_exportar = ft.ElevatedButton(
            text="Visualizar",
            on_click=self.crear_reporte_general,
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_exportar
        )
        self.boton_exportar_xls = ft.ElevatedButton(
            text="Exportar a XLS",
            on_click=self.exportar_a_excel,
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_exportar_xls
        )

        # Contenedor principal con scroll
        self.scrollable_content = ft.Column(
            controls=[
                self.titulo_container,
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.entry_fecha_inicio], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.entry_fecha_fin], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.combo_denominacion], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.entry_num_lote_inicio], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                    ],
                    spacing=10,
                ),
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.search_field], col={"xs": 12, "sm": 6, "md": 6, "lg": 6}, spacing=10),
                        ft.Column(controls=[self.consulta_tipo_var,], col={"xs": 12, "sm": 6, "md": 6, "lg": 6}, spacing=10),
                        #ft.Column(controls=[self.valor_cero_var_incluir], col={"xs": 12, "sm": 6, "md": 3, "lg": 3}, spacing=10),
                    ],
                    spacing=10,
                ),
                
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.boton_ejecutar], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                        ft.Column(controls=[self.boton_exportar], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                        ft.Column(controls=[self.boton_exportar_xls], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                    ],
                    spacing=10,
                ),
                self.column_titles,
                self.listview_container,
            ],
            scroll=ft.ScrollMode.AUTO,
            expand=True,
        )

        self.controls = [self.scrollable_content]

    def on_hover_boton_ejecutar(self, e):
        self.boton_ejecutar.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_ejecutar.update()

    def on_hover_boton_exportar(self, e):
        self.boton_exportar.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_exportar.update()

    def on_hover_boton_exportar_xls(self, e):
        self.boton_exportar_xls.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_exportar_xls.update()

    def fill_denominations(self):
        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    cursor.execute("SELECT 'TODAS' AS TipoGasto UNION SELECT DISTINCT TipoGasto FROM TipoGasto ORDER BY TipoGasto")
                    denominaciones = cursor.fetchall()
                    self.combo_denominacion.options = [ft.dropdown.Option(denominacion[0]) for denominacion in denominaciones]
        except Exception as ex:
            self.mostrar_mensaje4(f"Error al cargar Tipo Gasto: {str(ex)}", "error")

    def buscar_en_tiempo_real(self, e):
        """Realiza la búsqueda en tiempo real mientras se escribe"""
        search_term = self.search_field.value.strip()
        if len(search_term) >= 3 or not search_term:
            self.ejecutar_consulta1(e, search_term)

    def ejecutar_consulta1(self, e, search_term=""):
        denominacion = self.combo_denominacion.value
        try:
            fecha_inicio = datetime.strptime(self.entry_fecha_inicio.value, "%Y-%m-%d").strftime("%Y-%m-%d")
            fecha_fin = datetime.strptime(self.entry_fecha_fin.value, "%Y-%m-%d").strftime("%Y-%m-%d")
        except ValueError:
            self.mostrar_mensaje4("Formato de fecha incorrecto. Use YYYY-MM-DD.", "error")
            return

        consulta_tipo = self.consulta_tipo_var.value
        valor_cero = self.valor_cero_var.value
        num_lote_inicio = self.entry_num_lote_inicio.value

        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    consulta = """
                        SELECT 
                            c.IdComprobantes, 
                            tg.TipoGasto AS TipoGastoDescripcion, 
                            c.FechaComp, 
                            CONCAT(COALESCE(Liquidacion.NombreInicial, '0-'), 
                                CASE WHEN Liquidacion.NombreInicial IS NOT NULL THEN '-' ELSE '' END, 
                                Recepcion.Numlote) as LoteCompleto,
                            c.NombresApellidos AS Proveedor, 
                            c.Glosa, 
                            c.Ingreso, 
                            c.Egreso, 
                            c.Saldocaja
                        FROM Comprobantes c 
                        INNER JOIN TipoGasto tg ON c.TipoGasto = tg.TipoGasto 
                        INNER JOIN Recepcion ON c.NumLote = Recepcion.NumLote 
                        LEFT JOIN  Liquidacion ON Recepcion.NumLote = Liquidacion.NumLote 
                        LEFT JOIN Inicial ON Inicial.NombreInicial = Liquidacion.NombreInicial
                        WHERE 
                        Recepcion.NumLote >= 0  -- Excluir lote 0
                    """

                    params = []

                    if denominacion != 'TODAS':
                        consulta += " AND tg.TipoGasto = %s"
                        params.append(denominacion)
                    
                    if consulta_tipo == "1":
                        consulta += " AND c.FechaComp BETWEEN %s AND %s"
                        params.extend([fecha_inicio, fecha_fin])
                    elif consulta_tipo == "2":
                        num_lotes = [int(x) for x in num_lote_inicio.split(',')]
                        consulta += f" AND Recepcion.NumLote IN ({','.join(['%s']*len(num_lotes))})"
                        params.extend(num_lotes)
                    elif consulta_tipo == "3":
                        consulta += " AND Liquidacion.fechaliq BETWEEN %s AND %s"
                        params.extend([fecha_inicio, fecha_fin])
                    
                    if valor_cero:
                        consulta += " AND TPrecioSus = 0"
                    
                    if search_term:
                        consulta += " AND (c.NombresApellidos LIKE %s OR Recepcion.Denominacion LIKE %s)"
                        search_param = '%' + search_term + '%'
                        params.extend([search_param, search_param])
                    
                    consulta += " ORDER BY c.idcomprobantes"

                    cursor.execute(consulta, params)
                    resultados = cursor.fetchall()

                    if resultados:
                        self.mostrar_mensaje4(f"¡Éxito! Se encontraron {len(resultados)} registros.", "éxito")
                        self.mostrar_resultados(resultados)
                    else:
                        self.mostrar_mensaje4("No se encontraron registros que coincidan con los criterios de búsqueda.", "advertencia")

        except ValueError as e:
            self.mostrar_mensaje4("Error de entrada: Asegúrate de que los números de lote sean enteros y estén separados por comas.", "error")
        except Exception as ex:
            self.mostrar_mensaje4(f"Error al ejecutar la consulta: {str(ex)}", "error")

    def mostrar_resultados(self, resultados):
        # Limpiar los controles existentes
        self.listview_container.content.controls.clear()
        
        # Definir anchos personalizados para cada columna
        column_widths = {
            0: 50,   # Id Comprobantes
            1: 150,  # Tipo de Gasto
            2: 80,   # Fecha Comprobantes
            3: 80,   # Lote Completo
            4: 150,  # Proveedor
            5: 400,  # Glosa
            6: 80,   # Ingreso
            7: 80,   # Egreso
            8: 80,   # Saldo
        }
        
        for resultado in resultados:
            row_data = [
                str(resultado[0]),  # IdComprobantes
                str(resultado[1]),  # TipoGastoDescripcion
                str(resultado[2]),  # FechaComp
                str(resultado[3]),  # LoteCompleto
                str(resultado[4]),  # Proveedor
                str(resultado[5]),  # Glosa
                self._parse_float(resultado[6]),  # Ingreso
                self._parse_float(resultado[7]),  # Egreso
                self._parse_float(resultado[8])   # Saldocaja
            ]
            
            row_controls = []
            for i, dato in enumerate(row_data):
                width = column_widths.get(i, 50)
                # Alinear a la derecha solo para valores numéricos
                text_align = ft.TextAlign.RIGHT if i in [6, 7, 8] else ft.TextAlign.LEFT
                
                row_controls.append(
                    ft.Text(
                        str(dato),
                        size=12,
                        width=width,
                        text_align=text_align
                    )
                )
            
            row = ft.Row(controls=row_controls, spacing=1)
            container = ft.Container(
                content=row,
                padding=1,
                border=ft.border.all(1, ft.Colors.TEAL),
                border_radius=5,
            )
            self.listview_container.content.controls.append(container)
        
        self.page.update()

    def _parse_float(self, value):
        """Convierte valores a float cuando es posible"""
        try:
            return Decimal(value) if value not in (None, "") else 0.0
        except (ValueError, TypeError):
            return value


    def set_username(self, username):
        self.username = username
    
    def crear_reporte_general(self, e):
        datos = []
        for child in self.listview_container.content.controls:
            if isinstance(child, ft.Container):
                row = child.content
                datos.append([cell.value for cell in row.controls if isinstance(cell, ft.Text)])
        
        if not datos:
            self.mostrar_mensaje4("No hay datos para generar el reporte.", "advertencia")            
            return
        

        try:
            total_ingreso = sum(float(fila[6]) for fila in datos)
            total_egreso = sum(float(fila[7]) for fila in datos)
            total_saldo = sum(float(fila[8]) for fila in datos)
            
            tabla_config = {
        "columnas": [
            {"nombre": "Comp.", "ancho": 10, "align": "C"},
            {"nombre": "Tipo Cuenta", "ancho": 40, "align": "L"},                        
            {"nombre": "Fecha", "ancho": 15, "align": "C"},
            {"nombre": "Lote", "ancho": 10, "align": "C"},
            {"nombre": "Nombre Apellidos", "ancho": 40, "align": "L"},           
            {"nombre": "Glosa", "ancho": 100, "align": "L"},
            {"nombre": "Ingreso", "ancho": 15, "align": "R"},
            {"nombre": "Egreso", "ancho": 15, "align": "R"},
            {"nombre": "Saldo", "ancho": 15, "align": "R"}
        ],
        "filas": datos,
        "totales": {
            "Ingreso": "{:.2f}".format(round(sum(float(fila[6]) for fila in datos), 2)),
            "Egreso": "{:.2f}".format(round(sum(float(fila[7]) for fila in datos), 2)),
            "Saldo": "{:.2f}".format(round((sum(float(fila[6]) for fila in datos) - sum(float(fila[7]) for fila in datos)),2)), 
            "Nº de Filas": len(datos)
        }
    }

            class PDFWithHeaderFooter(FPDF):
                def __init__(self, *args, **kwargs):
                    self.valor_cero_var = kwargs.pop('valor_cero_var', False)
                    self.valor_cero_var_incluir = kwargs.pop('valor_cero_var_incluir', False)
                    self.fecha_inicio = kwargs.pop('fecha_inicio', '')
                    self.fecha_fin = kwargs.pop('fecha_fin', '')
                    self.num_lote_inicio = kwargs.pop('num_lote_inicio', '')
                    self.denominacion = kwargs.pop('denominacion', 'TODAS')
                    self.consulta_tipo = kwargs.pop('consulta_tipo', '1')
                    self.username = kwargs.pop('username', None)
                    super().__init__(*args, **kwargs)

                def header(self):
                    if self.page_no() == 1:
                        self.set_font("Arial", size=11, style="B")
                        self.cell(0, 5, txt="EMPRESA MINERA VIRGEN DE COTOCA S.R.L.", ln=True, align="C")
                        self.cell(0, 5, txt="REPORTE GENERAL MOVIMIENTO DE CAJA", ln=True, align="C")
                        self.ln(3)
                        
                        self.set_font("Arial", size=8)
                        self.set_x(250)
                        
                        subtitulo_left = ""
                        if self.valor_cero_var:
                            subtitulo_left = "Incluidos Valores Cero" if self.valor_cero_var_incluir else "Excluidos Valores Cero"

                        if self.fecha_inicio and self.fecha_fin:
                            subtitulo_left += f" - Del {self.fecha_inicio} al {self.fecha_fin}"

                        if self.num_lote_inicio:
                            subtitulo_left += f" - Lote {self.num_lote_inicio}"

                        if self.denominacion != 'TODAS':
                            subtitulo_left += f" - {self.denominacion}"
                        
                        self.cell(0, 7, txt=subtitulo_left, ln=0, align="L")
                        
                        subtitulo = ""
                        if self.consulta_tipo == "1":
                            subtitulo = "Reporte por Fecha de Recepcion"
                        elif self.consulta_tipo == "2":
                            subtitulo = "Reporte por Numero de Lote"
                        elif self.consulta_tipo == "3":
                            subtitulo = "Reporte por Fecha de Liquidacion"
                        
                        self.set_x(15)
                        self.cell(0, 7, txt=subtitulo, ln=True, align="L")
                        self.ln(0)

                def footer(self):
                    self.set_y(-15)
                    self.set_font("Arial", size=8)
                    self.cell(0, 10, f"Página {self.page_no()} de {{nb}}", 0, 0, "C")
                    self.set_y(-15)
                    self.set_font("Arial", size=7)
                    self.cell(0, 10, f"Fecha y hora de impresión: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", 0, 0, "L")
                    self.ln(2)
                    if self.username:
                        self.cell(0, 10, txt=f"Usuario: {self.username}", border=0, align='L', ln=1)
        
            pdf = PDFWithHeaderFooter(
                orientation='L', 
                unit='mm', 
                format='Letter',
                valor_cero_var=self.valor_cero_var.value,
                valor_cero_var_incluir=self.valor_cero_var_incluir.value,
                fecha_inicio=self.entry_fecha_inicio.value,
                fecha_fin=self.entry_fecha_fin.value,
                num_lote_inicio=self.entry_num_lote_inicio.value,
                denominacion=self.combo_denominacion.value,
                consulta_tipo=self.consulta_tipo_var.value,
                username=self.username
            )
            
            pdf.set_auto_page_break(auto=True, margin=15)
            pdf.alias_nb_pages()
            pdf.add_page()
            
            # Tabla
            primera_hoja = True
            while len(tabla_config["filas"]) > 0:
                # Dibujar títulos de columnas en cada hoja
                pdf.set_font("Arial", size=7, style="B")
                for columna in tabla_config["columnas"]:
                    pdf.cell(columna["ancho"], 4, txt=columna["nombre"], border=1, align="C")
                pdf.ln(8)
                pdf.set_font("Arial", size=7)

                # Dibujar tabla en cada hoja
                if primera_hoja:
                    filas_por_hoja = 22
                else:
                    filas_por_hoja = 25
                for i, fila in enumerate(tabla_config["filas"][:filas_por_hoja]):
                    max_height = 7  # Altura mínima de la fila
                    for j, columna in enumerate(tabla_config["columnas"]):
                        if i % 2 == 0:
                            pdf.set_fill_color(240, 240, 240)  # Color claro
                        else:
                            pdf.set_fill_color(255, 255, 255)  # Color blanco
                        pdf.cell(columna["ancho"], max_height, txt=str(fila[j]), border=0, align=columna["align"], fill=True)
                    pdf.ln(max_height)

                # Eliminar filas procesadas
                del tabla_config["filas"][:filas_por_hoja]

                # Agregar hoja adicional si hay más filas
                if len(tabla_config["filas"]) > 0:
                    pdf.add_page()
                    primera_hoja = False
            
            # Totales
            pdf.ln(2)
            pdf.set_font("Arial", size=7, style="B")
            pdf.cell(215, 7, txt="Totales", border=1, align="C", ln=False)
            pdf.cell(15, 7, txt=str(tabla_config["totales"]["Ingreso"]), border=1, align="R")
            pdf.cell(15, 7, txt=str(tabla_config["totales"]["Egreso"]), border=1, align="R")
            pdf.cell(15, 7, txt=str(tabla_config["totales"]["Saldo"]), border=1, align="R")
            
            pdf.ln(7)
            pdf.cell(0, 7, txt=f"Nº de Comprobantes: {tabla_config['totales']['Nº de Filas']}", ln=True, align="L")

            pdf.output("Reporte General.pdf", "F")
            os.startfile('Reporte General.pdf')
            self.page.update()
            self.mostrar_mensaje4(f"Reporte Generado correctamente ", "éxito")


        except Exception as ex:
            self.mostrar_mensaje4(f"Error al generar el reporte: {str(ex)}", "error")            

    def exportar_a_excel(self, e):
        try:
            if not self.listview_container.content.controls:
                self.mostrar_mensaje4("No hay datos para exportar a Excel", "advertencia")
                return

            # Obtener los encabezados de las columnas
            encabezados = [control.value for control in self.column_titles.controls if isinstance(control, ft.Text)]

            # Obtener los datos del ListView con sus tipos correctos
            datos = []
            for child in self.listview_container.content.controls:
                if isinstance(child, ft.Container):
                    row_data = []
                    for cell in child.content.controls:
                        if isinstance(cell, ft.Text):
                            value = cell.value
                            # Intentar convertir a número si es posible
                            try:
                                # Limpiar el valor (quitar comas, puntos, etc.)
                                cleaned_value = str(value).replace(',', '').strip()
                                if cleaned_value.replace('.', '', 1).isdigit():
                                    value = float(cleaned_value)
                            except (ValueError, AttributeError):
                                pass
                            row_data.append(value)
                    datos.append(row_data)

            # Crear libro de Excel
            wb = Workbook()
            ws = wb.active
            ws.title = "Reporte de Compra"

            # Agregar encabezados
            ws.append(encabezados)

            # Agregar datos con tipos correctos
            for fila in datos:
                ws.append(fila)

            # Definir qué columnas son numéricas y su formato
            columnas_numericas = {
                'G': {'nombre': 'T.M.B.', 'formato': '0.000'},
                'H': {'nombre': 'T.M.H.', 'formato': '0.000'},
                'I': {'nombre': 'H2O', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'J': {'nombre': 'T.H.2.O.', 'formato': '0.000'},
                'K': {'nombre': 'T.N.S.', 'formato': '0.00000'},
                'L': {'nombre': 'Zn', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'M': {'nombre': 'Ag', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'N': {'nombre': 'Pb', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'O': {'nombre': 'KF Zn', 'formato': '0.000'},
                'P': {'nombre': 'KF Ag', 'formato': '0.000'},
                'Q': {'nombre': 'KF Pb', 'formato': '0.000'},
                'R': {'nombre': 'Precio Sus', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'S': {'nombre': 'Valor Neto', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'T': {'nombre': 'Descuentos', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'U': {'nombre': 'Bono Trans', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'V': {'nombre': 'Bono Extra', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'W': {'nombre': 'Pagable', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2}
            }

            # Aplicar formatos a las columnas numéricas
            for col_letter, col_info in columnas_numericas.items():
                for cell in ws[col_letter][1:]:  # Excluye el encabezado
                    if isinstance(cell.value, (int, float)):
                        cell.number_format = col_info['formato']

            # Ajustar ancho de columnas automáticamente
            for col in ws.columns:
                max_length = 0
                column = col[0].column_letter
                for cell in col:
                    try:
                        cell_length = len(str(cell.value))
                        if cell_length > max_length:
                            max_length = cell_length
                    except:
                        pass
                adjusted_width = (max_length + 2) * 1.2
                ws.column_dimensions[column].width = adjusted_width

            # Guardar archivo con nombre único
            fecha_actual = datetime.now().strftime("%Y%m%d_%H%M%S")
            nombre_archivo = f"Reporte_Compra_{fecha_actual}.xlsx"
            
            # Crear directorio si no existe
            os.makedirs("reportes_excel", exist_ok=True)
            ruta_completa = os.path.join("reportes_excel", nombre_archivo)
            
            wb.save(ruta_completa)

            # Mostrar mensaje de éxito
            self.mostrar_mensaje4(f"Reporte exportado correctamente a {nombre_archivo}", "éxito")
            
            # Abrir archivo automáticamente
            os.startfile(ruta_completa)

        except Exception as ex:
            self.mostrar_mensaje4(f"Error al exportar a Excel: {str(ex)}", "error")
            import traceback
            traceback.print_exc()


class FrameOchoCuatro(ft.Control):
    def __init__(self, page, username = None):
        super().__init__()
        self.page = page
        self.username = username
        self.create_ui_elements()
        self.fill_denominations()

    def mostrar_mensaje4(self, mensaje, tipo="error"):
        """
        Muestra un mensaje en un SnackBar.
        
        Parámetros:
            mensaje (str): El mensaje a mostrar.
            tipo (str): Tipo de mensaje ("éxito", "error" o "advertencia").
        """
        # Definir el color de fondo según el tipo de mensaje
        if tipo == "éxito":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.GREEN)  # 70% de opacidad
        elif tipo == "advertencia":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.TEAL)   # 70% de opacidad
        else:  # Por defecto, es un error
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.RED)    # 70% de opacidad
        
        # Crear el contenido del SnackBar con bordes redondeados y transparencia
        snack_content = ft.Container(
            content=ft.Text(mensaje, size=18, color=ft.Colors.WHITE),  # Texto del mensaje en blanco
            bgcolor=color_fondo,                              # Color de fondo con transparencia
            border_radius=10,                                 # Bordes redondeados de 10
            padding=10,                                       # Espaciado interno
        )
        
        # Crear el SnackBar
        snack_bar = ft.SnackBar(
            content=snack_content,  # Usar el contenedor con bordes redondeados y transparencia
            open=True,              # Abrir automáticamente
            duration=5000,          # Duración de 5 segundos
            bgcolor=ft.Colors.TRANSPARENT,  # Fondo transparente para el SnackBar
        )
        
        # Agregar el SnackBar a la página y actualizar la UI
        self.page.overlay.append(snack_bar)
        self.page.update()

    def create_ui_elements(self):
        # Título
        self.titulo_container = Container(
            content=Text("REPORTE POR TIPOS DE GASTO", size=24, weight="bold", text_align="center", color=Colors.TEAL),
            alignment=alignment.center,
            padding=padding.all(0),
        )

        # Títulos de las columnas
        self.column_titles = ft.Row(
            controls=[
                ft.Text("Comp.", width=80, weight="bold", size=10),
                ft.Text("Tipo de Cuenta", width=150, weight="bold", size=10),
                ft.Text("Fecha", width=100, weight="bold", size=10),
                ft.Text("Lote", width=100, weight="bold", size=10),
                ft.Text("Nombres Apellidos", width=150, weight="bold", size=10),
                ft.Text("Glosa", width=470, weight="bold", size=10),
                ft.Text("Egreso", width=80, weight="bold", size=10),
            ],
            spacing=2,
            expand=True,
        )

        # Contenedor para los resultados con Column en lugar de ListView
        self.listview_container = ft.Container(
            content=ft.Column(
                spacing=1,
                scroll=ft.ScrollMode.AUTO,
            ),
            height=200,
            #border=ft.border.all(1, ft.Colors.GREY_300),
        )

        # Entradas de fecha usando TextField
        self.entry_fecha_inicio = ft.TextField(
            label="Fecha Inicio (YYYY-MM-DD)",
            value=datetime.today().strftime('%Y-%m-%d'),
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )
        self.entry_fecha_fin = ft.TextField(
            label="Fecha Fin (YYYY-MM-DD)",
            value=datetime.today().strftime('%Y-%m-%d'),
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )

        # ComboBox para denominación
        self.combo_denominacion = ft.Dropdown(
            label="Tipo de Gasto", 
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE),
            value="TODAS"
        )

        # Entrada para número de lote
        self.entry_num_lote_inicio = ft.TextField(
            label="Número de Lote", 
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )

        # Campo de búsqueda en tiempo real
        self.search_field = ft.TextField(
            label="Buscar por Nombre o Tipo de Gasto",
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE),
            on_change=self.buscar_en_tiempo_real
        )

        # Checkboxes para incluir/excluir valores cero
        self.valor_cero_var = ft.Checkbox(label="Excluir valor cero", value=False)
        self.valor_cero_var_incluir = ft.Checkbox(label="Incluir solo valor cero", value=False)

        # Radio buttons para tipo de consulta
        self.consulta_tipo_var = ft.RadioGroup(
            content=ft.ResponsiveRow(
                controls=[
                    ft.Column(
                        controls=[ft.Radio(value="1", label="Fecha")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=10,
                    ),
                    ft.Column(
                        controls=[ft.Radio(value="2", label="Número de lote")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=10,
                    ),
                    ft.Column(
                        controls=[ft.Radio(value="3", label="Fecha Liq")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=2,
                    ),
                ],
                spacing=10,
            ),
            value="1"
        )

        # Botones
        self.boton_ejecutar = ft.ElevatedButton(
            text="Ejecutar consulta",
            on_click=lambda e: self.ejecutar_consulta1(e),
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_ejecutar
        )
        self.boton_exportar = ft.ElevatedButton(
            text="Visualizar",
            on_click=self.crear_reporte_general,
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_exportar
        )
        self.boton_exportar_xls = ft.ElevatedButton(
            text="Exportar a XLS",
            on_click=self.exportar_a_excel,
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_exportar_xls
        )

        # Contenedor principal con scroll
        self.scrollable_content = ft.Column(
            controls=[
                self.titulo_container,
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.entry_fecha_inicio], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.entry_fecha_fin], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.combo_denominacion], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.entry_num_lote_inicio], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                    ],
                    spacing=10,
                ),
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.search_field], col={"xs": 12, "sm": 6, "md": 6, "lg": 6}, spacing=10),
                        #ft.Column(controls=[self.valor_cero_var], col={"xs": 12, "sm": 6, "md": 3, "lg": 3}, spacing=10),
                        #ft.Column(controls=[self.valor_cero_var_incluir], col={"xs": 12, "sm": 6, "md": 3, "lg": 3}, spacing=10),
                    ],
                    spacing=10,
                ),
                self.consulta_tipo_var,
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.boton_ejecutar], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                        ft.Column(controls=[self.boton_exportar], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                        ft.Column(controls=[self.boton_exportar_xls], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                    ],
                    spacing=10,
                ),
                self.column_titles,
                self.listview_container,
            ],
            scroll=ft.ScrollMode.AUTO,
            expand=True,
        )

        self.controls = [self.scrollable_content]

    def on_hover_boton_ejecutar(self, e):
        self.boton_ejecutar.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_ejecutar.update()

    def on_hover_boton_exportar(self, e):
        self.boton_exportar.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_exportar.update()

    def on_hover_boton_exportar_xls(self, e):
        self.boton_exportar_xls.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_exportar_xls.update()

    def fill_denominations(self):
        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    cursor.execute("SELECT 'TODAS' AS TipoGasto UNION SELECT DISTINCT TipoGasto FROM TipoGasto ORDER BY TipoGasto")
                    denominaciones = cursor.fetchall()
                    self.combo_denominacion.options = [ft.dropdown.Option(denominacion[0]) for denominacion in denominaciones]
        except Exception as ex:
            self.mostrar_mensaje4(f"Error al cargar Tipo Gasto: {str(ex)}", "error")

    def buscar_en_tiempo_real(self, e):
        """Realiza la búsqueda en tiempo real mientras se escribe"""
        search_term = self.search_field.value.strip()
        if len(search_term) >= 3 or not search_term:
            self.ejecutar_consulta1(e, search_term)

    def ejecutar_consulta1(self, e, search_term=""):
        denominacion = self.combo_denominacion.value
        try:
            fecha_inicio = datetime.strptime(self.entry_fecha_inicio.value, "%Y-%m-%d").strftime("%Y-%m-%d")
            fecha_fin = datetime.strptime(self.entry_fecha_fin.value, "%Y-%m-%d").strftime("%Y-%m-%d")
        except ValueError:
            self.mostrar_mensaje4("Formato de fecha incorrecto. Use YYYY-MM-DD.", "error")
            return

        consulta_tipo = self.consulta_tipo_var.value
        valor_cero = self.valor_cero_var.value
        num_lote_inicio = self.entry_num_lote_inicio.value

        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    consulta = """
                        SELECT 
                            c.IdComprobantes, 
                            tg.TipoGasto AS TipoGastoDescripcion, 
                            c.FechaComp, 
                            CONCAT(COALESCE(Liquidacion.NombreInicial, '0-'), 
                                CASE WHEN Liquidacion.NombreInicial IS NOT NULL THEN '-' ELSE '' END, 
                                Recepcion.Numlote) as LoteCompleto,
                            c.NombresApellidos AS Proveedor, 
                            c.Glosa, 
                            c.Egreso 
                        FROM Comprobantes c 
                        INNER JOIN TipoGasto tg ON c.TipoGasto = tg.TipoGasto 
                        INNER JOIN Recepcion ON c.NumLote = Recepcion.NumLote 
                        LEFT JOIN  Liquidacion ON Recepcion.NumLote = Liquidacion.NumLote 
                        LEFT JOIN Inicial ON Inicial.NombreInicial = Liquidacion.NombreInicial
                        WHERE 
                        Recepcion.NumLote >= 0  -- Excluir lote 0
                    """

                    params = []

                    if denominacion != 'TODAS':
                        consulta += " AND tg.TipoGasto = %s"
                        params.append(denominacion)
                    
                    if consulta_tipo == "1":
                        consulta += " AND c.FechaComp BETWEEN %s AND %s"
                        params.extend([fecha_inicio, fecha_fin])
                    elif consulta_tipo == "2":
                        num_lotes = [int(x) for x in num_lote_inicio.split(',')]
                        consulta += f" AND Recepcion.NumLote IN ({','.join(['%s']*len(num_lotes))})"
                        params.extend(num_lotes)
                    elif consulta_tipo == "3":
                        consulta += " AND Liquidacion.fechaliq BETWEEN %s AND %s"
                        params.extend([fecha_inicio, fecha_fin])
                    
                    if valor_cero:
                        consulta += " AND TPrecioSus = 0"
                    
                    if search_term:
                        consulta += " AND (c.NombresApellidos LIKE %s OR Recepcion.Denominacion LIKE %s)"
                        search_param = '%' + search_term + '%'
                        params.extend([search_param, search_param])
                    
                    consulta += " ORDER BY c.idcomprobantes"

                    cursor.execute(consulta, params)
                    resultados = cursor.fetchall()

                    if resultados:
                        self.mostrar_mensaje4(f"¡Éxito! Se encontraron {len(resultados)} registros.", "éxito")
                        self.mostrar_resultados(resultados)
                    else:
                        self.mostrar_mensaje4("No se encontraron registros que coincidan con los criterios de búsqueda.", "advertencia")

        except ValueError as e:
            self.mostrar_mensaje4("Error de entrada: Asegúrate de que los números de lote sean enteros y estén separados por comas.", "error")
        except Exception as ex:
            self.mostrar_mensaje4(f"Error al ejecutar la consulta: {str(ex)}", "error")

    def mostrar_resultados(self, resultados):
        # Limpiar los controles existentes
        self.listview_container.content.controls.clear()
        
        # Definir anchos personalizados para cada columna
        column_widths = {
            0: 80,   # Id Comprobantes
            1: 150,  # Tipo de Gasto
            2: 100,   # Fecha Comprobantes
            3: 100,   # Lote Completo
            4: 150,  # Proveedor
            5: 470,  # Glosa
            7: 80,   # Egreso
        }
        
        for resultado in resultados:
            row_data = [
                str(resultado[0]),  # IdComprobantes
                str(resultado[1]),  # TipoGastoDescripcion
                str(resultado[2]),  # FechaComp
                str(resultado[3]),  # LoteCompleto
                str(resultado[4]),  # Proveedor
                str(resultado[5]),  # Glosa
                self._parse_float(resultado[7]),  # Egreso
            ]
            
            row_controls = []
            for i, dato in enumerate(row_data):
                width = column_widths.get(i, 50)
                # Alinear a la derecha solo para valores numéricos
                text_align = ft.TextAlign.RIGHT if i in [6, 7, 8] else ft.TextAlign.LEFT
                
                row_controls.append(
                    ft.Text(
                        str(dato),
                        size=12,
                        width=width,
                        text_align=text_align
                    )
                )
            
            row = ft.Row(controls=row_controls, spacing=1)
            container = ft.Container(
                content=row,
                padding=1,
                border=ft.border.all(1, ft.Colors.TEAL),
                border_radius=5,
            )
            self.listview_container.content.controls.append(container)
        
        self.page.update()

    def _parse_float(self, value):
        """Convierte valores a float cuando es posible"""
        try:
            return Decimal(value) if value not in (None, "") else 0.0
        except (ValueError, TypeError):
            return value


    def set_username(self, username):
        self.username = username
    
    def crear_reporte_general(self, e):
        datos = []
        for child in self.listview_container.content.controls:
            if isinstance(child, ft.Container):
                row = child.content
                datos.append([cell.value for cell in row.controls if isinstance(cell, ft.Text)])
        
        if not datos:
            self.mostrar_mensaje4("No hay datos para generar el reporte.", "advertencia")            
            return
        

        try:
            total_ingreso = sum(float(fila[6]) for fila in datos)
            total_egreso = sum(float(fila[7]) for fila in datos)
            total_saldo = sum(float(fila[8]) for fila in datos)
            
            tabla_config = {
        "columnas": [
            {"nombre": "Comp.", "ancho": 10, "align": "C"},
            {"nombre": "Tipo Cuenta", "ancho": 40, "align": "L"},                        
            {"nombre": "Fecha", "ancho": 15, "align": "C"},
            {"nombre": "Lote", "ancho": 10, "align": "C"},
            {"nombre": "Nombre Apellidos", "ancho": 40, "align": "L"},           
            {"nombre": "Glosa", "ancho": 100, "align": "L"},
            {"nombre": "Egreso", "ancho": 15, "align": "R"},
        ],
        "filas": datos,
        "totales": {
            "Ingreso": "{:.2f}".format(round(sum(float(fila[6]) for fila in datos), 2)),
            "Egreso": "{:.2f}".format(round(sum(float(fila[7]) for fila in datos), 2)),
            "Saldo": "{:.2f}".format(round((sum(float(fila[6]) for fila in datos) - sum(float(fila[7]) for fila in datos)),2)), 
            "Nº de Filas": len(datos)
        }
    }

            class PDFWithHeaderFooter(FPDF):
                def __init__(self, *args, **kwargs):
                    self.valor_cero_var = kwargs.pop('valor_cero_var', False)
                    self.valor_cero_var_incluir = kwargs.pop('valor_cero_var_incluir', False)
                    self.fecha_inicio = kwargs.pop('fecha_inicio', '')
                    self.fecha_fin = kwargs.pop('fecha_fin', '')
                    self.num_lote_inicio = kwargs.pop('num_lote_inicio', '')
                    self.denominacion = kwargs.pop('denominacion', 'TODAS')
                    self.consulta_tipo = kwargs.pop('consulta_tipo', '1')
                    self.username = kwargs.pop('username', None)
                    super().__init__(*args, **kwargs)

                def header(self):
                    if self.page_no() == 1:
                        self.set_font("Arial", size=11, style="B")
                        self.cell(0, 5, txt="EMPRESA MINERA VIRGEN DE COTOCA S.R.L.", ln=True, align="C")
                        self.cell(0, 5, txt="REPORTE GENERAL MOVIMIENTO DE CAJA", ln=True, align="C")
                        self.ln(3)
                        
                        self.set_font("Arial", size=8)
                        self.set_x(250)
                        
                        subtitulo_left = ""
                        if self.valor_cero_var:
                            subtitulo_left = "Incluidos Valores Cero" if self.valor_cero_var_incluir else "Excluidos Valores Cero"

                        if self.fecha_inicio and self.fecha_fin:
                            subtitulo_left += f" - Del {self.fecha_inicio} al {self.fecha_fin}"

                        if self.num_lote_inicio:
                            subtitulo_left += f" - Lote {self.num_lote_inicio}"

                        if self.denominacion != 'TODAS':
                            subtitulo_left += f" - {self.denominacion}"
                        
                        self.cell(0, 7, txt=subtitulo_left, ln=0, align="L")
                        
                        subtitulo = ""
                        if self.consulta_tipo == "1":
                            subtitulo = "Reporte por Fecha de Recepcion"
                        elif self.consulta_tipo == "2":
                            subtitulo = "Reporte por Numero de Lote"
                        elif self.consulta_tipo == "3":
                            subtitulo = "Reporte por Fecha de Liquidacion"
                        
                        self.set_x(15)
                        self.cell(0, 7, txt=subtitulo, ln=True, align="L")
                        self.ln(0)

                def footer(self):
                    self.set_y(-15)
                    self.set_font("Arial", size=8)
                    self.cell(0, 10, f"Página {self.page_no()} de {{nb}}", 0, 0, "C")
                    self.set_y(-15)
                    self.set_font("Arial", size=7)
                    self.cell(0, 10, f"Fecha y hora de impresión: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", 0, 0, "L")
                    self.ln(2)
                    if self.username:
                        self.cell(0, 10, txt=f"Usuario: {self.username}", border=0, align='L', ln=1)
        
            pdf = PDFWithHeaderFooter(
                orientation='L', 
                unit='mm', 
                format='Letter',
                valor_cero_var=self.valor_cero_var.value,
                valor_cero_var_incluir=self.valor_cero_var_incluir.value,
                fecha_inicio=self.entry_fecha_inicio.value,
                fecha_fin=self.entry_fecha_fin.value,
                num_lote_inicio=self.entry_num_lote_inicio.value,
                denominacion=self.combo_denominacion.value,
                consulta_tipo=self.consulta_tipo_var.value,
                username=self.username
            )
            
            pdf.set_auto_page_break(auto=True, margin=15)
            pdf.alias_nb_pages()
            pdf.add_page()
            
            # Tabla
            primera_hoja = True
            while len(tabla_config["filas"]) > 0:
                # Dibujar títulos de columnas en cada hoja
                pdf.set_font("Arial", size=7, style="B")
                for columna in tabla_config["columnas"]:
                    pdf.cell(columna["ancho"], 4, txt=columna["nombre"], border=1, align="C")
                pdf.ln(8)
                pdf.set_font("Arial", size=7)

                # Dibujar tabla en cada hoja
                if primera_hoja:
                    filas_por_hoja = 22
                else:
                    filas_por_hoja = 25
                for i, fila in enumerate(tabla_config["filas"][:filas_por_hoja]):
                    max_height = 7  # Altura mínima de la fila
                    for j, columna in enumerate(tabla_config["columnas"]):
                        if i % 2 == 0:
                            pdf.set_fill_color(240, 240, 240)  # Color claro
                        else:
                            pdf.set_fill_color(255, 255, 255)  # Color blanco
                        pdf.cell(columna["ancho"], max_height, txt=str(fila[j]), border=0, align=columna["align"], fill=True)
                    pdf.ln(max_height)

                # Eliminar filas procesadas
                del tabla_config["filas"][:filas_por_hoja]

                # Agregar hoja adicional si hay más filas
                if len(tabla_config["filas"]) > 0:
                    pdf.add_page()
                    primera_hoja = False
            
            # Totales
            pdf.ln(2)
            pdf.set_font("Arial", size=7, style="B")
            pdf.cell(245, 7, txt="Totales", border=1, align="C", ln=False)
            pdf.cell(15, 7, txt=str(tabla_config["totales"]["Egreso"]), border=1, align="R")
            
            pdf.ln(7)
            pdf.cell(0, 7, txt=f"Nº de Comprobantes: {tabla_config['totales']['Nº de Filas']}", ln=True, align="L")

            pdf.output("Reporte General.pdf", "F")
            os.startfile('Reporte General.pdf')
            self.page.update()
            self.mostrar_mensaje4(f"Reporte Generado correctamente ", "éxito")


        except Exception as ex:
            self.mostrar_mensaje4(f"Error al generar el reporte: {str(ex)}", "error")            

    def exportar_a_excel(self, e):
        try:
            if not self.listview_container.content.controls:
                self.mostrar_mensaje4("No hay datos para exportar a Excel", "advertencia")
                return

            # Obtener los encabezados de las columnas
            encabezados = [control.value for control in self.column_titles.controls if isinstance(control, ft.Text)]

            # Obtener los datos del ListView con sus tipos correctos
            datos = []
            for child in self.listview_container.content.controls:
                if isinstance(child, ft.Container):
                    row_data = []
                    for cell in child.content.controls:
                        if isinstance(cell, ft.Text):
                            value = cell.value
                            # Intentar convertir a número si es posible
                            try:
                                # Limpiar el valor (quitar comas, puntos, etc.)
                                cleaned_value = str(value).replace(',', '').strip()
                                if cleaned_value.replace('.', '', 1).isdigit():
                                    value = float(cleaned_value)
                            except (ValueError, AttributeError):
                                pass
                            row_data.append(value)
                    datos.append(row_data)

            # Crear libro de Excel
            wb = Workbook()
            ws = wb.active
            ws.title = "Reporte de Compra"

            # Agregar encabezados
            ws.append(encabezados)

            # Agregar datos con tipos correctos
            for fila in datos:
                ws.append(fila)

            # Definir qué columnas son numéricas y su formato
            columnas_numericas = {
                'G': {'nombre': 'T.M.B.', 'formato': '0.000'},
                'H': {'nombre': 'T.M.H.', 'formato': '0.000'},
                'I': {'nombre': 'H2O', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'J': {'nombre': 'T.H.2.O.', 'formato': '0.000'},
                'K': {'nombre': 'T.N.S.', 'formato': '0.00000'},
                'L': {'nombre': 'Zn', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'M': {'nombre': 'Ag', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'N': {'nombre': 'Pb', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'O': {'nombre': 'KF Zn', 'formato': '0.000'},
                'P': {'nombre': 'KF Ag', 'formato': '0.000'},
                'Q': {'nombre': 'KF Pb', 'formato': '0.000'},
                'R': {'nombre': 'Precio Sus', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'S': {'nombre': 'Valor Neto', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'T': {'nombre': 'Descuentos', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'U': {'nombre': 'Bono Trans', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'V': {'nombre': 'Bono Extra', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'W': {'nombre': 'Pagable', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2}
            }

            # Aplicar formatos a las columnas numéricas
            for col_letter, col_info in columnas_numericas.items():
                for cell in ws[col_letter][1:]:  # Excluye el encabezado
                    if isinstance(cell.value, (int, float)):
                        cell.number_format = col_info['formato']

            # Ajustar ancho de columnas automáticamente
            for col in ws.columns:
                max_length = 0
                column = col[0].column_letter
                for cell in col:
                    try:
                        cell_length = len(str(cell.value))
                        if cell_length > max_length:
                            max_length = cell_length
                    except:
                        pass
                adjusted_width = (max_length + 2) * 1.2
                ws.column_dimensions[column].width = adjusted_width

            # Guardar archivo con nombre único
            fecha_actual = datetime.now().strftime("%Y%m%d_%H%M%S")
            nombre_archivo = f"Reporte_Compra_{fecha_actual}.xlsx"
            
            # Crear directorio si no existe
            os.makedirs("reportes_excel", exist_ok=True)
            ruta_completa = os.path.join("reportes_excel", nombre_archivo)
            
            wb.save(ruta_completa)

            # Mostrar mensaje de éxito
            self.mostrar_mensaje4(f"Reporte exportado correctamente a {nombre_archivo}", "éxito")
            
            # Abrir archivo automáticamente
            os.startfile(ruta_completa)

        except Exception as ex:
            self.mostrar_mensaje4(f"Error al exportar a Excel: {str(ex)}", "error")
            import traceback
            traceback.print_exc()


class FrameNueve(ft.Control):
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.controls = []
        self.base_size = 18  # Tamaño base de los bloques
        self.size = self.base_size
        self.gap = 3
        self.duration = 2000
        self.running = True
        
        # Colores para cada letra
        self.c1 = ft.Colors.PINK_500  # C
        self.c2 = ft.Colors.AMBER_500  # A
        self.c3 = ft.Colors.LIGHT_GREEN_500  # J
        self.c4 = ft.Colors.DEEP_PURPLE_500  # A
        self.c5 = ft.Colors.BLUE_500  # D
        self.c6 = ft.Colors.ORANGE_500  # O
        self.c7 = ft.Colors.CYAN_500  # S
        
        # Todos los colores disponibles para el modo aleatorio
        self.all_colors = [
            ft.Colors.AMBER_400, ft.Colors.AMBER_ACCENT_400, ft.Colors.BLUE_400,
            ft.Colors.BROWN_400, ft.Colors.CYAN_700, ft.Colors.DEEP_ORANGE_500,
            ft.Colors.CYAN_500, ft.Colors.INDIGO_600, ft.Colors.ORANGE_ACCENT_100,
            ft.Colors.PINK, ft.Colors.RED_600, ft.Colors.GREEN_400,
            ft.Colors.GREEN_ACCENT_200, ft.Colors.TEAL_ACCENT_200, ft.Colors.LIGHT_BLUE_500
        ]
        
        # Definición de las letras (fila, columna, color) - 3 de ancho x 5 de alto
        self.parts = [
            # Letra C (3x5)
            (0, 0, self.c1), (0, 1, self.c1), (0, 2, self.c1),
            (1, 0, self.c1),
            (2, 0, self.c1),
            (3, 0, self.c1),
            (4, 0, self.c1), (4, 1, self.c1), (4, 2, self.c1),
            
            # Espacio entre letras (1 columna)
            
            # Letra A (3x5)
            (0, 4, self.c2), (0, 5, self.c2), (0, 6, self.c2),
            (1, 4, self.c2), (1, 6, self.c2),
            (2, 4, self.c2), (2, 5, self.c2), (2, 6, self.c2),
            (3, 4, self.c2), (3, 6, self.c2),
            (4, 4, self.c2), (4, 6, self.c2),
            
            # Espacio
            
            # Letra J (3x5)
            (0, 8, self.c3), (0, 9, self.c3), (0, 10, self.c3),
            (1, 9, self.c3),
            (2, 9, self.c3),
            (3, 8, self.c3), (3, 9, self.c3),
            (4, 8, self.c3), (4, 9, self.c3),
            
            # Espacio
            
            # Letra A (3x5) - Segunda A
            (0, 12, self.c4), (0, 13, self.c4), (0, 14, self.c4),
            (1, 12, self.c4), (1, 14, self.c4),
            (2, 12, self.c4), (2, 13, self.c4), (2, 14, self.c4),
            (3, 12, self.c4), (3, 14, self.c4),
            (4, 12, self.c4), (4, 14, self.c4),
            
            # Espacio entre palabras (2 columnas)
            
            # Letra D (3x5)
            (0, 17, self.c5), (0, 18, self.c5),
            (1, 17, self.c5), (1, 19, self.c5),
            (2, 17, self.c5), (2, 19, self.c5),
            (3, 17, self.c5), (3, 19, self.c5),
            (4, 17, self.c5), (4, 18, self.c5),
            
            # Espacio
            
            # Letra O (3x5)
            (0, 21, self.c6), (0, 22, self.c6), (0, 23, self.c6),
            (1, 21, self.c6), (1, 23, self.c6),
            (2, 21, self.c6), (2, 23, self.c6),
            (3, 21, self.c6), (3, 23, self.c6),
            (4, 21, self.c6), (4, 22, self.c6), (4, 23, self.c6),
            
            # Espacio
            
            # Letra S (3x5)
            (0, 25, self.c7), (0, 26, self.c7), (0, 27, self.c7),
            (1, 25, self.c7),
            (2, 25, self.c7), (2, 26, self.c7),
            (3, 27, self.c7),
            (4, 25, self.c7), (4, 26, self.c7), (4, 27, self.c7)
        ]
        
        # Crear el Stack principal
        self.canvas = ft.Stack(
            expand=True,
            animate_scale=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
            animate_opacity=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
        )
        
        # Crear los bloques
        for _ in range(len(self.parts)):
            self.canvas.controls.append(
                ft.Container(
                    animate=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
                    animate_position=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
                    animate_rotation=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
                    animate_scale=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
                )
            )
        
        # Contenedor principal
        self.main_container = ft.Container(
            self.canvas,
            expand=True
        )
        
        self.controls.append(self.main_container)
        self.assemble()  # Iniciar en estado formado
        
        # Escuchar cambios de tamaño de la pantalla
        self.page.on_resize = self.on_page_resize
        
        # Iniciar animación automática
        self.animation_thread = threading.Thread(target=self.auto_animate, daemon=True)
        self.animation_thread.start()
    
    def on_page_resize(self, e):
        """Ajusta el tamaño de los bloques cuando cambia el tamaño de la pantalla"""
        if self.page.width < 600:  # Pantallas pequeñas (móviles)
            self.size = self.base_size * 0.7
            self.gap = 2
        elif self.page.width < 900:  # Pantallas medianas (tablets)
            self.size = self.base_size * 0.9
            self.gap = 2.5
        else:  # Pantallas grandes (escritorio)
            self.size = self.base_size
            self.gap = 3
        
        self.assemble()
    
    def auto_animate(self):
        """Animación automática que alterna entre los estados"""
        while self.running:
            time.sleep(5)
            if not self.running:
                break
            self.randomize(None)
            
            time.sleep(5)
            if not self.running:
                break
            self.assemble(None)
    
    def randomize(self, e):
        """Desordena los bloques aleatoriamente"""
        random.seed()
        for i in range(len(self.parts)):
            c = self.canvas.controls[i]
            part_size = random.randrange(int(self.size * 1.5), int(self.size * 4))
            c.left = random.randrange(0, int(self.page.width * 0.8))
            c.top = random.randrange(0, int(self.page.height * 0.8))
            c.bgcolor = self.all_colors[random.randrange(0, len(self.all_colors))]
            c.width = part_size
            c.height = part_size
            c.border_radius = random.randrange(0, int(self.size * 2))
            c.rotate = ft.transform.Rotate(random.randrange(0, 360) * 2 * pi / 360)
            c.scale = ft.transform.Scale(random.uniform(0.7, 1.3))
        
        self.canvas.scale = ft.transform.Scale(1)
        self.canvas.opacity = 1
        self.update()
    
    def assemble(self, e=None):
        """Forma las letras 'CAJA DOS' centradas con bloques de 3x5"""
        # Calculamos el ancho total basado en la posición más a la derecha
        max_col = max([col for (row, col, color) in self.parts])
        total_width = (max_col + 1) * (self.size + self.gap)
        
        # Altura basada en 5 filas (tamaño de las letras)
        total_height = 5 * (self.size + self.gap)
        
        center_x = (self.page.width - total_width) / 2
        center_y = (self.page.height - total_height) / 2
        
        for i, (row, col, bgcolor) in enumerate(self.parts):
            c = self.canvas.controls[i]
            c.left = center_x + col * (self.size + self.gap)
            c.top = center_y + row * (self.size + self.gap)
            c.bgcolor = bgcolor
            c.width = self.size
            c.height = self.size
            c.border_radius = 5
            c.rotate = ft.transform.Rotate(0)
            c.scale = ft.transform.Scale(1)
        
        self.canvas.scale = ft.transform.Scale(1)
        self.canvas.opacity = 1
        self.update()
    
    def will_unmount(self):
        """Detener animaciones al desmontar el componente"""
        self.running = False
        if self.animation_thread and self.animation_thread.is_alive():
            self.animation_thread.join(timeout=1)

class FrameNueveUno(ft.Control):
    
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.controls = []  # Inicializa el atributo controls como una lista vacía
        self.create_ui_elements_nueve_uno()  # Llama a un método para crear los elementos de la interfaz

    def create_ui_elements_nueve_uno(self):
        # Agrega widgets a la lista controls
        self.controls.append(
            ft.Text("Este es el Frame nueve Uno", size=20, color=ft.Colors.BLACK)
        )
        self.controls.append(
            ft.ElevatedButton("Botón en Frame nueve Uno", on_click=self.on_button_click)
        )

    def on_button_click(self, e):
        print("Botón en Frame uno Uno clickeado")


class FrameNueveDos(ft.Control):
    
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.controls = []  # Inicializa el atributo controls como una lista vacía
        self.create_ui_elements_nueve_dos()  # Llama a un método para crear los elementos de la interfaz

    def create_ui_elements_nueve_dos(self):
        # Agrega widgets a la lista controls
        self.controls.append(
            ft.Text("Este es el Frame Nueve Dos", size=20, color=ft.Colors.BLACK)
        )
        self.controls.append(
            ft.ElevatedButton("Botón en Frame nueve Dos", on_click=self.on_button_click)
        )

    def on_button_click(self, e):
        print("Botón en Frame Ocho Dos clickeado")

class FrameNueveTres(ft.Control):
    
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.controls = []  # Inicializa el atributo controls como una lista vacía
        self.create_ui_elements_nueve_tres()  # Llama a un método para crear los elementos de la interfaz

    def create_ui_elements_nueve_tres(self):
        # Agrega widgets a la lista controls
        self.controls.append(
            ft.Text("Este es el Frame nueve Uno", size=20, color=ft.Colors.BLACK)
        )
        self.controls.append(
            ft.ElevatedButton("Botón en Frame nueve Tres", on_click=self.on_button_click)
        )

    def on_button_click(self, e):
        print("Botón en Frame Ocho Uno clickeado")


class FrameNueveCuatro(ft.Control):
    
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.controls = []  # Inicializa el atributo controls como una lista vacía
        self.create_ui_elements_nueve_cuatro()  # Llama a un método para crear los elementos de la interfaz

    def create_ui_elements_nueve_cuatro(self):
        # Agrega widgets a la lista controls
        self.controls.append(
            ft.Text("Este es el Frame nueve Dos", size=20, color=ft.Colors.BLACK)
        )
        self.controls.append(
            ft.ElevatedButton("Botón en Frame nueve Cuatro", on_click=self.on_button_click)
        )

    def on_button_click(self, e):
        print("Botón en Frame Ocho nueve clickeado")

class FrameDiez(ft.Control):
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.controls = []
        self.base_size = 18  # Tamaño base de los bloques
        self.size = self.base_size
        self.gap = 3
        self.duration = 2000
        self.running = True
        
        # Colores para cada letra
        self.c1 = ft.Colors.RED_500      # R
        self.c2 = ft.Colors.GREEN_500    # E
        self.c3 = ft.Colors.BLUE_500     # P
        self.c4 = ft.Colors.ORANGE_500   # O
        self.c5 = ft.Colors.PURPLE_500   # R
        self.c6 = ft.Colors.TEAL_500     # T
        self.c7 = ft.Colors.PINK_500     # E
        self.c8 = ft.Colors.INDIGO_500   # S
        
        # Todos los colores disponibles para el modo aleatorio
        self.all_colors = [
            ft.Colors.AMBER_400, ft.Colors.AMBER_ACCENT_400, ft.Colors.BLUE_400,
            ft.Colors.BROWN_400, ft.Colors.CYAN_700, ft.Colors.DEEP_ORANGE_500,
            ft.Colors.CYAN_500, ft.Colors.INDIGO_600, ft.Colors.ORANGE_ACCENT_100,
            ft.Colors.PINK, ft.Colors.RED_600, ft.Colors.GREEN_400,
            ft.Colors.GREEN_ACCENT_200, ft.Colors.TEAL_ACCENT_200, ft.Colors.LIGHT_BLUE_500
        ]
        
        # Definición de las letras (fila, columna, color) - 3 de ancho x 5 de alto
        self.parts = [
            # Letra R (3x5)
            (0, 0, self.c1), (0, 1, self.c1), (0, 2, self.c1),
            (1, 0, self.c1), (1, 2, self.c1),
            (2, 0, self.c1), (2, 1, self.c1), (2, 2, self.c1),
            (3, 0, self.c1), (3, 1, self.c1),
            (4, 0, self.c1), (4, 2, self.c1),
            
            # Espacio entre letras (1 columna)
            
            # Letra E (3x5)
            (0, 4, self.c2), (0, 5, self.c2), (0, 6, self.c2),
            (1, 4, self.c2),
            (2, 4, self.c2), (2, 5, self.c2),
            (3, 4, self.c2),
            (4, 4, self.c2), (4, 5, self.c2), (4, 6, self.c2),
            
            # Espacio
            
            # Letra P (3x5)
            (0, 8, self.c3), (0, 9, self.c3), (0, 10, self.c3),
            (1, 8, self.c3), (1, 10, self.c3),
            (2, 8, self.c3), (2, 9, self.c3), (2, 10, self.c3),
            (3, 8, self.c3),
            (4, 8, self.c3),
            
            # Espacio
            
            # Letra O (3x5)
            (0, 12, self.c4), (0, 13, self.c4), (0, 14, self.c4),
            (1, 12, self.c4), (1, 14, self.c4),
            (2, 12, self.c4), (2, 14, self.c4),
            (3, 12, self.c4), (3, 14, self.c4),
            (4, 12, self.c4), (4, 13, self.c4), (4, 14, self.c4),
            
            # Espacio
            
            # Letra R (3x5) - Segunda R
            (0, 16, self.c5), (0, 17, self.c5), (0, 18, self.c5),
            (1, 16, self.c5), (1, 18, self.c5),
            (2, 16, self.c5), (2, 17, self.c5), (2, 18, self.c5),
            (3, 16, self.c5), (3, 17, self.c5),
            (4, 16, self.c5), (4, 18, self.c5),
            
            # Espacio
            
            # Letra T (3x5)
            (0, 20, self.c6), (0, 21, self.c6), (0, 22, self.c6),
            (1, 21, self.c6),
            (2, 21, self.c6),
            (3, 21, self.c6),
            (4, 21, self.c6),
            
            # Espacio
            
            # Letra E (3x5) - Segunda E
            (0, 24, self.c7), (0, 25, self.c7), (0, 26, self.c7),
            (1, 24, self.c7),
            (2, 24, self.c7), (2, 25, self.c7),
            (3, 24, self.c7),
            (4, 24, self.c7), (4, 25, self.c7), (4, 26, self.c7),
            
            # Espacio
            
            # Letra S (3x5)
            (0, 28, self.c8), (0, 29, self.c8), (0, 30, self.c8),
            (1, 28, self.c8),
            (2, 28, self.c8), (2, 29, self.c8),
            (3, 30, self.c8),
            (4, 28, self.c8), (4, 29, self.c8), (4, 30, self.c8)
        ]
        
        # Crear el Stack principal
        self.canvas = ft.Stack(
            expand=True,
            animate_scale=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
            animate_opacity=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
        )
        
        # Crear los bloques
        for _ in range(len(self.parts)):
            self.canvas.controls.append(
                ft.Container(
                    animate=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
                    animate_position=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
                    animate_rotation=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
                    animate_scale=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
                )
            )
        
        # Contenedor principal
        self.main_container = ft.Container(
            self.canvas,
            expand=True
        )
        
        self.controls.append(self.main_container)
        self.assemble()  # Iniciar en estado formado
        
        # Escuchar cambios de tamaño de la pantalla
        self.page.on_resize = self.on_page_resize
        
        # Iniciar animación automática
        self.animation_thread = threading.Thread(target=self.auto_animate, daemon=True)
        self.animation_thread.start()
    
    def on_page_resize(self, e):
        """Ajusta el tamaño de los bloques cuando cambia el tamaño de la pantalla"""
        if self.page.width < 600:  # Pantallas pequeñas (móviles)
            self.size = self.base_size * 0.7
            self.gap = 2
        elif self.page.width < 900:  # Pantallas medianas (tablets)
            self.size = self.base_size * 0.9
            self.gap = 2.5
        else:  # Pantallas grandes (escritorio)
            self.size = self.base_size
            self.gap = 3
        
        self.assemble()
    
    def auto_animate(self):
        """Animación automática que alterna entre los estados"""
        while self.running:
            time.sleep(5)
            if not self.running:
                break
            self.randomize(None)
            
            time.sleep(5)
            if not self.running:
                break
            self.assemble(None)
    
    def randomize(self, e):
        """Desordena los bloques aleatoriamente"""
        random.seed()
        for i in range(len(self.parts)):
            c = self.canvas.controls[i]
            part_size = random.randrange(int(self.size * 1.5), int(self.size * 4))
            c.left = random.randrange(0, int(self.page.width * 0.8))
            c.top = random.randrange(0, int(self.page.height * 0.8))
            c.bgcolor = self.all_colors[random.randrange(0, len(self.all_colors))]
            c.width = part_size
            c.height = part_size
            c.border_radius = random.randrange(0, int(self.size * 2))
            c.rotate = ft.transform.Rotate(random.randrange(0, 360) * 2 * pi / 360)
            c.scale = ft.transform.Scale(random.uniform(0.7, 1.3))
        
        self.canvas.scale = ft.transform.Scale(1)
        self.canvas.opacity = 1
        self.update()
    
    def assemble(self, e=None):
        """Forma las letras 'REPORTES' centradas con bloques de 3x5"""
        # Calculamos el ancho total basado en la posición más a la derecha
        max_col = max([col for (row, col, color) in self.parts])
        total_width = (max_col + 1) * (self.size + self.gap)
        
        # Altura basada en 5 filas (tamaño de las letras)
        total_height = 5 * (self.size + self.gap)
        
        center_x = (self.page.width - total_width) / 2
        center_y = (self.page.height - total_height) / 2
        
        for i, (row, col, bgcolor) in enumerate(self.parts):
            c = self.canvas.controls[i]
            c.left = center_x + col * (self.size + self.gap)
            c.top = center_y + row * (self.size + self.gap)
            c.bgcolor = bgcolor
            c.width = self.size
            c.height = self.size
            c.border_radius = 5
            c.rotate = ft.transform.Rotate(0)
            c.scale = ft.transform.Scale(1)
        
        self.canvas.scale = ft.transform.Scale(1)
        self.canvas.opacity = 1
        self.update()
    
    def will_unmount(self):
        """Detener animaciones al desmontar el componente"""
        self.running = False
        if self.animation_thread and self.animation_thread.is_alive():
            self.animation_thread.join(timeout=1)

class FrameDiezUno(ft.Control):
    def __init__(self, page, username = None):
        super().__init__()
        self.page = page
        self.username = username
        self.create_ui_elements()
        self.fill_denominations()

    def mostrar_mensaje4(self, mensaje, tipo="error"):
        """
        Muestra un mensaje en un SnackBar.
        
        Parámetros:
            mensaje (str): El mensaje a mostrar.
            tipo (str): Tipo de mensaje ("éxito", "error" o "advertencia").
        """
        # Definir el color de fondo según el tipo de mensaje
        if tipo == "éxito":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.GREEN)  # 70% de opacidad
        elif tipo == "advertencia":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.TEAL)   # 70% de opacidad
        else:  # Por defecto, es un error
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.RED)    # 70% de opacidad
        
        # Crear el contenido del SnackBar con bordes redondeados y transparencia
        snack_content = ft.Container(
            content=ft.Text(mensaje, size=18, color=ft.Colors.WHITE),  # Texto del mensaje en blanco
            bgcolor=color_fondo,                              # Color de fondo con transparencia
            border_radius=10,                                 # Bordes redondeados de 10
            padding=10,                                       # Espaciado interno
        )
        
        # Crear el SnackBar
        snack_bar = ft.SnackBar(
            content=snack_content,  # Usar el contenedor con bordes redondeados y transparencia
            open=True,              # Abrir automáticamente
            duration=5000,          # Duración de 5 segundos
            bgcolor=ft.Colors.TRANSPARENT,  # Fondo transparente para el SnackBar
        )
        
        # Agregar el SnackBar a la página y actualizar la UI
        self.page.overlay.append(snack_bar)
        self.page.update()

    def create_ui_elements(self):
        # Título
        self.titulo_container = Container(
            content=Text("REPORTE COMPRA DE MINERALES DE BROZA", size=24, weight="bold", text_align="center", color=Colors.TEAL),
            alignment=alignment.center,
            padding=padding.all(0),
        )

        # Títulos de las columnas
        self.column_titles = ft.Row(
            controls=[
                ft.Text("Lote", width=50, weight="bold", size=10),
                ft.Text("Fecha Rep", width=70, weight="bold", size=10),
                ft.Text("Fecha Liq", width=70, weight="bold", size=10),
                ft.Text("Nombres", width=100, weight="bold", size=10),
                ft.Text("Cooperativa", width=80, weight="bold", size=10),
                ft.Text("Conjunto", width=80, weight="bold", size=10),
                ft.Text("T M B", width=50, weight="bold", size=10),
                ft.Text("T M H", width=50, weight="bold", size=10),
                ft.Text("H2O", width=50, weight="bold", size=10),
                ft.Text("T H 2 O", width=50, weight="bold", size=10),
                ft.Text("T N S", width=50, weight="bold", size=10),
                ft.Text("Zn", width=40, weight="bold", size=10),
                ft.Text("Ag", width=40, weight="bold", size=10),
                ft.Text("Pb", width=40, weight="bold", size=10),
                ft.Text("KF Zn", width=50, weight="bold", size=10),
                ft.Text("KF Ag", width=50, weight="bold", size=10),
                ft.Text("KF Pb", width=50, weight="bold", size=10),
                ft.Text("Precio Sus", width=50, weight="bold", size=10),
                ft.Text("Valor Neto", width=50, weight="bold", size=10),
                ft.Text("Descuentos", width=50, weight="bold", size=10),
                ft.Text("Bono Trans", width=50, weight="bold", size=10),
                ft.Text("Bono Extra", width=40, weight="bold", size=10),
                ft.Text("Pagable", width=60, weight="bold", size=10),
            ],
            spacing=2,
            expand=True,
        )

        # Contenedor para los resultados con Column en lugar de ListView
        self.listview_container = ft.Container(
            content=ft.Column(
                spacing=1,
                scroll=ft.ScrollMode.AUTO,
            ),
            height=300,
            #border=ft.border.all(1, ft.Colors.GREY_300),
        )

        # Entradas de fecha usando TextField
        self.entry_fecha_inicio = ft.TextField(
            label="Fecha Inicio (YYYY-MM-DD)",
            value=datetime.today().strftime('%Y-%m-%d'),
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )
        self.entry_fecha_fin = ft.TextField(
            label="Fecha Fin (YYYY-MM-DD)",
            value=datetime.today().strftime('%Y-%m-%d'),
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )

        # ComboBox para denominación
        self.combo_denominacion = ft.Dropdown(
            label="Denominacion", 
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE),
            value="TODAS"
        )

        # Entrada para número de lote
        self.entry_num_lote_inicio = ft.TextField(
            label="Número de Lote", 
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )

        # Campo de búsqueda en tiempo real
        self.search_field = ft.TextField(
            label="Buscar por nombre o denominación",
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE),
            on_change=self.buscar_en_tiempo_real
        )

        # Checkboxes para incluir/excluir valores cero
        self.valor_cero_var = ft.Checkbox(label="Excluir valor cero", value=False)
        self.valor_cero_var_incluir = ft.Checkbox(label="Incluir solo valor cero", value=False)

        # Radio buttons para tipo de consulta
        self.consulta_tipo_var = ft.RadioGroup(
            content=ft.ResponsiveRow(
                controls=[
                    ft.Column(
                        controls=[ft.Radio(value="1", label="Fecha")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=10,
                    ),
                    ft.Column(
                        controls=[ft.Radio(value="2", label="Número de lote")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=10,
                    ),
                    ft.Column(
                        controls=[ft.Radio(value="3", label="Fecha Liq")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=2,
                    ),
                ],
                spacing=10,
            ),
            value="1"
        )

        # Botones
        self.boton_ejecutar = ft.ElevatedButton(
            text="Ejecutar consulta",
            on_click=lambda e: self.ejecutar_consulta1(e),
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_ejecutar
        )
        self.boton_exportar = ft.ElevatedButton(
            text="Visualizar",
            on_click=self.crear_reporte_general,
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_exportar
        )
        self.boton_exportar_xls = ft.ElevatedButton(
            text="Exportar a XLS",
            on_click=self.exportar_a_excel,
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_exportar_xls
        )

        # Contenedor principal con scroll
        self.scrollable_content = ft.Column(
            controls=[
                self.titulo_container,
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.entry_fecha_inicio], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.entry_fecha_fin], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.combo_denominacion], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.entry_num_lote_inicio], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                    ],
                    spacing=10,
                ),
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.search_field], col={"xs": 12, "sm": 6, "md": 6, "lg": 6}, spacing=10),
                        ft.Column(controls=[self.valor_cero_var], col={"xs": 12, "sm": 6, "md": 3, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.valor_cero_var_incluir], col={"xs": 12, "sm": 6, "md": 3, "lg": 3}, spacing=10),
                    ],
                    spacing=10,
                ),
                self.consulta_tipo_var,
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.boton_ejecutar], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                        ft.Column(controls=[self.boton_exportar], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                        ft.Column(controls=[self.boton_exportar_xls], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                    ],
                    spacing=10,
                ),
                self.column_titles,
                self.listview_container,
            ],
            scroll=ft.ScrollMode.AUTO,
            expand=True,
        )

        self.controls = [self.scrollable_content]

    def on_hover_boton_ejecutar(self, e):
        self.boton_ejecutar.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_ejecutar.update()

    def on_hover_boton_exportar(self, e):
        self.boton_exportar.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_exportar.update()

    def on_hover_boton_exportar_xls(self, e):
        self.boton_exportar_xls.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_exportar_xls.update()

    def fill_denominations(self):
        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    cursor.execute("SELECT 'TODAS' AS Denominacion UNION SELECT DISTINCT Denominacion FROM Proveedores ORDER BY Denominacion")
                    denominaciones = cursor.fetchall()
                    self.combo_denominacion.options = [ft.dropdown.Option(denominacion[0]) for denominacion in denominaciones]
        except Exception as ex:
            self.mostrar_mensaje4(f"Error al cargar denominaciones: {str(ex)}", "error")

    def buscar_en_tiempo_real(self, e):
        """Realiza la búsqueda en tiempo real mientras se escribe"""
        search_term = self.search_field.value.strip()
        if len(search_term) >= 3 or not search_term:
            self.ejecutar_consulta1(e, search_term)

    def ejecutar_consulta1(self, e, search_term=""):
        denominacion = self.combo_denominacion.value
        try:
            fecha_inicio = datetime.strptime(self.entry_fecha_inicio.value, "%Y-%m-%d").strftime("%Y-%m-%d")
            fecha_fin = datetime.strptime(self.entry_fecha_fin.value, "%Y-%m-%d").strftime("%Y-%m-%d")
        except ValueError:
            self.mostrar_mensaje4("Formato de fecha incorrecto. Use YYYY-MM-DD.", "error")
            return

        consulta_tipo = self.consulta_tipo_var.value
        valor_cero = self.valor_cero_var.value
        num_lote_inicio = self.entry_num_lote_inicio.value

        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    consulta = """
                        SELECT 
                            CONCAT(Liquidacion.NombreInicial, '-', Recepcion.Numlote) as LoteCompleto,
                            Recepcion.Fecha, 
                            Liquidacion.Fechaliq, 
                            Recepcion.NombresApellidos, 
                            Clientes.Denominacion, 
                            Liquidacion.NombreConjunto, 
                            ROUND((Recepcion.Peso)/1000, 3) as Peso, 
                            ROUND((Liquidacion.Knh)/1000, 3) as Knh, 
                            LeyesH2Oliq, 
                            ROUND((Liquidacion.Kh2o)/1000, 3) as Kh2o, 
                            ROUND((Liquidacion.Kns)/1000, 5) as Kns, 
                            leyesZnliq, leyesAgliq, leyespbliq, 
                            ROUND((Liquidacion.KFinosZn)/1000, 3) as FinosZn, 
                            ROUND((Liquidacion.KFinosAg), 3) as FinosAg, 
                            ROUND((Liquidacion.KFinosPb)/1000, 3) as FinosPb, 
                            TPrecioSus, VNetoBs, VTDescuentos, 
                            Liquidacion.bonotransporte, Liquidacion.bonoExtra, 
                            VTLiquidoPagable1
                        FROM Liquidacion 
                        LEFT JOIN Recepcion ON Recepcion.NumLote = Liquidacion.NumLote 
                        LEFT JOIN Proveedores ON Proveedores.NombresApellidos = Recepcion.NombresApellidos 
                        LEFT JOIN Clientes ON Clientes.Denominacion = Recepcion.Denominacion 
                        INNER JOIN Conjunto ON Conjunto.NombreConjunto = Liquidacion.NombreConjunto 
                        INNER JOIN Inicial ON Inicial.NombreInicial = Liquidacion.NombreInicial
                        WHERE 1=1
                    """

                    params = []

                    if denominacion != 'TODAS':
                        consulta += " AND Clientes.Denominacion = %s"
                        params.append(denominacion)
                    
                    if consulta_tipo == "1":
                        consulta += " AND Recepcion.Fecha BETWEEN %s AND %s"
                        params.extend([fecha_inicio, fecha_fin])
                    elif consulta_tipo == "2":
                        num_lotes = [int(x) for x in num_lote_inicio.split(',')]
                        consulta += f" AND Recepcion.NumLote IN ({','.join(['%s']*len(num_lotes))})"
                        params.extend(num_lotes)
                    elif consulta_tipo == "3":
                        consulta += " AND Liquidacion.fechaliq BETWEEN %s AND %s"
                        params.extend([fecha_inicio, fecha_fin])
                    
                    if valor_cero:
                        consulta += " AND TPrecioSus = 0"
                    
                    if search_term:
                        consulta += " AND (Recepcion.NombresApellidos LIKE %s OR Recepcion.Denominacion LIKE %s)"
                        search_param = '%' + search_term + '%'
                        params.extend([search_param, search_param])
                    
                    consulta += " ORDER BY Liquidacion.NumLote"

                    cursor.execute(consulta, params)
                    resultados = cursor.fetchall()

                    if resultados:
                        self.mostrar_mensaje4(f"¡Éxito! Se encontraron {len(resultados)} registros.", "éxito")
                        self.mostrar_resultados(resultados)
                    else:
                        self.mostrar_mensaje4("No se encontraron registros que coincidan con los criterios de búsqueda.", "advertencia")

        except ValueError as e:
            self.mostrar_mensaje4("Error de entrada: Asegúrate de que los números de lote sean enteros y estén separados por comas.", "error")
        except Exception as ex:
            self.mostrar_mensaje4(f"Error al ejecutar la consulta: {str(ex)}", "error")

    def mostrar_resultados(self, resultados):
        # Limpiar los controles existentes
        self.listview_container.content.controls.clear()
        
        # Definir anchos personalizados para cada columna
        column_widths = {
            0: 50,   # LoteCompleto
            1: 70,    # Fecha Recepción
            2: 70,    # Fecha Liquidación
            3: 100,    # NombresApellidos
            4: 80,    # Denominacion
            5: 80,    # NombreConjunto
            6: 50,     # Peso
            7: 50,     # Knh
            8: 50,     # LeyesH2Oliq
            9: 50,     # Kh2o
            10: 50,    # Kns
            11: 40,     # leyesZnliq
            12: 40,     # leyesAgliq
            13: 40,     # leyespbliq
            14: 50,     # KFinosZn
            15: 50,     # KFinosAg
            16: 50,     # KFinosPb
            17: 50,     # TPrecioSus
            18: 50,     # VNetoBs
            19: 50,     # VTDescuentos
            20: 50,    # bonotransporte
            21: 40,     # bonoExtra
            22: 50     # VTLiquidoPagable1
        }
        
        for resultado in resultados:
            row_data = [
                str(resultado[0]),  # LoteCompleto
                str(resultado[1]),  # Fecha Recepción
                str(resultado[2]),  # Fecha Liquidación
                str(resultado[3]),  # NombresApellidos
                str(resultado[4]),  # Denominacion
                str(resultado[5]),  # NombreConjunto
                self._parse_float(resultado[6]),  # Peso
                self._parse_float(resultado[7]),  # Knh
                self._parse_float(resultado[8]),  # LeyesH2Oliq
                self._parse_float(resultado[9]),  # Kh2o
                self._parse_float(resultado[10]), # Kns
                self._parse_float(resultado[11]), # leyesZnliq
                self._parse_float(resultado[12]), # leyesAgliq
                self._parse_float(resultado[13]), # leyespbliq
                self._parse_float(resultado[14]), # KFinosZn
                self._parse_float(resultado[15]), # KFinosAg
                self._parse_float(resultado[16]), # KFinosPb
                self._parse_float(resultado[17]), # TPrecioSus
                self._parse_float(resultado[18]), # VNetoBs
                self._parse_float(resultado[19]), # VTDescuentos
                self._parse_float(resultado[20]), # bonotransporte
                self._parse_float(resultado[21]), # bonoExtra
                self._parse_float(resultado[22])  # VTLiquidoPagable1
            ]
            
            row_controls = []
            for i, dato in enumerate(row_data):
                width = column_widths.get(i, 50)
                text_align = ft.TextAlign.RIGHT if isinstance(dato, (int, Decimal)) else ft.TextAlign.LEFT
                
                row_controls.append(
                    ft.Text(
                        str(dato),
                        size=11,
                        width=width,
                        text_align=text_align
                    )
                )
            
            row = ft.Row(controls=row_controls, spacing=1)
            container = ft.Container(
                content=row,
                padding=1,
                border=ft.border.all(1, ft.Colors.TEAL),
                border_radius=5,
            )
            self.listview_container.content.controls.append(container)
        
        self.page.update()

    def _parse_float(self, value):
        """Convierte valores a float cuando es posible"""
        try:
            return Decimal(value) if value not in (None, "") else 0.0
        except (ValueError, TypeError):
            return value


    def set_username(self, username):
        self.username = username
    
    def crear_reporte_general(self, e):
        datos = []
        for child in self.listview_container.content.controls:
            if isinstance(child, ft.Container):
                row = child.content
                datos.append([cell.value for cell in row.controls if isinstance(cell, ft.Text)])
        
        if not datos:
            self.mostrar_mensaje4("No hay datos para generar el reporte.", "advertencia")            
            return
        

        try:
            total_peso = sum(float(fila[6]) for fila in datos)
            total_knh = sum(float(fila[7]) for fila in datos)
            total_h2o = sum(float(fila[9]) for fila in datos)
            total_kh2o = sum(float(fila[9]) for fila in datos)
            total_kns = sum(float(fila[10]) for fila in datos)
            total_leyes_zn = sum(float(fila[14]) for fila in datos)
            total_leyes_ag = sum(float(fila[15]) for fila in datos)
            total_leyes_pb = sum(float(fila[16]) for fila in datos)
            total_kfinos_zn = sum(float(fila[14]) for fila in datos)
            total_kfinos_ag = sum(float(fila[15]) for fila in datos)
            total_kfinos_pb = sum(float(fila[16]) for fila in datos)
            total_precio_sus = sum(float(fila[17]) for fila in datos)
            total_valor_neto = sum(float(fila[18]) for fila in datos)
            total_descuentos = sum(float(fila[19]) for fila in datos)
            total_bono_trans = sum(float(fila[20]) for fila in datos)
            total_bono_extra = sum(float(fila[21]) for fila in datos)
            total_pagable = sum(float(fila[22]) for fila in datos)

            h2o_percent = (total_h2o / total_knh) * 100 if total_knh != 0 else 0.0
            leyes_zn_percent = (total_leyes_zn / total_kns) * 100 if total_kns != 0 else 0.0
            leyes_ag_percent = (total_leyes_ag / total_kns) * 10 if total_kns != 0 else 0.0
            leyes_pb_percent = (total_leyes_pb / total_kns) * 100 if total_kns != 0 else 0.0

            tabla_config = {
                "columnas": [
                    {"nombre": "Lote", "ancho": 10, "align": "C"},
                    {"nombre": "Fecha", "ancho": 14, "align": "L"},
                    {"nombre": "Fecha Liq", "ancho": 14, "align": "L"},
                    {"nombre": "Nombre.", "ancho": 30, "align": "L"},
                    {"nombre": "Cooperativa.", "ancho": 20, "align": "L"},
                    {"nombre": "Conjunto", "ancho": 20, "align": "R"},
                    {"nombre": "T.M.B.", "ancho": 14, "align": "R"},
                    {"nombre": "T.M.H.", "ancho": 14, "align": "R"},
                    {"nombre": "H2O", "ancho": 10, "align": "R"},
                    {"nombre": "T.H.2.O.", "ancho": 12, "align": "R"},
                    {"nombre": "T.N.S.", "ancho": 14, "align": "R"},
                    {"nombre": "Ley Zn", "ancho": 10, "align": "R"},
                    {"nombre": "Ley Ag", "ancho": 10, "align": "R"},
                    {"nombre": "Ley Pb", "ancho": 10, "align": "R"},
                    {"nombre": "T F Zn", "ancho": 13, "align": "R"},
                    {"nombre": "K F Ag", "ancho": 13, "align": "R"},
                    {"nombre": "T F Pb", "ancho": 13, "align": "R"},
                    {"nombre": "Precio", "ancho": 10, "align": "R"},
                    {"nombre": "Valor Neto", "ancho": 15, "align": "R"},
                    {"nombre": "Dtos", "ancho": 14, "align": "R"},
                    {"nombre": "Bono Trans", "ancho": 14, "align": "R"},
                    {"nombre": "Bono Extra", "ancho": 14, "align": "R"},
                    {"nombre": "Pagable", "ancho": 15, "align": "R"}
                ],
                "filas": datos,
                "totales": {
                    "Peso": "{:.2f}".format(round(total_peso, 3)),
                    "Knh": "{:,.2f}".format(round(total_knh, 3)),
                    "H2O": "{:,.2f}".format(round(h2o_percent, 2)),
                    "Kh2o": "{:,.2f}".format(round(total_kh2o, 3)),
                    "Kns": "{:,.2f}".format(round(total_kns, 3)),
                    "Leyes Zn": "{:,.2f}".format(round(leyes_zn_percent, 2)),
                    "Leyes Ag": "{:,.2f}".format(round(leyes_ag_percent, 2)),
                    "Leyes Pb": "{:,.2f}".format(round(leyes_pb_percent, 2)),
                    "KFinos Zn": "{:,.2f}".format(round(total_kfinos_zn, 2)),
                    "KFinos Ag": "{:,.2f}".format(round(total_kfinos_ag, 2)),
                    "KFinos Pb": "{:,.2f}".format(round(total_kfinos_pb, 2)),
                    "Precio Sus": "{:,.2f}".format(round(total_precio_sus, 2)),
                    "Valor Neto": "{:,.2f}".format(round(total_valor_neto, 2)),
                    "Descuentos": "{:,.2f}".format(round(total_descuentos, 2)),
                    "Bono Trans": "{:,.2f}".format(round(total_bono_trans, 2)),
                    "Bono Extra": "{:,.2f}".format(round(total_bono_extra, 2)),
                    "Pagable": "{:,.2f}".format(round(total_pagable, 2)),
                    "Nº de Filas": len(datos)
                }
            }

            class PDFWithHeaderFooter(FPDF):
                def __init__(self, *args, **kwargs):
                    self.valor_cero_var = kwargs.pop('valor_cero_var', False)
                    self.valor_cero_var_incluir = kwargs.pop('valor_cero_var_incluir', False)
                    self.fecha_inicio = kwargs.pop('fecha_inicio', '')
                    self.fecha_fin = kwargs.pop('fecha_fin', '')
                    self.num_lote_inicio = kwargs.pop('num_lote_inicio', '')
                    self.denominacion = kwargs.pop('denominacion', 'TODAS')
                    self.consulta_tipo = kwargs.pop('consulta_tipo', '1')
                    self.username = kwargs.pop('username', None)
                    super().__init__(*args, **kwargs)

                def header(self):
                    if self.page_no() == 1:
                        self.set_font("Arial", size=11, style="B")
                        self.cell(0, 5, txt="EMPRESA MINERA VIRGEN DE COTOCA S.R.L.", ln=True, align="C")
                        self.cell(0, 5, txt="COMPRA DE MINERALES COMPLEJOS DE ZINC", ln=True, align="C")
                        self.ln(3)
                        
                        self.set_font("Arial", size=8)
                        self.set_x(250)
                        
                        subtitulo_left = ""
                        if self.valor_cero_var:
                            subtitulo_left = "Incluidos Valores Cero" if self.valor_cero_var_incluir else "Excluidos Valores Cero"

                        if self.fecha_inicio and self.fecha_fin:
                            subtitulo_left += f" - Del {self.fecha_inicio} al {self.fecha_fin}"

                        if self.num_lote_inicio:
                            subtitulo_left += f" - Lote {self.num_lote_inicio}"

                        if self.denominacion != 'TODAS':
                            subtitulo_left += f" - {self.denominacion}"
                        
                        self.cell(0, 7, txt=subtitulo_left, ln=0, align="L")
                        
                        subtitulo = ""
                        if self.consulta_tipo == "1":
                            subtitulo = "Reporte por Fecha de Recepcion"
                        elif self.consulta_tipo == "2":
                            subtitulo = "Reporte por Numero de Lote"
                        elif self.consulta_tipo == "3":
                            subtitulo = "Reporte por Fecha de Liquidacion"
                        
                        self.set_x(15)
                        self.cell(0, 7, txt=subtitulo, ln=True, align="L")
                        self.ln(0)

                def footer(self):
                    self.set_y(-15)
                    self.set_font("Arial", size=8)
                    self.cell(0, 10, f"Página {self.page_no()} de {{nb}}", 0, 0, "C")
                    self.set_y(-15)
                    self.set_font("Arial", size=7)
                    self.cell(0, 10, f"Fecha y hora de impresión: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", 0, 0, "L")
                    self.ln(2)
                    if self.username:
                        self.cell(0, 10, txt=f"Usuario: {self.username}", border=0, align='L', ln=1)
        
            pdf = PDFWithHeaderFooter(
                orientation='L', 
                unit='mm', 
                format='legal',
                valor_cero_var=self.valor_cero_var.value,
                valor_cero_var_incluir=self.valor_cero_var_incluir.value,
                fecha_inicio=self.entry_fecha_inicio.value,
                fecha_fin=self.entry_fecha_fin.value,
                num_lote_inicio=self.entry_num_lote_inicio.value,
                denominacion=self.combo_denominacion.value,
                consulta_tipo=self.consulta_tipo_var.value,
                username=self.username
            )
            
            pdf.set_auto_page_break(auto=True, margin=15)
            pdf.alias_nb_pages()
            pdf.add_page()
            
            primera_hoja = True
            while len(tabla_config["filas"]) > 0:
                pdf.set_font("Arial", size=7, style="B")
                for columna in tabla_config["columnas"]:
                    pdf.cell(columna["ancho"], 7, txt=columna["nombre"], border=1, align="C")
                pdf.ln(8)
                pdf.set_font("Arial", size=7)

                filas_por_hoja = 23 if primera_hoja else 26
                for i, fila in enumerate(tabla_config["filas"][:filas_por_hoja]):
                    for j, columna in enumerate(tabla_config["columnas"]):
                        if i % 2 == 0:
                            pdf.set_fill_color(240, 240, 240)
                        else:
                            pdf.set_fill_color(255, 255, 255)
                        pdf.cell(columna["ancho"], 7, txt=str(fila[j]), border=0, align=columna["align"], fill=True)
                    pdf.ln(7)

                del tabla_config["filas"][:filas_por_hoja]

                if len(tabla_config["filas"]) > 0:
                    pdf.add_page()
                    primera_hoja = False

            pdf.ln(2)
            pdf.set_font("Arial", size=7, style="B")
            pdf.cell(108, 7, txt="Totales", border=1, align="C", ln=False)
            pdf.cell(14, 7, txt=str(tabla_config["totales"]["Peso"]), border=1, align="R")
            pdf.cell(14, 7, txt=str(tabla_config["totales"]["Knh"]), border=1, align="R")
            pdf.cell(10, 7, txt=str(tabla_config["totales"]["H2O"]), border=1, align="R")
            pdf.cell(12, 7, txt=str(tabla_config["totales"]["Kh2o"]), border=1, align="R")
            pdf.cell(14, 7, txt=str(tabla_config["totales"]["Kns"]), border=1, align="R")
            pdf.cell(10, 7, txt=str(tabla_config["totales"]["Leyes Zn"]), border=1, align="R")
            pdf.cell(10, 7, txt=str(tabla_config["totales"]["Leyes Ag"]), border=1, align="R")
            pdf.cell(10, 7, txt=str(tabla_config["totales"]["Leyes Pb"]), border=1, align="R")
            pdf.cell(13, 7, txt=str(tabla_config["totales"]["KFinos Zn"]), border=1, align="R")
            pdf.cell(13, 7, txt=str(tabla_config["totales"]["KFinos Ag"]), border=1, align="R")
            pdf.cell(13, 7, txt=str(tabla_config["totales"]["KFinos Pb"]), border=1, align="R")
            pdf.cell(10, 7, txt=str(tabla_config["totales"]["Precio Sus"]), border=1, align="R")
            pdf.cell(15, 7, txt=str(tabla_config["totales"]["Valor Neto"]), border=1, align="R")
            pdf.cell(14, 7, txt=str(tabla_config["totales"]["Descuentos"]), border=1, align="R")
            pdf.cell(14, 7, txt=str(tabla_config["totales"]["Bono Trans"]), border=1, align="R")
            pdf.cell(14, 7, txt=str(tabla_config["totales"]["Bono Extra"]), border=1, align="R")
            pdf.cell(15, 7, txt=str(tabla_config["totales"]["Pagable"]), border=1, align="R")
            pdf.ln(7)
            pdf.cell(0, 7, txt=f"Nº de Lotes: {tabla_config['totales']['Nº de Filas']}", ln=True, align="L")

            pdf.output("Reporte General.pdf", "F")
            os.startfile('Reporte General.pdf')
            self.page.update()
            self.mostrar_mensaje4(f"Reporte Generado correctamente ", "éxito")


        except Exception as ex:
            self.mostrar_mensaje4(f"Error al generar el reporte: {str(ex)}", "error")            

    def exportar_a_excel(self, e):
        try:
            if not self.listview_container.content.controls:
                self.mostrar_mensaje4("No hay datos para exportar a Excel", "advertencia")
                return

            # Obtener los encabezados de las columnas
            encabezados = [control.value for control in self.column_titles.controls if isinstance(control, ft.Text)]

            # Obtener los datos del ListView con sus tipos correctos
            datos = []
            for child in self.listview_container.content.controls:
                if isinstance(child, ft.Container):
                    row_data = []
                    for cell in child.content.controls:
                        if isinstance(cell, ft.Text):
                            value = cell.value
                            # Intentar convertir a número si es posible
                            try:
                                # Limpiar el valor (quitar comas, puntos, etc.)
                                cleaned_value = str(value).replace(',', '').strip()
                                if cleaned_value.replace('.', '', 1).isdigit():
                                    value = float(cleaned_value)
                            except (ValueError, AttributeError):
                                pass
                            row_data.append(value)
                    datos.append(row_data)

            # Crear libro de Excel
            wb = Workbook()
            ws = wb.active
            ws.title = "Reporte de Compra"

            # Agregar encabezados
            ws.append(encabezados)

            # Agregar datos con tipos correctos
            for fila in datos:
                ws.append(fila)

            # Definir qué columnas son numéricas y su formato
            columnas_numericas = {
                'G': {'nombre': 'T.M.B.', 'formato': '0.000'},
                'H': {'nombre': 'T.M.H.', 'formato': '0.000'},
                'I': {'nombre': 'H2O', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'J': {'nombre': 'T.H.2.O.', 'formato': '0.000'},
                'K': {'nombre': 'T.N.S.', 'formato': '0.00000'},
                'L': {'nombre': 'Zn', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'M': {'nombre': 'Ag', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'N': {'nombre': 'Pb', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'O': {'nombre': 'KF Zn', 'formato': '0.000'},
                'P': {'nombre': 'KF Ag', 'formato': '0.000'},
                'Q': {'nombre': 'KF Pb', 'formato': '0.000'},
                'R': {'nombre': 'Precio Sus', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'S': {'nombre': 'Valor Neto', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'T': {'nombre': 'Descuentos', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'U': {'nombre': 'Bono Trans', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'V': {'nombre': 'Bono Extra', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'W': {'nombre': 'Pagable', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2}
            }

            # Aplicar formatos a las columnas numéricas
            for col_letter, col_info in columnas_numericas.items():
                for cell in ws[col_letter][1:]:  # Excluye el encabezado
                    if isinstance(cell.value, (int, float)):
                        cell.number_format = col_info['formato']

            # Ajustar ancho de columnas automáticamente
            for col in ws.columns:
                max_length = 0
                column = col[0].column_letter
                for cell in col:
                    try:
                        cell_length = len(str(cell.value))
                        if cell_length > max_length:
                            max_length = cell_length
                    except:
                        pass
                adjusted_width = (max_length + 2) * 1.2
                ws.column_dimensions[column].width = adjusted_width

            # Guardar archivo con nombre único
            fecha_actual = datetime.now().strftime("%Y%m%d_%H%M%S")
            nombre_archivo = f"Reporte_Compra_{fecha_actual}.xlsx"
            
            # Crear directorio si no existe
            os.makedirs("reportes_excel", exist_ok=True)
            ruta_completa = os.path.join("reportes_excel", nombre_archivo)
            
            wb.save(ruta_completa)

            # Mostrar mensaje de éxito
            self.mostrar_mensaje4(f"Reporte exportado correctamente a {nombre_archivo}", "éxito")
            
            # Abrir archivo automáticamente
            os.startfile(ruta_completa)

        except Exception as ex:
            self.mostrar_mensaje4(f"Error al exportar a Excel: {str(ex)}", "error")
            import traceback
            traceback.print_exc()
                

class FrameDiezDos(ft.Control):
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.username = None
        self.create_ui_elements()
        self.fill_denominations()

    def mostrar_mensaje4(self, mensaje, tipo="error"):
        """
        Muestra un mensaje en un SnackBar.
        
        Parámetros:
            mensaje (str): El mensaje a mostrar.
            tipo (str): Tipo de mensaje ("éxito", "error" o "advertencia").
        """
        # Definir el color de fondo según el tipo de mensaje
        if tipo == "éxito":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.GREEN)  # 70% de opacidad
        elif tipo == "advertencia":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.TEAL)   # 70% de opacidad
        else:  # Por defecto, es un error
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.RED)    # 70% de opacidad
        
        # Crear el contenido del SnackBar con bordes redondeados y transparencia
        snack_content = ft.Container(
            content=ft.Text(mensaje, size=18, color=ft.Colors.WHITE),  # Texto del mensaje en blanco
            bgcolor=color_fondo,                              # Color de fondo con transparencia
            border_radius=10,                                 # Bordes redondeados de 10
            padding=10,                                       # Espaciado interno
        )
        
        # Crear el SnackBar
        snack_bar = ft.SnackBar(
            content=snack_content,  # Usar el contenedor con bordes redondeados y transparencia
            open=True,              # Abrir automáticamente
            duration=5000,          # Duración de 5 segundos
            bgcolor=ft.Colors.TRANSPARENT,  # Fondo transparente para el SnackBar
        )
        
        # Agregar el SnackBar a la página y actualizar la UI
        self.page.overlay.append(snack_bar)
        self.page.update()

    def create_ui_elements(self):
        # Título
        self.titulo_container_m02 = Container(
            content=Text("REPORTE FORMULARIOS M02 SENARECOM", size=24, weight="bold", text_align="center", color=Colors.TEAL),
            alignment=alignment.center,
            padding=padding.all(0),
        )

        # Títulos de las columnas
        self.column_titles_m02 = ft.Row(
            controls=[
                ft.Text("Fecha Rep", width=80, weight="bold", size=11),
                ft.Text("Fecha Liq", width=80, weight="bold", size=11),
                ft.Text("Lote", width=70, weight="bold", size=11),
                ft.Text("For. 101", width=50, weight="bold", size=11),
                ft.Text("Nonbres", width=170, weight="bold", size=11),
                ft.Text("Procedencia", width=70, weight="bold", size=11),
                ft.Text("Ley Zn", width=60, weight="bold", size=11,text_align="right"),
                ft.Text("Ley Ag", width=60, weight="bold", size=11,text_align="right"),
                ft.Text("Ley Pb", width=60, weight="bold", size=11,text_align="right"),
                ft.Text("Peso Bruto", width=80, weight="bold", size=11,text_align="right"),
                ft.Text("H2O", width=50, weight="bold", size=11,text_align="right"),
                ft.Text("Peso Seco", width=60, weight="bold", size=11,text_align="right"),
                ft.Text("Valor Neto", width=60, weight="bold", size=11,text_align="right"),
                ft.Text("Caja", width=60, weight="bold", size=11,text_align="right"),
                ft.Text("Comibol", width=70, weight="bold", size=11,text_align="right"),
                ft.Text("Regalias", width=60, weight="bold", size=11,text_align="right"),
                ft.Text("Fencomin", width=70, weight="bold", size=11,text_align="right"),
                ft.Text("Fedecomin", width=70, weight="bold", size=11,text_align="right"),
                ],
            spacing=1,
            expand=True,
        )

        # ListView mejorado con scroll independiente
        self.listview_m02 = ft.ListView(
            expand=True,
            spacing=1,
            padding=1,
            auto_scroll=False,
            height=300
        )

        self.listview_container_m02 = ft.Container(
            content=self.listview_m02,
            height=300,
            border=ft.border.all(1, ft.Colors.GREY_400),
            border_radius=5,
        )

        # Entradas de fecha usando TextField
        self.entry_fecha_inicio_m02 = ft.TextField(
            label="Fecha Inicio (YYYY-MM-DD)",
            value=datetime.today().strftime('%Y-%m-%d'),
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )
        self.entry_fecha_fin_m02 = ft.TextField(
            label="Fecha Fin (YYYY-MM-DD)",
            value=datetime.today().strftime('%Y-%m-%d'),
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )

        # ComboBox para denominación
        self.combo_denominacion_m02 = ft.Dropdown(
            label="Denominacion", 
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE),
            value="TODAS"
        )

        # Entrada para número de lote
        self.entry_num_lote_inicio_m02 = ft.TextField(
            label="Número de Lote", 
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )

        # Campo de búsqueda en tiempo real
        self.search_field_m02 = ft.TextField(
            label="Buscar por nombre o denominación",
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE),
            on_change=self.buscar_en_tiempo_real
        )

        # Checkboxes para incluir/excluir valores cero
        self.valor_cero_var_m02 = ft.Checkbox(label="Excluir valor cero", value=False)
        self.valor_cero_var_incluir_m02 = ft.Checkbox(label="Incluir solo valor cero", value=False)

        # Radio buttons para tipo de consulta
        self.consulta_tipo_var_m02 = ft.RadioGroup(
            content=ft.ResponsiveRow(
                controls=[
                    ft.Column(
                        controls=[ft.Radio(value="1", label="Fecha")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=10,
                    ),
                    ft.Column(
                        controls=[ft.Radio(value="2", label="Número de lote")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=10,
                    ),
                    ft.Column(
                        controls=[ft.Radio(value="3", label="Fecha Liq")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=2,
                    ),
                ],
                spacing=10,
            ),
            value="1"
        )

        # Botones
        self.boton_ejecutar_m02 = ft.ElevatedButton(
            text="Ejecutar consulta",
            on_click=lambda e: self.ejecutar_consulta1(e),
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_ejecutar
        )
        self.boton_exportar_m02 = ft.ElevatedButton(
            text="Visualizar",
            on_click=self.crear_reporte_general,
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_exportar
        )
        self.boton_exportar_xls_m02 = ft.ElevatedButton(
            text="Exportar a XLS",
            on_click=self.exportar_a_excel,
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_exportar_xls
        )

        # Contenedor principal con scroll
        self.scrollable_content = ft.Column(
            controls=[
                self.titulo_container_m02,
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.entry_fecha_inicio_m02], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.entry_fecha_fin_m02], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.combo_denominacion_m02], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.entry_num_lote_inicio_m02], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                    ],
                    spacing=10,
                ),
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.search_field_m02], col={"xs": 12, "sm": 6, "md": 6, "lg": 6}, spacing=10),
                        ft.Column(controls=[self.valor_cero_var_m02], col={"xs": 12, "sm": 6, "md": 3, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.valor_cero_var_incluir_m02], col={"xs": 12, "sm": 6, "md": 3, "lg": 3}, spacing=10),
                    ],
                    spacing=10,
                ),
                self.consulta_tipo_var_m02,
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.boton_ejecutar_m02], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                        ft.Column(controls=[self.boton_exportar_m02], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                        ft.Column(controls=[self.boton_exportar_xls_m02], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                    ],
                    spacing=10,
                ),
                self.column_titles_m02,
                self.listview_container_m02,
            ],
            scroll=ft.ScrollMode.AUTO,
            expand=True,
        )

        self.controls = [self.scrollable_content]

    def on_hover_boton_ejecutar(self, e):
        self.boton_ejecutar_m02.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_ejecutar_m02.update()

    def on_hover_boton_exportar(self, e):
        self.boton_exportar_m02.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_exportar_m02.update()

    def on_hover_boton_exportar_xls(self, e):
        self.boton_exportar_xls_m02.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_exportar_xls_m02.update()

    def fill_denominations(self):
        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    cursor.execute("SELECT 'TODAS' AS Denominacion UNION SELECT DISTINCT Denominacion FROM Proveedores ORDER BY Denominacion")
                    denominaciones = cursor.fetchall()
                    self.combo_denominacion_m02.options = [ft.dropdown.Option(denominacion[0]) for denominacion in denominaciones]
        except Exception as ex:
            self.mostrar_mensaje4(f"Error al cargar denominaciones: {str(ex)}", "error")

    def buscar_en_tiempo_real(self, e):
        """Realiza la búsqueda en tiempo real mientras se escribe"""
        search_term = self.search_field_m02.value.strip()
        if len(search_term) >= 3 or not search_term:
            self.ejecutar_consulta1(e, search_term)

    def ejecutar_consulta1(self, e, search_term=""):
        denominacion = self.combo_denominacion_m02.value
        try:
            fecha_inicio = datetime.strptime(self.entry_fecha_inicio_m02.value, "%Y-%m-%d").strftime("%Y-%m-%d")
            fecha_fin = datetime.strptime(self.entry_fecha_fin_m02.value, "%Y-%m-%d").strftime("%Y-%m-%d")
        except ValueError:
            self.mostrar_mensaje4("Formato de fecha incorrecto. Use YYYY-MM-DD.", "error")
            return

        consulta_tipo = self.consulta_tipo_var_m02.value
        valor_cero = self.valor_cero_var_m02.value
        num_lote_inicio = self.entry_num_lote_inicio_m02.value

        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    consulta = """
                        SELECT 
                            Recepcion.Fecha, 
                            Liquidacion.Fechaliq, 
                            CONCAT(Liquidacion.NombreInicial, '-', Recepcion.Numlote) as LoteCompleto,
                            Formulario_101,
                            Proveedores.NombresApellidos,
                            Recepcion.Procedencia, 
                            leyesZnliq, 
                            leyesAgliq, 
                            leyespbliq,
                            ROUND((Recepcion.Peso)/1000, 3) as Peso,
                            LeyesH2Oliq,
                            ROUND((Liquidacion.Kns)/1000, 5) as kns,
                            VNetoBs,
                            VCns,
                            Vcomibol,
                            Retenciones_Regalias,
                            Retenciones_Fencomin,
                            Retenciones_Fedecomin,
                            ROUND((Liquidacion.KMerma), 3) as knh,
                            ROUND((Liquidacion.Knh)/1000, 3) as knh,
                            ROUND((Liquidacion.Kh2o)/1000, 3) as Kh2o,
                            ROUND((Liquidacion.KFinosZn)/1000, 5) as Peso,
                            ROUND((Liquidacion.KFinosAg), 5) as Peso,
                            ROUND((Liquidacion.KFinosPb)/1000, 5) as kfinospb,
                            VbrutoZn,
                            VBrutoAg,
                            VBrutoPb,
                            VRMZn,
                            VRMAg,
                            VRMPb,
                            VTRetenciones,
                            VTLiqPag,ROUND((Liquidacion.Kns), 5) as kns,
                            ROUND((Recepcion.Peso), 5) as Peso    
                            
                        FROM Liquidacion 
                        LEFT JOIN Recepcion ON Recepcion.NumLote = Liquidacion.NumLote 
                        LEFT JOIN Proveedores ON Proveedores.NombresApellidos = Recepcion.NombresApellidos 
                        LEFT JOIN Clientes ON Clientes.Denominacion = Recepcion.Denominacion 
                        INNER JOIN Conjunto ON Conjunto.NombreConjunto = Liquidacion.NombreConjunto 
                        INNER JOIN Inicial ON Inicial.NombreInicial = Liquidacion.NombreInicial
                        WHERE 1=1
                    """

                    params = []

                    if denominacion != 'TODAS':
                        consulta += " AND Clientes.Denominacion = %s"
                        params.append(denominacion)
                    
                    if consulta_tipo == "1":
                        consulta += " AND Recepcion.Fecha BETWEEN %s AND %s"
                        params.extend([fecha_inicio, fecha_fin])
                    elif consulta_tipo == "2":
                        num_lotes = [int(x) for x in num_lote_inicio.split(',')]
                        consulta += f" AND Recepcion.NumLote IN ({','.join(['%s']*len(num_lotes))})"
                        params.extend(num_lotes)
                    #elif consulta_tipo == "3":
                    #    consulta += " AND Liquidacion.fechaliq BETWEEN %s AND %s"
                    #    params.extend([fecha_inicio, fecha_fin])
                    
                    if valor_cero:
                        consulta += " AND TPrecioSus = 0"
                    
                    if search_term:
                        consulta += " AND (Recepcion.NombresApellidos LIKE %s OR Recepcion.Denominacion LIKE %s)"
                        search_param = '%' + search_term + '%'
                        params.extend([search_param, search_param])
                    
                    consulta += " ORDER BY Liquidacion.NumLote "

                    cursor.execute(consulta, params)
                    resultados = cursor.fetchall()

                    if resultados:
                        self.mostrar_mensaje4(f"¡Éxito! Se encontraron {len(resultados)} registros.", "éxito")
                        self.mostrar_resultados(resultados)
                    else:
                        self.mostrar_mensaje4("No se encontraron registros que coincidan con los criterios de búsqueda.", "advertencia")

        except ValueError as e:
            self.mostrar_mensaje4("Error de entrada: Asegúrate de que los números de lote sean enteros y estén separados por comas.", "error")
        except Exception as ex:
            self.mostrar_mensaje4(f"Error al ejecutar la consulta: {str(ex)}", "error")

    def mostrar_resultados(self, resultados):
        # Limpiar los controles existentes
        self.listview_m02.controls.clear()
        
        # Definir anchos personalizados para cada columna
        column_widths = {
            0: 80,   # fecha de recepcion
            1: 80,    # Fecha de liquidacion
            2: 70,    # lote
            3: 50,    # Formulario 101
            4: 150,    # Nombres
            5: 60,    # Procedencia
            6: 60,     # Ley de Zinc
            7: 60,     # Ley de Plata
            8: 60,     # Ley de plomo
            9: 60,     # Peso Bruto
            10: 60,    # Humedad
            11: 60,     # Peso seco
            12: 60,     # Valor Neto
            13: 60,     # Caja
            14: 60,     # Comibol
            15: 60,     # Regalias
            16: 60,    # Fencomin
            17: 60   # Fedecomin
        }
        
        for resultado in resultados:
            row_data = [
                str(resultado[0]),  # Fecha de recepcion
                str(resultado[1]),  # Fecha de Liquidacion
                str(resultado[2]),  # Lote
                str(resultado[3]),  # Formulario 101
                str(resultado[4]),  # Nombres y Apellidos
                str(resultado[5]),  # Procedencia
                self._parse_float(resultado[6]),  # ley de Zinc
                self._parse_float(resultado[7]),  # Ley de PLata
                self._parse_float(resultado[8]),  # Ley de Plomo
                self._parse_float(resultado[9]),  # Peso Bruto
                self._parse_float(resultado[10]), # Humendad
                self._parse_float(resultado[11]), # Peso Seco
                self._parse_float(resultado[12]), # Valor Veto
                self._parse_float(resultado[13]), # Caja
                self._parse_float(resultado[14]), # Comibol
                self._parse_float(resultado[15]), # Regalias
                self._parse_float(resultado[16]), # Fencomin
                self._parse_float(resultado[17]), # Fedecomin
                self._parse_float(resultado[18]), # Fedecomin
                self._parse_float(resultado[19]), # Fedecomin
                self._parse_float(resultado[20]), # Fedecomin
                self._parse_float(resultado[21]), # Fedecomin
                self._parse_float(resultado[22]), # Fedecomin
                self._parse_float(resultado[23]), # Fedecomin
            ]
            
            row_controls = []
            for i, dato in enumerate(row_data):
                # Usar el ancho personalizado o el predeterminado (50) si no está definido
                width = column_widths.get(i, 60)
                text_align = ft.TextAlign.RIGHT if isinstance(dato, (int, Decimal)) else ft.TextAlign.LEFT
                
                row_controls.append(
                    ft.Text(
                        str(dato),
                        size=12,  # Tamaño de fuente uniforme
                        width=width,
                        text_align=text_align
                    )
                )
            
            row = ft.Row(controls=row_controls, spacing=4) #spacing espacio entre columnas
            container = ft.Container(
                content=row,
                padding=5,  # Un poco de padding para mejor visualización entre texto y contorno
                border=ft.border.all(1, ft.Colors.TEAL),
                border_radius=5,
            )
            self.listview_m02.controls.append(container)
        
        self.page.update()

    def _parse_float(self, value):
        """Convierte valores a float cuando es posible"""
        try:
            return Decimal(value) if value not in (None, "") else 0.0
        except (ValueError, TypeError):
            return value

    def set_username(self, username):
        self.username = username

    def crear_reporte_general(self, e):
        # obtener los Valores del try11
        datos = []
        for child in self.listview_container_m02.content.controls:
            if isinstance(child, ft.Container):
                row = child.content
                datos.append([cell.value for cell in row.controls if isinstance(cell, ft.Text)])
        
        if not datos:
            self.mostrar_mensaje4("No hay datos para generar el reporte.", "advertencia")            
            return
        
        try:    
            tabla_config = {
                "columnas": [
                    {"nombre": "Fecha Int", "ancho": 16, "align": "L"},            
                    {"nombre": "Fecha Liq", "ancho": 16, "align": "L"},            
                    {"nombre": "Lote", "ancho": 10, "align": "C"},
                    {"nombre": "For.101", "ancho": 13, "align": "C"},
                    {"nombre": "Nombres Apellidos", "ancho": 32, "align": "L"},
                    {"nombre": "Procedencia", "ancho": 20, "align": "C"},
                    {"nombre": "Zn %", "ancho": 10, "align": "R"},
                    {"nombre": "Ag DM", "ancho": 10, "align": "R"},
                    {"nombre": "Pb %", "ancho": 10, "align": "R"},
                    {"nombre": "Peso Bruto", "ancho": 15, "align": "R"},
                    {"nombre": "H2O", "ancho": 10, "align": "R"},
                    {"nombre": "Peso Neto", "ancho": 15, "align": "R"},    
                    {"nombre": "Costo Min", "ancho": 15, "align": "R"},
                    {"nombre": "Caja", "ancho": 13, "align": "R"},
                    {"nombre": "Comibol", "ancho": 13, "align": "R"},
                    {"nombre": "Regalia", "ancho": 14, "align": "R"},
                    {"nombre": "Fencomin", "ancho": 14, "align": "R"},
                    {"nombre": "Fedecomin", "ancho": 15, "align": "R"}
                ],
                "filas": datos,
                "totales": {
                    "Leyes Zn": "{:.5f}".format(round((sum(Decimal(fila[21]) for fila in datos) / sum(Decimal(fila[11]) for fila in datos)) * 100, 5)), 
                    "Leyes Ag": "{:.5f}".format(round((sum(Decimal(fila[22]) for fila in datos) / sum(Decimal(fila[11]) for fila in datos)) * 10, 5)), 
                    "Leyes Pb": "{:.5f}".format(round((sum(Decimal(fila[23]) for fila in datos) / sum(Decimal(fila[11]) for fila in datos)) * 100, 5)), 
                    "Peso Bruto": "{:.3f}".format(round(sum(Decimal(fila[9]) for fila in datos), 3)),
                    "H2O": "{:.5f}".format(round((sum(Decimal(fila[20]) for fila in datos) / sum(Decimal(fila[19]) for fila in datos)) * 100, 5)),             
                    "Kns": "{:.5f}".format(round(sum(Decimal(fila[11]) for fila in datos), 5)),
                    "Valor Neto": "{:,.2f}".format(round(sum(Decimal(fila[12]) for fila in datos),2)), 
                    "Caja":"{:.2f}".format(round(sum(Decimal(fila[13]) for fila in datos),2)),
                    "Comibol": "{:.2f}".format(round(sum(Decimal(fila[14]) for fila in datos),2)),
                    "Regalia Minera": "{:.2f}".format(round(sum(Decimal(fila[15]) for fila in datos),2)),
                    "Fencomin": "{:,.2f}".format(round(sum(Decimal(fila[16]) for fila in datos),2)),
                    "Fedecomin": "{:,.2f}".format(round(sum(Decimal(fila[17]) for fila in datos),2)),
                    "Nº de Filas": len(datos)
                }
            }

            # Crear el PDF con header solo en primera página
            class PDFWithFirstPageHeader(FPDF):
                def __init__(self, *args, **kwargs):
                    self.subtitulo_info = kwargs.pop('suptitulo_info', '')  
                    super().__init__(*args, **kwargs)
                    self.first_page = True
                
                def header(self):
                    if self.page_no() == 1 :
                        # Logo o información de la empresa
                        self.set_font("Arial", size=10, style="B")
                        self.cell(0, 5, "EMPRESA MINERA VIRGEN DE COTOCA S.R.L", 0, 1, "C")
                        self.set_font("Arial", size=8, style="B")
                        self.cell(0, 5, "Mat de Com. N° 362868 NIT: 341040029 NIM: 05-0438-04", 0, 1, "C")
                        self.set_font("Arial", size=12, style="B")
                        self.cell(0, 5, "DECLARACION DE FORMULARIOS M02 SENARECOM", 0, 1, "C")
                        
                        # Subtítulo
                        subtitulo_left = ""
                        if self.subtitulo_info:
                            fecha_inicio_day = int(self.subtitulo_info['fecha_inicio'].split('-')[2])
                            fecha_inicio_month = self.subtitulo_info['fecha_inicio'].split('-')[1]
                            fecha_inicio_year = self.subtitulo_info['fecha_inicio'].split('-')[0]    
                            fecha_fin_day = int(self.subtitulo_info['fecha_fin'].split('-')[2])
                            fecha_fin_month = self.subtitulo_info['fecha_fin'].split('-')[1]

                            if self.subtitulo_info['consulta_tipo'] == "1":
                                if fecha_inicio_month == fecha_fin_month:
                                    month_name = {
                                        '01': 'ENERO', '02': 'FEBRERO', '03': 'MARZO', '04': 'ABRIL',
                                        '05': 'MAYO', '06': 'JUNIO', '07': 'JULIO', '08': 'AGOSTO',
                                        '09': 'SEPTIEMBRE', '10': 'OCTUBRE', '11': 'NOVIEMBRE', '12': 'DICIEMBRE'
                                    }[fecha_inicio_month]

                                    if 1 <= fecha_inicio_day <= 15 and 1 <= fecha_fin_day <= 15:
                                        subtitulo_left += f" PRIMERA QUINCENA DE {month_name} DEL {fecha_inicio_year}"
                                    elif 16 <= fecha_inicio_day <= 31 and 16 <= fecha_fin_day <= 31:
                                        subtitulo_left += f" SEGUNDA QUINCENA DE {month_name} DEL {fecha_inicio_year}"
                            
                            elif self.subtitulo_info['consulta_tipo'] == "2":
                                if fecha_inicio_month == fecha_fin_month:
                                    month_name = {
                                        '01': 'ENERO', '02': 'FEBRERO', '03': 'MARZO', '04': 'ABRIL',
                                        '05': 'MAYO', '06': 'JUNIO', '07': 'JULIO', '08': 'AGOSTO',
                                        '09': 'SEPTIEMBRE', '10': 'OCTUBRE', '11': 'NOVIEMBRE', '12': 'DICIEMBRE'
                                    }[fecha_inicio_month]

                                    if 1 <= fecha_inicio_day <= 15 and 1 <= fecha_fin_day <= 15:
                                        subtitulo_left += f" PRIMERA QUINCENA DE {month_name} DEL {fecha_inicio_year}"
                                    elif 16 <= fecha_inicio_day <= 31 and 16 <= fecha_fin_day <= 31:
                                        subtitulo_left += f" SEGUNDA QUINCENA DE {month_name} DEL {fecha_inicio_year}"

                            if self.subtitulo_info['denominacion'] != 'TODAS':
                                subtitulo_left += f" - COOPERATIVA MINERA {self.subtitulo_info['denominacion']}"

                        self.set_font("Arial", size=9, style="B")
                        self.cell(0, 5, subtitulo_left, 0, 1, "C")
                        #self.set_font("Arial", size=9, style="B")
                        #self.cell(230, 5, "ID:", 0, 0, "R")
                        self.ln(5)  # Espacio después del header
                
                def footer(self):
                    self.set_y(-15)  # Posición a 1.5 cm desde el fondo
                    self.set_font("Arial", size=8)
                    self.cell(0, 10, f"Página {self.page_no()} de {{nb}}", 0, 0, "C")
                
                """def add_page(self, *args, **kwargs):
                    self.first_page = True
                    super().add_page(*args, **kwargs)"""
                
            # Crear instancia del PDF personalizado
            pdf = PDFWithFirstPageHeader(orientation='L', unit='mm', format='Letter')
            pdf.set_auto_page_break(auto=True, margin=15)
            pdf.alias_nb_pages()
            
            # Pasar información para el subtítulo al PDF
            pdf.subtitulo_info = {
                'fecha_inicio': self.entry_fecha_inicio_m02.value if self.entry_fecha_inicio_m02.value else '',
                'fecha_fin': self.entry_fecha_fin_m02.value if self.entry_fecha_fin_m02.value else '',
                'consulta_tipo': self.consulta_tipo_var_m02.value if self.consulta_tipo_var_m02.value else '',
                'denominacion': self.combo_denominacion_m02.value if self.combo_denominacion_m02.value != 'TODAS' else 'TODAS'
            }
            
            pdf.add_page()

            # Tabla
            primera_hoja = True
            while len(tabla_config["filas"]) > 0:
                pdf.ln(0)
                
                # Dibujar títulos de columnas en cada hoja
                pdf.set_font("Arial", size=7, style="B")
                for columna in tabla_config["columnas"]:
                    pdf.cell(columna["ancho"], 7, txt=columna["nombre"], border=1, align="C")
                        
                pdf.ln(8)
                pdf.set_font("Arial", size=7)

                # Dibujar tabla en cada hoja
                if primera_hoja:
                    filas_por_hoja = 22
                else:
                    filas_por_hoja = 26
                    
                for i, fila in enumerate(tabla_config["filas"][:filas_por_hoja]):
                    for j, columna in enumerate(tabla_config["columnas"]):
                        if i % 2 == 0:
                            pdf.set_fill_color(240, 240, 240)  # Color claro
                        else:
                            pdf.set_fill_color(255, 255, 255)  # Color blanco
                        pdf.cell(columna["ancho"], 7, txt=str(fila[j]), border=0, align=columna["align"], fill=True)
                    pdf.ln(7)

                # Eliminar filas procesadas
                del tabla_config["filas"][:filas_por_hoja]

                # Agregar hoja adicional si hay más filas
                if len(tabla_config["filas"]) > 0:
                    pdf.add_page()
                    primera_hoja = False
            
            # Totales
            pdf.ln(2)
            pdf.set_font("Arial", size=6, style="B")
            pdf.cell(107, 7, txt="Totales", border=1, align="C", ln=False)
            pdf.cell(10, 7, txt=str(tabla_config["totales"]["Leyes Zn"]), border=1, align="R")
            pdf.cell(10, 7, txt=str(tabla_config["totales"]["Leyes Ag"]), border=1, align="R")
            pdf.cell(10, 7, txt=str(tabla_config["totales"]["Leyes Pb"]), border=1, align="R")
            pdf.cell(15, 7, txt=str(tabla_config["totales"]["Peso Bruto"]), border=1, align="R")
            pdf.cell(10, 7, txt=str(tabla_config["totales"]["H2O"]), border=1, align="R")
            pdf.cell(15, 7, txt=str(tabla_config["totales"]["Kns"]), border=1, align="R")
            pdf.cell(15, 7, txt=str(tabla_config["totales"]["Valor Neto"]), border=1, align="R") 
            pdf.cell(13, 7, txt=str(tabla_config["totales"]["Caja"]), border=1, align="R")
            pdf.cell(13, 7, txt=str(tabla_config["totales"]["Comibol"]), border=1, align="R")
            pdf.cell(14, 7, txt=str(tabla_config["totales"]["Regalia Minera"]), border=1, align="R")
            pdf.cell(14, 7, txt=str(tabla_config["totales"]["Fencomin"]), border=1, align="R")
            pdf.cell(15, 7, txt=str(tabla_config["totales"]["Fedecomin"]), border=1, align="R")
            pdf.ln(7)
            pdf.cell(0, 7, txt=f"Nº de Lotes: {tabla_config['totales']['Nº de Filas']}", ln=True, align="L")

            # Guardar y abrir el PDF
            pdf.output("Reporte Formularios M02.pdf", "F")  
            os.startfile('Reporte Formularios M02.pdf')
            self.page.update()
            self.mostrar_mensaje4(f"Reporte Generado correctamente", "éxito")

        except Exception as ex:
            self.mostrar_mensaje4(f"Error al generar el reporte: {str(ex)}", "error")


    def exportar_a_excel(self, e):
        try:
            if not self.listview_container_m02.content.controls:
                self.mostrar_mensaje4("No hay datos para exportar a Excel", "advertencia")
                return

            # Obtener los encabezados de las columnas
            encabezados = [control.value for control in self.column_titles_m02.controls if isinstance(control, ft.Text)]

            # Obtener los datos del ListView con sus tipos correctos
            datos = []
            for child in self.listview_container_m02.content.controls:
                if isinstance(child, ft.Container):
                    row_data = []
                    for cell in child.content.controls:
                        if isinstance(cell, ft.Text):
                            value = cell.value
                            # Intentar convertir a número si es posible
                            try:
                                # Limpiar el valor (quitar comas, puntos, etc.)
                                cleaned_value = str(value).replace(',', '').strip()
                                if cleaned_value.replace('.', '', 1).isdigit():
                                    value = Decimal(cleaned_value)
                            except (ValueError, AttributeError):
                                pass
                            row_data.append(value)
                    datos.append(row_data)

            # Crear libro de Excel
            wb = Workbook()
            ws = wb.active
            ws.title = "Reporte de Compra"

            # Agregar encabezados
            ws.append(encabezados)

            # Agregar datos con tipos correctos
            for fila in datos:
                ws.append(fila)

            # Definir qué columnas son numéricas y su formato
            columnas_numericas = {
                'G': {'nombre': 'Ley Zn.', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'H': {'nombre': 'Ley Ag', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'I': {'nombre': 'Ley PB', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'J': {'nombre': 'Peso Bruto', 'formato': '0.000'},
                'K': {'nombre': 'Humedad', 'formato': '0.000'},
                'L': {'nombre': 'Peso Seco', 'formato': '0.00000'},
                'M': {'nombre': 'Valor Neto', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'N': {'nombre': 'Caja', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'O': {'nombre': 'Comibol', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'P': {'nombre': 'Regalias', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'Q': {'nombre': 'Fencomin', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'R': {'nombre': 'Fedecomin', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
            }

            # Aplicar formatos a las columnas numéricas
            for col_letter, col_info in columnas_numericas.items():
                for cell in ws[col_letter][1:]:  # Excluye el encabezado
                    if isinstance(cell.value, (int, Decimal)):
                        cell.number_format = col_info['formato']

            # Ajustar ancho de columnas automáticamente
            for col in ws.columns:
                max_length = 0
                column = col[0].column_letter
                for cell in col:
                    try:
                        cell_length = len(str(cell.value))
                        if cell_length > max_length:
                            max_length = cell_length
                    except:
                        pass
                adjusted_width = (max_length + 2) * 1.2
                ws.column_dimensions[column].width = adjusted_width

            # Guardar archivo con nombre único
            fecha_actual = datetime.now().strftime("%Y%m%d_%H%M%S")
            nombre_archivo = f"Reporte_Compra_{fecha_actual}.xlsx"
            
            # Crear directorio si no existe
            os.makedirs("reportes_excel", exist_ok=True)
            ruta_completa = os.path.join("reportes_excel", nombre_archivo)
            
            wb.save(ruta_completa)

            # Mostrar mensaje de éxito
            self.mostrar_mensaje4(f"Reporte exportado correctamente a {nombre_archivo}", "éxito")
            
            # Abrir archivo automáticamente
            os.startfile(ruta_completa)

        except Exception as ex:
            self.mostrar_mensaje4(f"Error al exportar a Excel: {str(ex)}", "error")
            import traceback
            traceback.print_exc()


class FrameDiezTres(ft.Control):
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.username = None
        self.create_ui_elements()
        self.fill_denominations()
        self.llenar_retenciones_ret()

    def mostrar_mensaje4(self, mensaje, tipo="error"):
        """
        Muestra un mensaje en un SnackBar.
        
        Parámetros:
            mensaje (str): El mensaje a mostrar.
            tipo (str): Tipo de mensaje ("éxito", "error" o "advertencia").
        """
        if tipo == "éxito":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.GREEN)
        elif tipo == "advertencia":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.TEAL)
        else:
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.RED)
        
        snack_content = ft.Container(
            content=ft.Text(mensaje, size=18, color=ft.Colors.WHITE),
            bgcolor=color_fondo,
            border_radius=10,
            padding=10,
        )
        
        snack_bar = ft.SnackBar(
            content=snack_content,
            open=True,
            duration=5000,
            bgcolor=ft.Colors.TRANSPARENT,
        )
        
        self.page.overlay.append(snack_bar)
        self.page.update()

    def create_ui_elements(self):
        # Título
        self.titulo_container_ret = ft.Container(
            content=ft.Text("REPORTE RETENCIONES", size=24, weight="bold", text_align="center", color=ft.Colors.TEAL),
            alignment=ft.alignment.center,
            padding=ft.padding.all(0),
        )

        # Títulos de las columnas
        self.column_titles_ret = ft.Row(
            controls=[
                ft.Text("Fecha", width=100, weight="bold", size=11, text_align="center"),
                ft.Text("Lote", width=100, weight="bold", size=11, text_align="center"),
                ft.Text("Nombres Apellidos", width=200, weight="bold", size=11, text_align="center"),
                ft.Text("Peso", width=100, weight="bold", size=11, text_align="right"),
                ft.Text("Peso Seco", width=100, weight="bold", size=11, text_align="right"),
                ft.Text("Ley Zn", width=100, weight="bold", size=11, text_align="right"),
                ft.Text("Ley Ag", width=100, weight="bold", size=11, text_align="right"),
                ft.Text("Ley Pb", width=100, weight="bold", size=11, text_align="right"),
                ft.Text("Valor Neto", width=100, weight="bold", size=11, text_align="right"),
                ft.Text("Retencion", width=100, weight="bold", size=11, text_align="right"),
            ],
            spacing=20,
            expand=True,
        )

        # ListView mejorado con scroll controlado
        self.listview_ret = ft.ListView(
            expand=True,
            spacing=5,
            padding=1,
            auto_scroll=False,  # Desactivamos el auto-scroll
        )

        self.listview_container_ret = ft.Container(
            content=self.listview_ret,
            height=300,
            #border=ft.border.all(1, ft.Colors.GREY_300),
        )

        # Entradas de fecha
        self.entry_fecha_inicio_ret = ft.TextField(
            label="Fecha Inicio (YYYY-MM-DD)",
            value=datetime.today().strftime('%Y-%m-%d'),
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )
        
        self.entry_fecha_fin_ret = ft.TextField(
            label="Fecha Fin (YYYY-MM-DD)",
            value=datetime.today().strftime('%Y-%m-%d'),
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )

        # ComboBox para denominación
        self.combo_denominacion_ret = ft.Dropdown(
            label="Denominacion", 
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE),
            value="TODAS"
        )

        self.combo_retencion_ret = ft.Dropdown(
            label="Retencion", 
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE),
        )

        # Entrada para número de lote
        self.entry_num_lote_inicio_ret = ft.TextField(
            label="Número de Lote", 
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )

        # Campo de búsqueda
        self.search_field_ret = ft.TextField(
            label="Buscar por nombre o denominación",
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE),
            on_change=self.buscar_en_tiempo_real
        )

        # Checkboxes
        self.valor_cero_var_ret = ft.Checkbox(label="Excluir valor cero", value=False)
        self.valor_cero_var_incluir_ret = ft.Checkbox(label="Incluir solo valor cero", value=False)

        # Radio buttons para tipo de consulta
        self.consulta_tipo_var_ret = ft.RadioGroup(
            content=ft.ResponsiveRow(
                controls=[
                    ft.Column(
                        controls=[ft.Radio(value="1", label="Fecha")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=10,
                    ),
                    ft.Column(
                        controls=[ft.Radio(value="2", label="Número de lote")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=10,
                    ),
                    ft.Column(
                        controls=[ft.Radio(value="3", label="Fecha Liq")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=2,
                    ),
                ],
                spacing=10,
            ),
            value="1"
        )

        # Botones
        self.boton_ejecutar_ret = ft.ElevatedButton(
            text="Ejecutar consulta",
            on_click=lambda e: self.ejecutar_consulta1(e),
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_ejecutar
        )
        
        self.boton_exportar_ret = ft.ElevatedButton(
            text="Visualizar",
            on_click=self.crear_reporte_general,
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_exportar
        )
        
        self.boton_exportar_xls_ret = ft.ElevatedButton(
            text="Exportar a XLS",
            on_click=self.exportar_a_excel,
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_exportar_xls
        )

        # Contenedor principal con scroll
        self.scrollable_content = ft.Column(
            controls=[
                self.titulo_container_ret,
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.entry_fecha_inicio_ret], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.entry_fecha_fin_ret], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.combo_denominacion_ret], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.combo_retencion_ret], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                    ],
                    spacing=10,
                ),
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.search_field_ret], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.entry_num_lote_inicio_ret], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.valor_cero_var_ret], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.valor_cero_var_incluir_ret], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                    ],
                    spacing=10,
                ),
                self.consulta_tipo_var_ret,
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.boton_ejecutar_ret], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                        ft.Column(controls=[self.boton_exportar_ret], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                        ft.Column(controls=[self.boton_exportar_xls_ret], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                    ],
                    spacing=10,
                ),
                self.column_titles_ret,
                self.listview_container_ret,
            ],
            scroll=ft.ScrollMode.AUTO,
            expand=True,
        )

        self.controls = [self.scrollable_content]

    def on_hover_boton_ejecutar(self, e):
        self.boton_ejecutar_ret.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_ejecutar_ret.update()

    def on_hover_boton_exportar(self, e):
        self.boton_exportar_ret.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_exportar_ret.update()

    def on_hover_boton_exportar_xls(self, e):
        self.boton_exportar_xls_ret.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_exportar_xls_ret.update()

    def fill_denominations(self):
        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    cursor.execute("SELECT 'TODAS' AS Denominacion UNION SELECT DISTINCT Denominacion FROM Proveedores ORDER BY Denominacion")
                    denominaciones = cursor.fetchall()
                    self.combo_denominacion_ret.options = [ft.dropdown.Option(denominacion[0]) for denominacion in denominaciones]
        except Exception as ex:
            self.mostrar_mensaje4(f"Error al cargar denominaciones: {str(ex)}", "error")

    def llenar_retenciones_ret(self):
        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    cursor.execute("SELECT DISTINCT COLUMN_NAME AS retencion FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Liquidacion' AND COLUMN_NAME LIKE 'R%'")
                    retenciones = cursor.fetchall()
                    self.combo_retencion_ret.options = [ft.dropdown.Option(retencion[0]) for retencion in retenciones]
        except Exception as ex:
            self.mostrar_mensaje4(f"Error al cargar retenciones: {str(ex)}", "error")

    def buscar_en_tiempo_real(self, e):
        search_term = self.search_field_ret.value.strip()
        if len(search_term) >= 3 or not search_term:
            self.ejecutar_consulta1(e, search_term)

    def ejecutar_consulta1(self, e, search_term=""):
        denominacion_ret = self.combo_denominacion_ret.value
        try:
            fecha_inicio_ret = datetime.strptime(self.entry_fecha_inicio_ret.value, "%Y-%m-%d").strftime("%Y-%m-%d")
            fecha_fin_ret = datetime.strptime(self.entry_fecha_fin_ret.value, "%Y-%m-%d").strftime("%Y-%m-%d")
        except ValueError:
            self.mostrar_mensaje4("Formato de fecha incorrecto. Use YYYY-MM-DD.", "error")
            return

        consulta_tipo_ret = self.consulta_tipo_var_ret.value
        valor_cero_ret = self.valor_cero_var_ret.value
        num_lote_inicio_ret = self.entry_num_lote_inicio_ret.value
        retencion = self.combo_retencion_ret.value

        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    consulta = """
                        SELECT 
                            Recepcion.fecha, 
                            CONCAT(Liquidacion.NombreInicial, '-', Recepcion.Numlote) as LoteCompleto,
                            Recepcion.nombresapellidos,
                            ROUND((Recepcion.Peso)/1000 , 3) as Peso, 
                            ROUND((Liquidacion.Kns)/1000, 3) as kns,
                            LeyesZnLiq,
                            LeyesAgLiq,
                            LeyesPbLiq, 
                            VNetoBs,
                            {retencion}      
                        FROM Liquidacion 
                        INNER JOIN Recepcion ON Recepcion.NumLote = Liquidacion.NumLote 
                        INNER JOIN Proveedores ON Proveedores.NombresApellidos = Recepcion.NombresApellidos 
                        INNER JOIN Clientes ON Clientes.Denominacion = Recepcion.Denominacion 
                        INNER JOIN Conjunto ON Conjunto.NombreConjunto = Liquidacion.NombreConjunto 
                        INNER JOIN Inicial ON Inicial.NombreInicial = Liquidacion.NombreInicial
                        WHERE 1=1
                    """.format(retencion=retencion)

                    params = []

                    if denominacion_ret != 'TODAS':
                        consulta += " AND Clientes.Denominacion = %s"
                        params.append(denominacion_ret)
                    
                    if consulta_tipo_ret == "1":
                        consulta += " AND Recepcion.Fecha BETWEEN %s AND %s"
                        params.extend([fecha_inicio_ret, fecha_fin_ret])
                    elif consulta_tipo_ret == "2":
                        num_lotes = [int(x) for x in num_lote_inicio_ret.split(',')]
                        consulta += f" AND Recepcion.NumLote IN ({','.join(['%s']*len(num_lotes))})"
                        params.extend(num_lotes)
                    elif consulta_tipo_ret == "3":
                        consulta += " AND Liquidacion.fechaliq BETWEEN %s AND %s"
                        params.extend([fecha_inicio_ret, fecha_fin_ret])
                    
                    if valor_cero_ret:
                        consulta += " AND TPrecioSus = 0"
                    
                    if search_term:
                        consulta += " AND (Recepcion.NombresApellidos LIKE %s OR Recepcion.Denominacion LIKE %s)"
                        search_param = '%' + search_term + '%'
                        params.extend([search_param, search_param])
                    
                    if retencion:
                        consulta += " AND {} IS NOT NULL".format(retencion)
                    

                    consulta += " ORDER BY Liquidacion.NumLote "

                    cursor.execute(consulta, params)
                    resultados = cursor.fetchall()

                    if resultados:
                        self.mostrar_mensaje4(f"¡Éxito! Se encontraron {len(resultados)} registros.", "éxito")
                        self.mostrar_resultados(resultados)
                    else:
                        self.mostrar_mensaje4("No se encontraron registros que coincidan con los criterios de búsqueda.", "advertencia")

        except ValueError as e:
            self.mostrar_mensaje4("Error de entrada: Asegúrate de que los números de lote sean enteros y estén separados por comas.", "error")
        except Exception as ex:
            self.mostrar_mensaje4(f"Error al ejecutar la consulta: {str(ex)}", "error")

    def mostrar_resultados(self, resultados):
        # Guardar la posición actual del scroll
        scroll_position = self.listview_ret.scroll_offset if hasattr(self.listview_ret, 'scroll_offset') else 0
        
        # Limpiar los controles existentes
        self.listview_ret.controls.clear()
        
        # Definir anchos personalizados para cada columna
        column_widths = {
            0: 100,   # fecha de recepcion
            1: 100,    # Lote
            2: 200,    # Nombres Apellidos
            3: 100,    # Peso
            4: 100,    # Peso Seco
            5: 100,    # Ley de Zinc
            6: 100,    # Ley de Plata
            7: 100,    # Ley de plomo
            8: 100,    # Valor Neto
            9: 100,    # Retencon
        }
        
        for resultado in resultados:
            row_data = [
                str(resultado[0]),  # Fecha de recepcion
                str(resultado[1]),  # Lote
                str(resultado[2]),  # Nombres Apellidos
                self._parse_float(resultado[3]),  # Peso
                self._parse_float(resultado[4]),  # Peso Seco
                self._parse_float(resultado[5]),  # Ley Zn
                self._parse_float(resultado[6]),  # Ley Ag
                self._parse_float(resultado[7]),  # Ley Pb
                self._parse_float(resultado[8]),  # Valor Neto
                self._parse_float(resultado[9]),  # Retencion
            ]
            
            row_controls = []
            for i, dato in enumerate(row_data):
                width = column_widths.get(i, 60)
                text_align = ft.TextAlign.RIGHT if isinstance(dato, (int, Decimal)) else ft.TextAlign.LEFT
                
                row_controls.append(
                    ft.Text(
                        str(dato),
                        size=12,
                        width=width,
                        text_align=text_align
                    )
                )
            
            row = ft.Row(controls=row_controls, spacing=18)
            container = ft.Container(
                content=row,
                padding=10,
                border=ft.border.all(1, ft.Colors.TEAL),
                border_radius=5,
            )
            self.listview_ret.controls.append(container)
        
        # Restaurar la posición del scroll
        if scroll_position > 0:
            self.listview_ret.scroll_to(offset=scroll_position, duration=0)
        
        self.page.update()

    def _parse_float(self, value):
        try:
            return Decimal(value) if value not in (None, "") else 0.0
        except (ValueError, TypeError):
            return value

    def set_username(self, username):
        self.username = username

    def crear_reporte_general(self, e):
        # obtener los Valores del try11
        valor=self.combo_retencion_ret.value
        datos = []
        for child in self.listview_container_ret.content.controls:
            if isinstance(child, ft.Container):
                row = child.content
                datos.append([cell.value for cell in row.controls if isinstance(cell, ft.Text)])
        
        if not datos:
            self.mostrar_mensaje4("No hay datos para generar el reporte.", "advertencia")            
            return
        
        try:    
            tabla_config = {
                "columnas": [
                    {"nombre": "Fecha", "ancho": 20, "align": "L"},            
                    {"nombre": "Lote", "ancho": 12, "align": "C"},
                    {"nombre": "Nombres", "ancho": 50, "align": "L"},
                    {"nombre": "T.M.B.", "ancho": 20, "align": "R"},
                    {"nombre": "T.N.S.", "ancho": 20, "align": "R"},
                    {"nombre": "Ley Zn", "ancho": 12, "align": "R"},
                    {"nombre": "Ley Ag", "ancho": 12, "align": "R"},
                    {"nombre": "Ley Pb", "ancho": 12, "align": "R"},
                    {"nombre": "Valor Neto", "ancho": 20, "align": "R"},
                    {"nombre": "Valor Bs", "ancho": 20, "align": "R"}     
                ],
                "filas": datos,
                "totales": {
                    "Peso": "{:.2f}".format(round(sum(float(fila[3]) for fila in datos), 3)),
                    "Kns": "{:,.2f}".format(round(sum(float(fila[4]) for fila in datos), 3)),
                    "Valor Neto": "{:,.2f}".format(round(sum(float(fila[8]) for fila in datos),2)), 
                    "Retenciones": "{:,.2f}".format(round(sum(float(fila[9]) for fila in datos),2)),
                    "Nº de Filas": len(datos)
                }
            }

            # Crear el PDF con header solo en primera página
            class PDFWithFirstPageHeader(FPDF):
                def __init__(self, *args, **kwargs):
                    self.subtitulo_info = kwargs.pop('suptitulo_info', '')  
                    super().__init__(*args, **kwargs)
                    self.first_page = True
                
                def header(self):
                    if self.page_no() == 1 :
                        # Logo o información de la empresa
                        pdf.set_font('Arial', 'B', 7)
                        #pdf.image('logo menu 7.png', 10, 10, 30)
                        self.set_font("Arial", size=10, style="B")
                        self.cell(0, 5, "EMPRESA MINERA VIRGEN DE COTOCA S.R.L", 0, 1, "C")
                        #self.set_font("Arial", size=8, style="B")
                        #self.cell(0, 5, "Mat de Com. N° 362868 NIT: 341040029 NIM: 05-0438-04", 0, 1, "C")
                        self.set_font("Arial", size=12, style="B")
                        self.cell(0, 5, "PAGO DE RETENCIONES", 0, 1, "C")
                        
                        # Subtítulo
                        subtitulo_left = ""
                        if self.subtitulo_info:
                            fecha_inicio_day = int(self.subtitulo_info['fecha_inicio'].split('-')[2])
                            fecha_inicio_month = self.subtitulo_info['fecha_inicio'].split('-')[1]
                            fecha_inicio_year = self.subtitulo_info['fecha_inicio'].split('-')[0]    
                            fecha_fin_day = int(self.subtitulo_info['fecha_fin'].split('-')[2])
                            fecha_fin_month = self.subtitulo_info['fecha_fin'].split('-')[1]

                            if self.subtitulo_info['consulta_tipo'] == "1":
                                if fecha_inicio_month == fecha_fin_month:
                                    month_name = {
                                        '01': 'ENERO', '02': 'FEBRERO', '03': 'MARZO', '04': 'ABRIL',
                                        '05': 'MAYO', '06': 'JUNIO', '07': 'JULIO', '08': 'AGOSTO',
                                        '09': 'SEPTIEMBRE', '10': 'OCTUBRE', '11': 'NOVIEMBRE', '12': 'DICIEMBRE'
                                    }[fecha_inicio_month]

                                    if 1 <= fecha_inicio_day <= 31 and 1 <= fecha_fin_day <= 31:
                                        subtitulo_left += f" CORRESPONDIENTE AL MES DE {month_name} DEL {fecha_inicio_year}"
                                    #elif 16 <= fecha_inicio_day <= 31 and 16 <= fecha_fin_day <= 31:
                                        #subtitulo_left += f" SEGUNDA QUINCENA DE {month_name} DEL {fecha_inicio_year}"
                            
                            elif self.subtitulo_info['consulta_tipo'] == "2":
                                if fecha_inicio_month == fecha_fin_month:
                                    month_name = {
                                        '01': 'ENERO', '02': 'FEBRERO', '03': 'MARZO', '04': 'ABRIL',
                                        '05': 'MAYO', '06': 'JUNIO', '07': 'JULIO', '08': 'AGOSTO',
                                        '09': 'SEPTIEMBRE', '10': 'OCTUBRE', '11': 'NOVIEMBRE', '12': 'DICIEMBRE'
                                    }[fecha_inicio_month]

                                    if 1 <= fecha_inicio_day <= 31 and 1 <= fecha_fin_day <= 31:
                                        subtitulo_left += f" CORRESPONDIENTE AL MES DE {month_name} DEL {fecha_inicio_year}"
                                    #elif 16 <= fecha_inicio_day <= 31 and 16 <= fecha_fin_day <= 31:
                                        #subtitulo_left += f" SEGUNDA QUINCENA DE {month_name} DEL {fecha_inicio_year}"    

                            elif self.subtitulo_info['consulta_tipo'] == "3":
                                if fecha_inicio_month == fecha_fin_month:
                                    month_name = {
                                        '01': 'ENERO', '02': 'FEBRERO', '03': 'MARZO', '04': 'ABRIL',
                                        '05': 'MAYO', '06': 'JUNIO', '07': 'JULIO', '08': 'AGOSTO',
                                        '09': 'SEPTIEMBRE', '10': 'OCTUBRE', '11': 'NOVIEMBRE', '12': 'DICIEMBRE'
                                    }[fecha_inicio_month]

                                    if 1 <= fecha_inicio_day <= 31 and 1 <= fecha_fin_day <= 31:
                                        subtitulo_left += f" CORRESPONDIENTE AL MES DE {month_name} DEL {fecha_inicio_year}"
                                    #elif 16 <= fecha_inicio_day <= 31 and 16 <= fecha_fin_day <= 31:
                                        #subtitulo_left += f" SEGUNDA QUINCENA DE {month_name} DEL {fecha_inicio_year}"    


                            if self.subtitulo_info['denominacion'] != 'TODAS':
                                subtitulo_left += f" - COOPERATIVA MINERA {self.subtitulo_info['denominacion']}"

                        self.set_font("Arial", size=9, style="B")
                        self.cell(0, 5, subtitulo_left, 0, 1, "C")
                        pdf.set_font("Arial", size=8,style="B")
                        pdf.cell(0, 5, txt=valor, ln=1, align="R")
                        #self.set_font("Arial", size=9, style="B")
                        #self.cell(230, 5, "ID:", 0, 0, "R")
                        self.ln(2)  # Espacio después del header
                
                def footer(self):
                    self.set_y(-15)  # Posición a 1.5 cm desde el fondo
                    self.set_font("Arial", size=8)
                    self.cell(0, 10, f"Página {self.page_no()} de {{nb}}", 0, 0, "C")
                
            # Crear instancia del PDF personalizado
            pdf = PDFWithFirstPageHeader(orientation='P', unit='mm', format='Letter')
            pdf.set_auto_page_break(auto=True, margin=15)
            pdf.alias_nb_pages()
            
            # Pasar información para el subtítulo al PDF
            pdf.subtitulo_info = {
                'fecha_inicio': self.entry_fecha_inicio_ret.value if self.entry_fecha_inicio_ret.value else '',
                'fecha_fin': self.entry_fecha_fin_ret.value if self.entry_fecha_fin_ret.value else '',
                'consulta_tipo': self.consulta_tipo_var_ret.value if self.consulta_tipo_var_ret.value else '',
                'denominacion': self.combo_denominacion_ret.value if self.combo_denominacion_ret.value != 'TODAS' else 'TODAS'
            }
            
            pdf.add_page()

            # Tabla
            primera_hoja = True
            while len(tabla_config["filas"]) > 0:
                # Dibujar títulos de columnas en cada hoja
                pdf.set_font("Arial", size=8, style="B")
                for columna in tabla_config["columnas"]:
                    #if columna["nombre"] not in ["Columna 11", "Columna 12", "Columna 13"]:    
                        pdf.cell(columna["ancho"], 7, txt=columna["nombre"], border=1, align="C")
                pdf.ln(8)
                pdf.set_font("Arial", size=8)

                # Dibujar tabla en cada hoja
                if primera_hoja:
                    filas_por_hoja = 32
                else:
                    filas_por_hoja = 35
                for i, fila in enumerate(tabla_config["filas"][:filas_por_hoja]):
                    for j, columna in enumerate(tabla_config["columnas"]):
                        #if j not in [11, 12, 13]:
                            if i % 2 == 0:
                                pdf.set_fill_color(240, 240, 240)  # Color claro
                            else:
                                pdf.set_fill_color(255, 255, 255)  # Color blanco
                            pdf.cell(columna["ancho"], 7, txt=str(fila[j]), border=0, align=columna["align"], fill=True)
                    pdf.ln(7)

                # Eliminar filas procesadas
                del tabla_config["filas"][:filas_por_hoja]

                # Agregar hoja adicional si hay más filas
                if len(tabla_config["filas"]) > 0:
                    pdf.add_page()
                    primera_hoja = False
            
        #totales

            pdf.ln(2)
            pdf.set_font("Arial", size=8,style="B")
            pdf.cell(82, 7, txt="Totales", border=1, align="C", ln=False)
            pdf.cell(20, 7, txt=str(tabla_config["totales"]["Peso"]), border=1, align="R")
            pdf.cell(20, 7, txt=str(tabla_config["totales"]["Kns"]), border=1, align="R")
            pdf.cell(12, 7, txt="", border=1, align="R")
            pdf.cell(12, 7, txt="", border=1, align="R")
            pdf.cell(12, 7, txt="", border=1, align="R")
            pdf.cell(20, 7, txt=str(tabla_config["totales"]["Valor Neto"]), border=1, align="R") 
            pdf.cell(20, 7, txt=str(tabla_config["totales"]["Retenciones"]), border=1, align="R")
            pdf.ln(7)
            pdf.cell(0, 7, txt=f"Nº de Lotes: {tabla_config['totales']['Nº de Filas']}", ln=True, align="L")
                
            pdf.output("Reporte Retenciones.pdf", "F")  
            os.startfile('Reporte Retenciones.pdf')

            self.page.update()
            self.mostrar_mensaje4(f"Reporte Generado correctamente", "éxito")

        except Exception as ex:
            self.mostrar_mensaje4(f"Error al generar el reporte: {str(ex)}", "error")



    def exportar_a_excel(self, e):
        try:
            if not self.listview_container_ret.content.controls:
                self.mostrar_mensaje4("No hay datos para exportar a Excel", "advertencia")
                return

            # Obtener los encabezados de las columnas
            encabezados = [control.value for control in self.column_titles_ret.controls if isinstance(control, ft.Text)]

            # Obtener los datos del ListView con sus tipos correctos
            datos = []
            for child in self.listview_container_ret.content.controls:
                if isinstance(child, ft.Container):
                    row_data = []
                    for cell in child.content.controls:
                        if isinstance(cell, ft.Text):
                            value = cell.value
                            # Intentar convertir a número si es posible
                            try:
                                # Limpiar el valor (quitar comas, puntos, etc.)
                                cleaned_value = str(value).replace(',', '').strip()
                                if cleaned_value.replace('.', '', 1).isdigit():
                                    value = Decimal(cleaned_value)
                            except (ValueError, AttributeError):
                                pass
                            row_data.append(value)
                    datos.append(row_data)

            # Crear libro de Excel
            wb = Workbook()
            ws = wb.active
            ws.title = "Reporte de Compra"

            # Agregar encabezados
            ws.append(encabezados)

            # Agregar datos con tipos correctos
            for fila in datos:
                ws.append(fila)

            # Definir qué columnas son numéricas y su formato
            columnas_numericas = {
                'D': {'nombre': 'T.M.B.', 'formato': '0.000'},
                'E': {'nombre': 'T.N.S.', 'formato': '0.000'},
                'F': {'nombre': 'Ley Zn', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'G': {'nombre': 'Ley Ag', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'H': {'nombre': 'Ley Pb', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'I': {'nombre': 'Valor Neto', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'J': {'nombre': 'Valor Bs.', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
            }

            # Aplicar formatos a las columnas numéricas
            for col_letter, col_info in columnas_numericas.items():
                for cell in ws[col_letter][1:]:  # Excluye el encabezado
                    if isinstance(cell.value, (int, Decimal)):
                        cell.number_format = col_info['formato']

            # Ajustar ancho de columnas automáticamente
            for col in ws.columns:
                max_length = 0
                column = col[0].column_letter
                for cell in col:
                    try:
                        cell_length = len(str(cell.value))
                        if cell_length > max_length:
                            max_length = cell_length
                    except:
                        pass
                adjusted_width = (max_length + 2) * 1.2
                ws.column_dimensions[column].width = adjusted_width

            # Guardar archivo con nombre único
            fecha_actual = datetime.now().strftime("%Y%m%d_%H%M%S")
            nombre_archivo = f"Reporte_Compra_{fecha_actual}.xlsx"
            
            # Crear directorio si no existe
            os.makedirs("reportes_excel", exist_ok=True)
            ruta_completa = os.path.join("reportes_excel", nombre_archivo)
            
            wb.save(ruta_completa)

            # Mostrar mensaje de éxito
            self.mostrar_mensaje4(f"Reporte exportado correctamente a {nombre_archivo}", "éxito")
            
            # Abrir archivo automáticamente
            os.startfile(ruta_completa)

        except Exception as ex:
            self.mostrar_mensaje4(f"Error al exportar a Excel: {str(ex)}", "error")
            import traceback
            traceback.print_exc()

class FrameDiezCuatro(ft.Control):
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.username = None
        self.create_ui_elements()
        self.fill_denominations()

    def mostrar_mensaje4(self, mensaje, tipo="error"):
        # Definir el color de fondo según el tipo de mensaje
        if tipo == "éxito":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.GREEN)
        elif tipo == "advertencia":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.TEAL)
        else:  # Por defecto, es un error
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.RED)
        
        # Crear el contenido del SnackBar
        snack_content = ft.Container(
            content=ft.Text(mensaje, size=18, color=ft.Colors.WHITE),
            bgcolor=color_fondo,
            border_radius=10,
            padding=10,
        )
        
        # Crear el SnackBar
        snack_bar = ft.SnackBar(
            content=snack_content,
            open=True,
            duration=5000,
            bgcolor=ft.Colors.TRANSPARENT,
        )
        
        # Agregar el SnackBar a la página
        self.page.overlay.append(snack_bar)
        self.page.update()

    def create_ui_elements(self):
        # Título
        self.titulo_container_estado = ft.Container(
            content=ft.Text("ESTADO LOTES", size=24, weight="bold", text_align="center", color=ft.Colors.TEAL),
            alignment=ft.alignment.center,
            padding=ft.padding.all(0),
        )

        # Títulos de las columnas
        self.column_titles_estado = ft.Row(
            controls=[
                ft.Text("Fecha Rep.", width=100, weight="bold", size=11, text_align="center"),
                ft.Text("Lote", width=100, weight="bold", size=11, text_align="center"),
                ft.Text("Peso", width=80, weight="bold", size=11, text_align="center"),
                ft.Text("Nombres Apellidos", width=200, weight="bold", size=11, text_align="center"),
                ft.Text("procedencia", width=100, weight="bold", size=11, text_align="center"),
                ft.Text("Ley Zn", width=100, weight="bold", size=11, text_align="right"),
                ft.Text("Ley Ag", width=100, weight="bold", size=11, text_align="right"),
                ft.Text("Ley Pb", width=100, weight="bold", size=11, text_align="right"),
                ft.Text("Fecha Liq", width=100, weight="bold", size=11, text_align="right"),
                ft.Text("Estado", width=100, weight="bold", size=11, text_align="right"),
            ],
            spacing=15,
            expand=True,
        )

        # ListView mejorado con scroll controlado
        self.listview_estado = ft.ListView(
            expand=True,
            spacing=5,
            padding=1,
            auto_scroll=False,  # Desactivamos el auto-scroll
        )

        self.listview_container_estado = ft.Container(
            content=self.listview_estado,
            height=300,
            #border=ft.border.all(1, ft.Colors.GREY_300),
        )

        # Entradas de fecha
        self.entry_fecha_inicio_estado = ft.TextField(
            label="Fecha Inicio (YYYY-MM-DD)",
            value=datetime.today().strftime('%Y-%m-%d'),
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )
        
        self.entry_fecha_fin_estado = ft.TextField(
            label="Fecha Fin (YYYY-MM-DD)",
            value=datetime.today().strftime('%Y-%m-%d'),
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )

        # ComboBox para denominación
        self.combo_denominacion_estado = ft.Dropdown(
            label="Denominacion", 
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE),
            value="TODAS"
        )

        # Entrada para número de lote
        self.entry_num_lote_inicio_estado = ft.TextField(
            label="Número de Lote", 
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )

        # Campo de búsqueda
        self.search_field_estado = ft.TextField(
            label="Buscar por nombre o denominación",
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE),
            on_change=self.buscar_en_tiempo_real
        )

        # Radio buttons para estado
        self.estado_group_estado = ft.RadioGroup(
            content=ft.ResponsiveRow(
                controls=[
                    ft.Column(
                        controls=[ft.Radio(value="Todos", label="Todos")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=10,
                    ),
                    ft.Column(
                        controls=[ft.Radio(value="Liquidado", label="Liquidado")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=10,
                    ),
                    ft.Column(
                        controls=[ft.Radio(value="No Liquidado", label="No LIquidado")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=2,
                    ),
                ],
                spacing=10,
            ),
            on_change=self.ejecutar_consulta1,
            value="Todos"
        )

        # Radio buttons para tipo de consulta
        self.consulta_tipo_var_estado = ft.RadioGroup(
            content=ft.ResponsiveRow(
                controls=[
                    ft.Column(
                        controls=[ft.Radio(value="1", label="Fecha")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=10,
                    ),
                    ft.Column(
                        controls=[ft.Radio(value="2", label="Número de lote")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=10,
                    ),
                    ft.Column(
                        controls=[ft.Radio(value="3", label="Fecha Liq")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=2,
                    ),
                ],
                spacing=10,
            ),
            value="1"
        )

        # Botones
        self.boton_ejecutar_estado = ft.ElevatedButton(
            text="Ejecutar consulta",
            on_click=lambda e: self.ejecutar_consulta1(e),
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_ejecutar
        )
        
        self.boton_exportar_estado = ft.ElevatedButton(
            text="Visualizar",
            on_click=self.crear_reporte_general,
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_exportar
        )
        
        self.boton_exportar_xls_estado = ft.ElevatedButton(
            text="Exportar a XLS",
            on_click=self.exportar_a_excel,
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_exportar_xls
        )

        # Contenedor principal con scroll
        self.scrollable_content = ft.Column(
            controls=[
                self.titulo_container_estado,
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.entry_fecha_inicio_estado], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.entry_fecha_fin_estado], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.combo_denominacion_estado], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.entry_num_lote_inicio_estado], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                    ],
                    spacing=10,
                ),
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.search_field_estado], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.estado_group_estado], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                    ],
                    spacing=10,
                ),
                self.consulta_tipo_var_estado,
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.boton_ejecutar_estado], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                        ft.Column(controls=[self.boton_exportar_estado], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                        ft.Column(controls=[self.boton_exportar_xls_estado], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                    ],
                    spacing=10,
                ),
                self.column_titles_estado,
                self.listview_container_estado,
            ],
            scroll=ft.ScrollMode.AUTO,
            expand=True,
        )

        self.controls = [self.scrollable_content]

    def on_hover_boton_ejecutar(self, e):
        self.boton_ejecutar_estado.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_ejecutar_estado.update()

    def on_hover_boton_exportar(self, e):
        self.boton_exportar_estado.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_exportar_estado.update()

    def on_hover_boton_exportar_xls(self, e):
        self.boton_exportar_xls_estado.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_exportar_xls_estado.update()

    def fill_denominations(self):
        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    cursor.execute("SELECT 'TODAS' AS Denominacion UNION SELECT DISTINCT Denominacion FROM Proveedores ORDER BY Denominacion")
                    denominaciones = cursor.fetchall()
                    self.combo_denominacion_estado.options = [ft.dropdown.Option(denominacion[0]) for denominacion in denominaciones]
        except Exception as ex:
            self.mostrar_mensaje4(f"Error al cargar denominaciones: {str(ex)}", "error")

    def buscar_en_tiempo_real(self, e):
        search_term = self.search_field_estado.value.strip()
        if len(search_term) >= 3 or not search_term:
            self.ejecutar_consulta1(e, search_term)

    def ejecutar_consulta1(self, e, search_term=""):
        denominacion_estado = self.combo_denominacion_estado.value
        try:
            fecha_inicio_estado = self.entry_fecha_inicio_estado.value
            fecha_fin_estado = self.entry_fecha_fin_estado.value
            
            if fecha_inicio_estado:
                datetime.strptime(fecha_inicio_estado, "%Y-%m-%d")
            if fecha_fin_estado:
                datetime.strptime(fecha_fin_estado, "%Y-%m-%d")
        except ValueError:
            self.mostrar_mensaje4("Formato de fecha incorrecto. Use YYYY-MM-DD.", "error")
            return

        consulta_tipo_estado = self.consulta_tipo_var_estado.value
        estado_seleccionado = self.estado_group_estado.value
        num_lote_inicio_estado = self.entry_num_lote_inicio_estado.value
        search_term = self.search_field_estado.value

        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    estado_condition = ""
                    if estado_seleccionado == "Liquidado":
                        estado_condition = "AND Recepcion.Estado = 'Liquidado'"
                    elif estado_seleccionado == "No Liquidado":
                        estado_condition = "AND Recepcion.Estado = 'No Liquidado'"

                    fecha_condition = ""
                    fecha_params = []
                    if fecha_inicio_estado and fecha_fin_estado:
                        fecha_condition = "AND Recepcion.fecha BETWEEN %s AND %s"
                        fecha_params.extend([fecha_inicio_estado, fecha_fin_estado])
                    elif fecha_inicio_estado:
                        fecha_condition = "AND Recepcion.fecha >= %s"
                        fecha_params.append(fecha_inicio_estado)
                    elif fecha_fin_estado:
                        fecha_condition = "AND Recepcion.fecha <= %s"
                        fecha_params.append(fecha_fin_estado)

                    num_lote_condition = ""
                    num_lote_params = []
                    if num_lote_inicio_estado:
                        if consulta_tipo_estado == "2":
                            num_lotes = [x.strip() for x in num_lote_inicio_estado.split(',')]
                            num_lote_condition = f"AND Recepcion.NumLote IN ({','.join(['%s']*len(num_lotes))})"
                            num_lote_params.extend(num_lotes)

                    denominacion_condition = ""
                    denominacion_param = []
                    if denominacion_estado != 'TODAS':
                        denominacion_condition = "AND Clientes.Denominacion = %s"
                        denominacion_param.append(denominacion_estado)

                    search_condition = ""
                    search_params = []
                    if search_term:
                        search_condition = "AND (Recepcion.NombresApellidos LIKE %s OR Recepcion.Denominacion LIKE %s)"
                        search_params.extend(['%' + search_term + '%', '%' + search_term + '%'])

                    consulta = f"""
                        SELECT 
                        Recepcion.fecha, 
                        CONCAT(COALESCE(Liquidacion.NombreInicial, '0-'), 
                            CASE WHEN Liquidacion.NombreInicial IS NOT NULL THEN '-' ELSE '' END, 
                            Recepcion.Numlote) as LoteCompleto,
                        ROUND(Recepcion.Peso, 0) AS Peso, 
                        Recepcion.NombresApellidos, 
                        Recepcion.procedencia, 
                        COALESCE(Liquidacion.leyesZnliq, 0) AS leyesZnliq, 
                        COALESCE(Liquidacion.leyesAgliq, 0) AS leyesAgliq, 
                        COALESCE(Liquidacion.leyespbliq, 0) AS leyespbliq,
                        CASE 
                            WHEN Liquidacion.fechaliq IS NULL THEN 'No Liquidado'
                            ELSE Liquidacion.fechaliq 
                        END AS fechaliq, 
                        Recepcion.estado 
                    FROM 
                        Recepcion
                    LEFT JOIN 
                        Liquidacion ON Recepcion.NumLote = Liquidacion.NumLote 
                    INNER JOIN 
                        Clientes ON Clientes.Denominacion = Recepcion.Denominacion 
                    INNER JOIN 
                        Proveedores ON Proveedores.NombresApellidos = Recepcion.NombresApellidos
                    LEFT JOIN
                        Inicial ON Inicial.NombreInicial = Liquidacion.NombreInicial
                    WHERE 
                        Recepcion.NumLote > 0  -- Excluir lote 0
                        {denominacion_condition}
                        {num_lote_condition}
                        {estado_condition}
                        {fecha_condition}
                        {search_condition}
                    ORDER BY 
                    Recepcion.NumLote
                """    

                    params = []
                    params.extend(denominacion_param)
                    params.extend(num_lote_params)
                    params.extend(fecha_params)
                    params.extend(search_params)

                    cursor.execute(consulta, params)
                    resultados = cursor.fetchall()

                    if resultados:
                        self.mostrar_mensaje4(f"¡Éxito! Se encontraron {len(resultados)} registros.", "éxito")
                        self.mostrar_resultados(resultados)
                    else:
                        self.mostrar_mensaje4("No se encontraron registros que coincidan con los criterios de búsqueda.", "advertencia")
                        self.listview_estado.controls.clear()
        except ValueError as e:
            self.mostrar_mensaje4("Error de entrada: Asegúrate de que los números de lote sean válidos.", "error")
        except Exception as ex:
            self.mostrar_mensaje4(f"Error al ejecutar la consulta: {str(ex)}", "error")
            print(f'Error inesperado: {ex}')


    def mostrar_resultados(self, resultados):
        # Guardar la posición actual del scroll
        scroll_position = self.listview_estado.scroll_offset if hasattr(self.listview_estado, 'scroll_offset') else 0
        
        # Limpiar los controles existentes
        self.listview_estado.controls.clear()
        
        # Definir anchos personalizados para cada columna
        column_widths = {
            0: 100,   # fecha de recepcion
            1: 80,    # Lote
            2: 100,    # peso
            3: 200,    # Nombres Apellidos
            4: 100,    # procedencia
            5: 100,    # Ley de Zinc
            6: 100,    # Ley de Plata
            7: 100,    # Ley de plomo
            8: 100,    # fecha de liq
            9: 100,    # Estado
        }
        
        for resultado in resultados:
            row_data = [
                str(resultado[0]),  # Fecha de recepcion
                str(resultado[1]),  # Lote
                self._parse_float(resultado[2]),  # Peso
                str(resultado[3]),  # Nombres
                str(resultado[4]),  # Procedencia
                self._parse_float(resultado[5]),  # Ley Zn
                self._parse_float(resultado[6]),  # Ley Ag
                self._parse_float(resultado[7]),  # Ley Pb
                str(resultado[8]),  # Fecha Liq
                str(resultado[9]),  # Estado
            ]
            
            row_controls = []
            for i, dato in enumerate(row_data):
                width = column_widths.get(i, 60)
                text_align = ft.TextAlign.CENTER if isinstance(dato, (int, Decimal)) else ft.TextAlign.LEFT
                
                row_controls.append(
                    ft.Text(
                        str(dato),
                        size=12,
                        width=width,
                        text_align=text_align
                    )
                )
            
            row = ft.Row(controls=row_controls, spacing=18)
            container = ft.Container(
                content=row,
                padding=10,
                border=ft.border.all(1, ft.Colors.TEAL),
                border_radius=5,
            )
            self.listview_estado.controls.append(container)
        
        # Restaurar la posición del scroll
        if scroll_position > 0:
            self.listview_estado.scroll_to(offset=scroll_position, duration=0)
        
        self.page.update()

    def _parse_float(self, value):
        try:
            return Decimal(value) if value not in (None, "") else 0.0
        except (ValueError, TypeError):
            return value

    def set_username(self, username):
        self.username = username

    def crear_reporte_general(self, e):
        # Obtener los datos de la lista visualizada
        datos = []
        for child in self.listview_container_estado.content.controls:
            if isinstance(child, ft.Container):
                row = child.content
                datos.append([cell.value for cell in row.controls if isinstance(cell, ft.Text)])
        
        if not datos:
            self.mostrar_mensaje4("No hay datos para generar el reporte.", "advertencia")            
            self.listview_estado.controls.clear()
            return

        # Configuración de la tabla
        tabla_config = {
            "columnas": [
                {"nombre": "Fecha", "ancho": 15, "align": "L"},            
                {"nombre": "Lote", "ancho": 10, "align": "C"},
                {"nombre": "Peso", "ancho": 15, "align": "R"},
                {"nombre": "Nombres", "ancho": 45, "align": "L"},           
                {"nombre": "Mina", "ancho": 30, "align": "L"},
                {"nombre": "Ley Zn", "ancho": 15, "align": "R"},
                {"nombre": "Ley Ag", "ancho": 15, "align": "R"},
                {"nombre": "Ley Pb", "ancho": 15, "align": "R"},
                {"nombre": "Fecha Liq", "ancho": 15, "align": "L"},
                {"nombre": "Estado", "ancho": 20, "align": "L"}
            ],
            "filas": datos,
            "totales": {"Nº de Filas": len(datos)}
        }

        class PDFWithHeaderFooter(FPDF):
            def __init__(self, parent, *args, **kwargs):
                super().__init__(*args, **kwargs)
                self.parent = parent

            def header(self):
                if self.page_no() == 1:
                    self.set_font("Arial", size=10, style="B")
                    self.cell(0, 5, "EMPRESA MINERA VIRGEN DE COTOCA S.R.L", 0, 1, "C")
                    self.set_font("Arial", size=12, style="B")
                    self.cell(0, 5, "REPORTE ESTADO DE LOTES", 0, 1, "C")
                    self.ln(0)

                    subtitulo_left = ""
                    estado_seleccionado = self.parent.estado_group_estado.value
                    if estado_seleccionado == "Todos":
                        subtitulo_left = "TODOS"
                    elif estado_seleccionado == "No Liquidado":
                        subtitulo_left = "LOTES NO LIQUIDADOS"
                    elif estado_seleccionado == "Liquidado":
                        subtitulo_left = "LOTES LIQUIDADOS"

                    if self.parent.entry_fecha_inicio_estado.value and self.parent.entry_fecha_fin_estado.value:
                        subtitulo_left += f" - Del {self.parent.entry_fecha_inicio_estado.value} al {self.parent.entry_fecha_fin_estado.value}"

                    if self.parent.entry_num_lote_inicio_estado.value:
                        subtitulo_left += f" - Lote {self.parent.entry_num_lote_inicio_estado.value}"

                    if self.parent.combo_denominacion_estado.value != 'TODOS':
                        subtitulo_left += f" - {self.parent.combo_denominacion_estado.value}"

                    subtitulo = ""
                    consulta_tipo = self.parent.consulta_tipo_var_estado.value
                    if consulta_tipo == "1":
                        subtitulo = "Reporte por Fecha de Recepción"
                    elif consulta_tipo == "2":
                        subtitulo = "Reporte por Número de Lote"
                    elif consulta_tipo == "3":
                        subtitulo = "Reporte por Fecha de Liquidación"

                    self.set_font("Arial", size=8)
                    self.set_xy(15, 20)
                    self.cell(0, 5, subtitulo, 0, 0, 'L')
                    self.set_xy(120, 20)
                    self.cell(0, 5, subtitulo_left, 0, 0, 'L')
                    self.ln(5)

            def footer(self):
                self.set_y(-15)
                self.set_font('Arial', 'I', 6)
                page_num = f'Página {self.page_no()}/{{nb}}'
                self.cell(0, 10, page_num, 0, 0, 'C')
                fecha_gen = datetime.now().strftime("%d/%m/%Y %H:%M")
                self.set_x(10)
                self.cell(0, 10, f"Generado el: {fecha_gen}", 0, 0, 'L')

        pdf = PDFWithHeaderFooter(self, orientation='P', unit='mm', format='Letter')
        pdf.alias_nb_pages()
        pdf.set_auto_page_break(auto=True, margin=15)
        pdf.add_page()

        primera_hoja = True
        while len(tabla_config["filas"]) > 0:
            pdf.set_font("Arial", size=7, style="B")
            for columna in tabla_config["columnas"]:
                pdf.cell(columna["ancho"], 7, txt=columna["nombre"], border=1, align="C")
            pdf.ln(8)
            pdf.set_font("Arial", size=7)

            if primera_hoja:
                filas_por_hoja = 33
            else:
                filas_por_hoja = 36
                
            for i, fila in enumerate(tabla_config["filas"][:filas_por_hoja]):
                for j, columna in enumerate(tabla_config["columnas"]):
                    if i % 2 == 0:
                        pdf.set_fill_color(240, 240, 240)
                    else:
                        pdf.set_fill_color(255, 255, 255)
                    pdf.cell(columna["ancho"], 7, txt=str(fila[j]), border=0, align=columna["align"], fill=True)
                pdf.ln(7)

            del tabla_config["filas"][:filas_por_hoja]

            if len(tabla_config["filas"]) > 0:
                pdf.add_page()
                primera_hoja = False
        
        pdf.ln(2)
        pdf.set_font("Arial", size=7, style="B")
        pdf.ln(7)
        pdf.cell(0, 7, txt=f"Nº de Lotes: {tabla_config['totales']['Nº de Filas']}", ln=True, align="L")

        nombre_archivo = "Reporte_Estado_Lotes.pdf"
        pdf.output(nombre_archivo)
        os.startfile('Reporte_Estado_Lotes.pdf')

        self.page.update()
        self.mostrar_mensaje4(f"Reporte generado exitosamente: {nombre_archivo}", "éxito")
        

    def exportar_a_excel(self, e):
        try:
            if not self.listview_container_estado.content.controls:
                self.mostrar_mensaje4("No hay datos para exportar a Excel", "advertencia")
                return

            # Obtener los encabezados de las columnas
            encabezados = [control.value for control in self.column_titles_estado.controls if isinstance(control, ft.Text)]

            # Obtener los datos del ListView con sus tipos correctos
            datos = []
            for child in self.listview_container_estado.content.controls:
                if isinstance(child, ft.Container):
                    row_data = []
                    for cell in child.content.controls:
                        if isinstance(cell, ft.Text):
                            value = cell.value
                            # Solo convertir a número si no es una columna de texto
                            if cell not in [0, 1, 3, 4, 8, 9]:  # Índices de columnas de texto
                                try:
                                    cleaned_value = str(value).replace(',', '').replace(' ', '').strip()
                                    if cleaned_value.replace('.', '', 1).isdigit():
                                        value = float(cleaned_value)
                                except (ValueError, AttributeError):
                                    pass
                            row_data.append(value)
                    datos.append(row_data)

            # Crear libro de Excel
            wb = Workbook()
            ws = wb.active
            ws.title = "Reporte de Compra"

            # Agregar encabezados
            ws.append(encabezados)

            # Agregar datos
            for fila in datos:
                ws.append(fila)

            # Definir formatos de columnas
            columnas_config = {
                'A': {'tipo': 'texto'},      # Fecha Rep.
                'B': {'tipo': 'texto'},      # Lote
                'C': {'tipo': 'numero', 'formato': '0.000'},  # Peso
                'D': {'tipo': 'texto'},      # Nombres Apellidos
                'E': {'tipo': 'texto'},      # Procedencia
                'F': {'tipo': 'numero', 'formato': '#,##0.00'},   # Ley Zn
                'G': {'tipo': 'numero', 'formato': '#,##0.00'},   # Ley Ag
                'H': {'tipo': 'numero', 'formato': '#,##0.00'},   # Ley Pb
                'I': {'tipo': 'texto'},      # Fecha de Liq
                'J': {'tipo': 'texto'}       # Estado
            }

            # Aplicar formatos
            for col_letter, config in columnas_config.items():
                if config['tipo'] == 'numero':
                    for cell in ws[col_letter][1:]:  # Excluye el encabezado
                        if isinstance(cell.value, (int, float, Decimal)):
                            cell.number_format = config['formato']

            # Ajustar ancho de columnas
            for col in ws.columns:
                max_length = 0
                column = col[0].column_letter
                for cell in col:
                    try:
                        cell_length = len(str(cell.value))
                        if cell_length > max_length:
                            max_length = cell_length
                    except:
                        pass
                adjusted_width = (max_length + 2)
                if column in ['D']:  # Ajuste especial para columna de nombres
                    adjusted_width = min(adjusted_width, 50)  # Máximo 50 caracteres
                ws.column_dimensions[column].width = adjusted_width

            # Estilo para encabezados
            for cell in ws[1]:
                cell.font = Font(bold=True)
                #cell.alignment = Alignment(horizontal='center')

            # Guardar archivo
            fecha_actual = datetime.now().strftime("%Y%m%d_%H%M%S")
            nombre_archivo = f"Reporte_Compra_{fecha_actual}.xlsx"
            os.makedirs("reportes_excel", exist_ok=True)
            ruta_completa = os.path.join("reportes_excel", nombre_archivo)
            wb.save(ruta_completa)

            self.mostrar_mensaje4(f"Reporte exportado correctamente a {nombre_archivo}", "éxito")
            os.startfile(ruta_completa)

        except Exception as ex:
            self.mostrar_mensaje4(f"Error al exportar a Excel: {str(ex)}", "error")

        except Exception as ex:
            self.mostrar_mensaje4(f"Error al exportar a Excel: {str(ex)}", "error")
            import traceback
            traceback.print_exc()
                

class FrameDiezCinco(ft.Control):
    def __init__(self, page, username = None):
        super().__init__()
        self.page = page
        self.username = username
        self.create_ui_elements()
        self.fill_denominations()

    def mostrar_mensaje4(self, mensaje, tipo="error"):
        """
        Muestra un mensaje en un SnackBar.
        
        Parámetros:
            mensaje (str): El mensaje a mostrar.
            tipo (str): Tipo de mensaje ("éxito", "error" o "advertencia").
        """
        # Definir el color de fondo según el tipo de mensaje
        if tipo == "éxito":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.GREEN)  # 70% de opacidad
        elif tipo == "advertencia":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.TEAL)   # 70% de opacidad
        else:  # Por defecto, es un error
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.RED)    # 70% de opacidad
        
        # Crear el contenido del SnackBar con bordes redondeados y transparencia
        snack_content = ft.Container(
            content=ft.Text(mensaje, size=18, color=ft.Colors.WHITE),  # Texto del mensaje en blanco
            bgcolor=color_fondo,                              # Color de fondo con transparencia
            border_radius=10,                                 # Bordes redondeados de 10
            padding=10,                                       # Espaciado interno
        )
        
        # Crear el SnackBar
        snack_bar = ft.SnackBar(
            content=snack_content,  # Usar el contenedor con bordes redondeados y transparencia
            open=True,              # Abrir automáticamente
            duration=5000,          # Duración de 5 segundos
            bgcolor=ft.Colors.TRANSPARENT,  # Fondo transparente para el SnackBar
        )
        
        # Agregar el SnackBar a la página y actualizar la UI
        self.page.overlay.append(snack_bar)
        self.page.update()

    def create_ui_elements(self):
        # Título
        self.titulo_container = Container(
            content=Text("REPORTE COMPRA DE MINERALES POR CONJUNTO", size=24, weight="bold", text_align="center", color=Colors.TEAL),
            alignment=alignment.center,
            padding=padding.all(0),
        )

        # Títulos de las columnas
        self.column_titles = ft.Row(
            controls=[
                ft.Text("Lote", width=50, weight="bold", size=10),
                ft.Text("Fecha Rep", width=70, weight="bold", size=10),
                ft.Text("Fecha Liq", width=70, weight="bold", size=10),
                ft.Text("Nombres", width=100, weight="bold", size=10),
                ft.Text("Cooperativa", width=80, weight="bold", size=10),
                ft.Text("Conjunto", width=80, weight="bold", size=10),
                ft.Text("T M B", width=50, weight="bold", size=10),
                ft.Text("T M H", width=50, weight="bold", size=10),
                ft.Text("H2O", width=50, weight="bold", size=10),
                ft.Text("T H 2 O", width=50, weight="bold", size=10),
                ft.Text("T N S", width=50, weight="bold", size=10),
                ft.Text("Zn", width=40, weight="bold", size=10),
                ft.Text("Ag", width=40, weight="bold", size=10),
                ft.Text("Pb", width=40, weight="bold", size=10),
                ft.Text("KF Zn", width=50, weight="bold", size=10),
                ft.Text("KF Ag", width=50, weight="bold", size=10),
                ft.Text("KF Pb", width=50, weight="bold", size=10),
                ft.Text("Precio Sus", width=50, weight="bold", size=10),
                ft.Text("Valor Neto", width=50, weight="bold", size=10),
                ft.Text("Descuentos", width=50, weight="bold", size=10),
                ft.Text("Bono Trans", width=50, weight="bold", size=10),
                ft.Text("Bono Extra", width=40, weight="bold", size=10),
                ft.Text("Pagable", width=60, weight="bold", size=10),
            ],
            spacing=2,
            expand=True,
        )

        # Contenedor para los resultados con Column en lugar de ListView
        self.listview_container = ft.Container(
            content=ft.Column(
                spacing=1,
                scroll=ft.ScrollMode.AUTO,
            ),
            height=300,
            #border=ft.border.all(1, ft.Colors.GREY_300),
        )

        # Entradas de fecha usando TextField
        self.entry_fecha_inicio = ft.TextField(
            label="Fecha Inicio (YYYY-MM-DD)",
            value=datetime.today().strftime('%Y-%m-%d'),
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )
        self.entry_fecha_fin = ft.TextField(
            label="Fecha Fin (YYYY-MM-DD)",
            value=datetime.today().strftime('%Y-%m-%d'),
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )

        # ComboBox para denominación
        self.combo_denominacion = ft.Dropdown(
            label="Conjunto", 
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE),
            value="TODAS"
        )

        # Entrada para número de lote
        self.entry_num_lote_inicio = ft.TextField(
            label="Número de Lote", 
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )

        # Campo de búsqueda en tiempo real
        self.search_field = ft.TextField(
            label="Buscar por nombre o denominación",
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE),
            on_change=self.buscar_en_tiempo_real
        )

        # Checkboxes para incluir/excluir valores cero
        self.valor_cero_var = ft.Checkbox(label="Excluir valor cero", value=False)
        self.valor_cero_var_incluir = ft.Checkbox(label="Incluir solo valor cero", value=False)

        # Radio buttons para tipo de consulta
        self.consulta_tipo_var = ft.RadioGroup(
            content=ft.ResponsiveRow(
                controls=[
                    ft.Column(
                        controls=[ft.Radio(value="1", label="Fecha")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=10,
                    ),
                    ft.Column(
                        controls=[ft.Radio(value="2", label="Número de lote")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=10,
                    ),
                    ft.Column(
                        controls=[ft.Radio(value="3", label="Fecha Liq")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=2,
                    ),
                ],
                spacing=10,
            ),
            value="1"
        )

        # Botones
        self.boton_ejecutar = ft.ElevatedButton(
            text="Ejecutar consulta",
            on_click=lambda e: self.ejecutar_consulta1(e),
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_ejecutar
        )
        self.boton_exportar = ft.ElevatedButton(
            text="Visualizar",
            on_click=self.crear_reporte_general,
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_exportar
        )
        self.boton_exportar_xls = ft.ElevatedButton(
            text="Exportar a XLS",
            on_click=self.exportar_a_excel,
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_exportar_xls
        )

        # Contenedor principal con scroll
        self.scrollable_content = ft.Column(
            controls=[
                self.titulo_container,
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.entry_fecha_inicio], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.entry_fecha_fin], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.combo_denominacion], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.entry_num_lote_inicio], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                    ],
                    spacing=10,
                ),
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.search_field], col={"xs": 12, "sm": 6, "md": 6, "lg": 6}, spacing=10),
                        ft.Column(controls=[self.valor_cero_var], col={"xs": 12, "sm": 6, "md": 3, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.valor_cero_var_incluir], col={"xs": 12, "sm": 6, "md": 3, "lg": 3}, spacing=10),
                    ],
                    spacing=10,
                ),
                self.consulta_tipo_var,
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.boton_ejecutar], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                        ft.Column(controls=[self.boton_exportar], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                        ft.Column(controls=[self.boton_exportar_xls], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                    ],
                    spacing=10,
                ),
                self.column_titles,
                self.listview_container,
            ],
            scroll=ft.ScrollMode.AUTO,
            expand=True,
        )

        self.controls = [self.scrollable_content]

    def on_hover_boton_ejecutar(self, e):
        self.boton_ejecutar.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_ejecutar.update()

    def on_hover_boton_exportar(self, e):
        self.boton_exportar.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_exportar.update()

    def on_hover_boton_exportar_xls(self, e):
        self.boton_exportar_xls.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_exportar_xls.update()

    def fill_denominations(self):
        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    cursor.execute("SELECT 'TODAS' AS NombreConjunto UNION SELECT DISTINCT NombreConjunto FROM Liquidacion ORDER BY NombreConjunto")
                    denominaciones = cursor.fetchall()
                    self.combo_denominacion.options = [ft.dropdown.Option(denominacion[0]) for denominacion in denominaciones]
        except Exception as ex:
            self.mostrar_mensaje4(f"Error al cargar denominaciones: {str(ex)}", "error")

    def buscar_en_tiempo_real(self, e):
        """Realiza la búsqueda en tiempo real mientras se escribe"""
        search_term = self.search_field.value.strip()
        if len(search_term) >= 3 or not search_term:
            self.ejecutar_consulta1(e, search_term)

    def ejecutar_consulta1(self, e, search_term=""):
        denominacion = self.combo_denominacion.value
        try:
            fecha_inicio = datetime.strptime(self.entry_fecha_inicio.value, "%Y-%m-%d").strftime("%Y-%m-%d")
            fecha_fin = datetime.strptime(self.entry_fecha_fin.value, "%Y-%m-%d").strftime("%Y-%m-%d")
        except ValueError:
            self.mostrar_mensaje4("Formato de fecha incorrecto. Use YYYY-MM-DD.", "error")
            return

        consulta_tipo = self.consulta_tipo_var.value
        valor_cero = self.valor_cero_var.value
        num_lote_inicio = self.entry_num_lote_inicio.value

        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    consulta = """
                        SELECT 
                            CONCAT(Liquidacion.NombreInicial, '-', Recepcion.Numlote) as LoteCompleto,
                            Recepcion.Fecha, 
                            Liquidacion.Fechaliq, 
                            Recepcion.NombresApellidos, 
                            Clientes.Denominacion, 
                            Liquidacion.NombreConjunto, 
                            ROUND((Recepcion.Peso)/1000, 3) as Peso, 
                            ROUND((Liquidacion.Knh)/1000, 3) as Knh, 
                            LeyesH2Oliq, 
                            ROUND((Liquidacion.Kh2o)/1000, 3) as Kh2o, 
                            ROUND((Liquidacion.Kns)/1000, 5) as Kns, 
                            leyesZnliq, leyesAgliq, leyespbliq, 
                            ROUND((Liquidacion.KFinosZn)/1000, 3) as FinosZn, 
                            ROUND((Liquidacion.KFinosAg), 3) as FinosAg, 
                            ROUND((Liquidacion.KFinosPb)/1000, 3) as FinosPb, 
                            TPrecioSus, VNetoBs, VTDescuentos, 
                            Liquidacion.bonotransporte, Liquidacion.bonoExtra, 
                            VTLiquidoPagable1
                        FROM Liquidacion 
                        LEFT JOIN Recepcion ON Recepcion.NumLote = Liquidacion.NumLote 
                        LEFT JOIN Proveedores ON Proveedores.NombresApellidos = Recepcion.NombresApellidos 
                        LEFT JOIN Clientes ON Clientes.Denominacion = Recepcion.Denominacion 
                        INNER JOIN Conjunto ON Conjunto.NombreConjunto = Liquidacion.NombreConjunto 
                        INNER JOIN Inicial ON Inicial.NombreInicial = Liquidacion.NombreInicial
                        WHERE 1=1
                    """

                    params = []

                    if denominacion != 'TODAS':
                        consulta += " AND Conjunto.NombreConjunto = %s"
                        params.append(denominacion)
                    
                    if consulta_tipo == "1":
                        consulta += " AND Recepcion.Fecha BETWEEN %s AND %s"
                        params.extend([fecha_inicio, fecha_fin])
                    elif consulta_tipo == "2":
                        num_lotes = [int(x) for x in num_lote_inicio.split(',')]
                        consulta += f" AND Recepcion.NumLote IN ({','.join(['%s']*len(num_lotes))})"
                        params.extend(num_lotes)
                    elif consulta_tipo == "3":
                        consulta += " AND Liquidacion.fechaliq BETWEEN %s AND %s"
                        params.extend([fecha_inicio, fecha_fin])
                    
                    if valor_cero:
                        consulta += " AND TPrecioSus = 0"
                    
                    if search_term:
                        consulta += " AND (Recepcion.NombresApellidos LIKE %s OR Recepcion.Denominacion LIKE %s)"
                        search_param = '%' + search_term + '%'
                        params.extend([search_param, search_param])
                    
                    consulta += " ORDER BY Liquidacion.NumLote"

                    cursor.execute(consulta, params)
                    resultados = cursor.fetchall()

                    if resultados:
                        self.mostrar_mensaje4(f"¡Éxito! Se encontraron {len(resultados)} registros.", "éxito")
                        self.mostrar_resultados(resultados)
                    else:
                        self.mostrar_mensaje4("No se encontraron registros que coincidan con los criterios de búsqueda.", "advertencia")

        except ValueError as e:
            self.mostrar_mensaje4("Error de entrada: Asegúrate de que los números de lote sean enteros y estén separados por comas.", "error")
        except Exception as ex:
            self.mostrar_mensaje4(f"Error al ejecutar la consulta: {str(ex)}", "error")

    def mostrar_resultados(self, resultados):
        # Limpiar los controles existentes
        self.listview_container.content.controls.clear()
        
        # Definir anchos personalizados para cada columna
        column_widths = {
            0: 50,   # LoteCompleto
            1: 70,    # Fecha Recepción
            2: 70,    # Fecha Liquidación
            3: 100,    # NombresApellidos
            4: 80,    # Denominacion
            5: 80,    # NombreConjunto
            6: 50,     # Peso
            7: 50,     # Knh
            8: 50,     # LeyesH2Oliq
            9: 50,     # Kh2o
            10: 50,    # Kns
            11: 40,     # leyesZnliq
            12: 40,     # leyesAgliq
            13: 40,     # leyespbliq
            14: 50,     # KFinosZn
            15: 50,     # KFinosAg
            16: 50,     # KFinosPb
            17: 50,     # TPrecioSus
            18: 50,     # VNetoBs
            19: 50,     # VTDescuentos
            20: 50,    # bonotransporte
            21: 40,     # bonoExtra
            22: 50     # VTLiquidoPagable1
        }
        
        for resultado in resultados:
            row_data = [
                str(resultado[0]),  # LoteCompleto
                str(resultado[1]),  # Fecha Recepción
                str(resultado[2]),  # Fecha Liquidación
                str(resultado[3]),  # NombresApellidos
                str(resultado[4]),  # Denominacion
                str(resultado[5]),  # NombreConjunto
                self._parse_float(resultado[6]),  # Peso
                self._parse_float(resultado[7]),  # Knh
                self._parse_float(resultado[8]),  # LeyesH2Oliq
                self._parse_float(resultado[9]),  # Kh2o
                self._parse_float(resultado[10]), # Kns
                self._parse_float(resultado[11]), # leyesZnliq
                self._parse_float(resultado[12]), # leyesAgliq
                self._parse_float(resultado[13]), # leyespbliq
                self._parse_float(resultado[14]), # KFinosZn
                self._parse_float(resultado[15]), # KFinosAg
                self._parse_float(resultado[16]), # KFinosPb
                self._parse_float(resultado[17]), # TPrecioSus
                self._parse_float(resultado[18]), # VNetoBs
                self._parse_float(resultado[19]), # VTDescuentos
                self._parse_float(resultado[20]), # bonotransporte
                self._parse_float(resultado[21]), # bonoExtra
                self._parse_float(resultado[22])  # VTLiquidoPagable1
            ]
            
            row_controls = []
            for i, dato in enumerate(row_data):
                width = column_widths.get(i, 50)
                text_align = ft.TextAlign.RIGHT if isinstance(dato, (int, Decimal)) else ft.TextAlign.LEFT
                
                row_controls.append(
                    ft.Text(
                        str(dato),
                        size=11,
                        width=width,
                        text_align=text_align
                    )
                )
            
            row = ft.Row(controls=row_controls, spacing=1)
            container = ft.Container(
                content=row,
                padding=1,
                border=ft.border.all(1, ft.Colors.TEAL),
                border_radius=5,
            )
            self.listview_container.content.controls.append(container)
        
        self.page.update()

    def _parse_float(self, value):
        """Convierte valores a float cuando es posible"""
        try:
            return Decimal(value) if value not in (None, "") else 0.0
        except (ValueError, TypeError):
            return value


    def set_username(self, username):
        self.username = username
    
    def crear_reporte_general(self, e):
        datos = []
        for child in self.listview_container.content.controls:
            if isinstance(child, ft.Container):
                row = child.content
                datos.append([cell.value for cell in row.controls if isinstance(cell, ft.Text)])
        
        if not datos:
            self.mostrar_mensaje4("No hay datos para generar el reporte.", "advertencia")            
            return
        

        try:
            total_peso = sum(float(fila[6]) for fila in datos)
            total_knh = sum(float(fila[7]) for fila in datos)
            total_h2o = sum(float(fila[9]) for fila in datos)
            total_kh2o = sum(float(fila[9]) for fila in datos)
            total_kns = sum(float(fila[10]) for fila in datos)
            total_leyes_zn = sum(float(fila[14]) for fila in datos)
            total_leyes_ag = sum(float(fila[15]) for fila in datos)
            total_leyes_pb = sum(float(fila[16]) for fila in datos)
            total_kfinos_zn = sum(float(fila[14]) for fila in datos)
            total_kfinos_ag = sum(float(fila[15]) for fila in datos)
            total_kfinos_pb = sum(float(fila[16]) for fila in datos)
            total_precio_sus = sum(float(fila[17]) for fila in datos)
            total_valor_neto = sum(float(fila[18]) for fila in datos)
            total_descuentos = sum(float(fila[19]) for fila in datos)
            total_bono_trans = sum(float(fila[20]) for fila in datos)
            total_bono_extra = sum(float(fila[21]) for fila in datos)
            total_pagable = sum(float(fila[22]) for fila in datos)

            h2o_percent = (total_h2o / total_knh) * 100 if total_knh != 0 else 0.0
            leyes_zn_percent = (total_leyes_zn / total_kns) * 100 if total_kns != 0 else 0.0
            leyes_ag_percent = (total_leyes_ag / total_kns) * 10 if total_kns != 0 else 0.0
            leyes_pb_percent = (total_leyes_pb / total_kns) * 100 if total_kns != 0 else 0.0

            tabla_config = {
                "columnas": [
                    {"nombre": "Lote", "ancho": 10, "align": "C"},
                    {"nombre": "Fecha", "ancho": 14, "align": "L"},
                    {"nombre": "Fecha Liq", "ancho": 14, "align": "L"},
                    {"nombre": "Nombre.", "ancho": 30, "align": "L"},
                    {"nombre": "Cooperativa.", "ancho": 20, "align": "L"},
                    {"nombre": "Conjunto", "ancho": 20, "align": "R"},
                    {"nombre": "T.M.B.", "ancho": 14, "align": "R"},
                    {"nombre": "T.M.H.", "ancho": 14, "align": "R"},
                    {"nombre": "H2O", "ancho": 10, "align": "R"},
                    {"nombre": "T.H.2.O.", "ancho": 12, "align": "R"},
                    {"nombre": "T.N.S.", "ancho": 14, "align": "R"},
                    {"nombre": "Ley Zn", "ancho": 10, "align": "R"},
                    {"nombre": "Ley Ag", "ancho": 10, "align": "R"},
                    {"nombre": "Ley Pb", "ancho": 10, "align": "R"},
                    {"nombre": "T F Zn", "ancho": 13, "align": "R"},
                    {"nombre": "K F Ag", "ancho": 13, "align": "R"},
                    {"nombre": "T F Pb", "ancho": 13, "align": "R"},
                    {"nombre": "Precio", "ancho": 10, "align": "R"},
                    {"nombre": "Valor Neto", "ancho": 15, "align": "R"},
                    {"nombre": "Dtos", "ancho": 14, "align": "R"},
                    {"nombre": "Bono Trans", "ancho": 14, "align": "R"},
                    {"nombre": "Bono Extra", "ancho": 14, "align": "R"},
                    {"nombre": "Pagable", "ancho": 15, "align": "R"}
                ],
                "filas": datos,
                "totales": {
                    "Peso": "{:.2f}".format(round(total_peso, 3)),
                    "Knh": "{:,.2f}".format(round(total_knh, 3)),
                    "H2O": "{:,.2f}".format(round(h2o_percent, 2)),
                    "Kh2o": "{:,.2f}".format(round(total_kh2o, 3)),
                    "Kns": "{:,.2f}".format(round(total_kns, 3)),
                    "Leyes Zn": "{:,.2f}".format(round(leyes_zn_percent, 2)),
                    "Leyes Ag": "{:,.2f}".format(round(leyes_ag_percent, 2)),
                    "Leyes Pb": "{:,.2f}".format(round(leyes_pb_percent, 2)),
                    "KFinos Zn": "{:,.2f}".format(round(total_kfinos_zn, 2)),
                    "KFinos Ag": "{:,.2f}".format(round(total_kfinos_ag, 2)),
                    "KFinos Pb": "{:,.2f}".format(round(total_kfinos_pb, 2)),
                    "Precio Sus": "{:,.2f}".format(round(total_precio_sus, 2)),
                    "Valor Neto": "{:,.2f}".format(round(total_valor_neto, 2)),
                    "Descuentos": "{:,.2f}".format(round(total_descuentos, 2)),
                    "Bono Trans": "{:,.2f}".format(round(total_bono_trans, 2)),
                    "Bono Extra": "{:,.2f}".format(round(total_bono_extra, 2)),
                    "Pagable": "{:,.2f}".format(round(total_pagable, 2)),
                    "Nº de Filas": len(datos)
                }
            }

            class PDFWithHeaderFooter(FPDF):
                def __init__(self, *args, **kwargs):
                    self.valor_cero_var = kwargs.pop('valor_cero_var', False)
                    self.valor_cero_var_incluir = kwargs.pop('valor_cero_var_incluir', False)
                    self.fecha_inicio = kwargs.pop('fecha_inicio', '')
                    self.fecha_fin = kwargs.pop('fecha_fin', '')
                    self.num_lote_inicio = kwargs.pop('num_lote_inicio', '')
                    self.denominacion = kwargs.pop('denominacion', 'TODAS')
                    self.consulta_tipo = kwargs.pop('consulta_tipo', '1')
                    self.username = kwargs.pop('username', None)
                    super().__init__(*args, **kwargs)

                def header(self):
                    if self.page_no() == 1:
                        self.set_font("Arial", size=11, style="B")
                        self.cell(0, 5, txt="EMPRESA MINERA VIRGEN DE COTOCA S.R.L.", ln=True, align="C")
                        self.cell(0, 5, txt="COMPRA DE MINERALES COMPLEJOS DE ZINC", ln=True, align="C")
                        self.ln(3)
                        
                        self.set_font("Arial", size=8)
                        self.set_x(250)
                        
                        subtitulo_left = ""
                        if self.valor_cero_var:
                            subtitulo_left = "Incluidos Valores Cero" if self.valor_cero_var_incluir else "Excluidos Valores Cero"

                        if self.fecha_inicio and self.fecha_fin:
                            subtitulo_left += f" - Del {self.fecha_inicio} al {self.fecha_fin}"

                        if self.num_lote_inicio:
                            subtitulo_left += f" - Lote {self.num_lote_inicio}"

                        if self.denominacion != 'TODAS':
                            subtitulo_left += f" - {self.denominacion}"
                        
                        self.cell(0, 7, txt=subtitulo_left, ln=0, align="L")
                        
                        subtitulo = ""
                        if self.consulta_tipo == "1":
                            subtitulo = "Reporte por Fecha de Recepcion"
                        elif self.consulta_tipo == "2":
                            subtitulo = "Reporte por Numero de Lote"
                        elif self.consulta_tipo == "3":
                            subtitulo = "Reporte por Fecha de Liquidacion"
                        
                        self.set_x(15)
                        self.cell(0, 7, txt=subtitulo, ln=True, align="L")
                        self.ln(0)

                def footer(self):
                    self.set_y(-15)
                    self.set_font("Arial", size=8)
                    self.cell(0, 10, f"Página {self.page_no()} de {{nb}}", 0, 0, "C")
                    self.set_y(-15)
                    self.set_font("Arial", size=7)
                    self.cell(0, 10, f"Fecha y hora de impresión: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", 0, 0, "L")
                    self.ln(2)
                    if self.username:
                        self.cell(0, 10, txt=f"Usuario: {self.username}", border=0, align='L', ln=1)
        
            pdf = PDFWithHeaderFooter(
                orientation='L', 
                unit='mm', 
                format='legal',
                valor_cero_var=self.valor_cero_var.value,
                valor_cero_var_incluir=self.valor_cero_var_incluir.value,
                fecha_inicio=self.entry_fecha_inicio.value,
                fecha_fin=self.entry_fecha_fin.value,
                num_lote_inicio=self.entry_num_lote_inicio.value,
                denominacion=self.combo_denominacion.value,
                consulta_tipo=self.consulta_tipo_var.value,
                username=self.username
            )
            
            pdf.set_auto_page_break(auto=True, margin=15)
            pdf.alias_nb_pages()
            pdf.add_page()
            
            primera_hoja = True
            while len(tabla_config["filas"]) > 0:
                pdf.set_font("Arial", size=7, style="B")
                for columna in tabla_config["columnas"]:
                    pdf.cell(columna["ancho"], 7, txt=columna["nombre"], border=1, align="C")
                pdf.ln(8)
                pdf.set_font("Arial", size=7)

                filas_por_hoja = 23 if primera_hoja else 26
                for i, fila in enumerate(tabla_config["filas"][:filas_por_hoja]):
                    for j, columna in enumerate(tabla_config["columnas"]):
                        if i % 2 == 0:
                            pdf.set_fill_color(240, 240, 240)
                        else:
                            pdf.set_fill_color(255, 255, 255)
                        pdf.cell(columna["ancho"], 7, txt=str(fila[j]), border=0, align=columna["align"], fill=True)
                    pdf.ln(7)

                del tabla_config["filas"][:filas_por_hoja]

                if len(tabla_config["filas"]) > 0:
                    pdf.add_page()
                    primera_hoja = False

            pdf.ln(2)
            pdf.set_font("Arial", size=7, style="B")
            pdf.cell(108, 7, txt="Totales", border=1, align="C", ln=False)
            pdf.cell(14, 7, txt=str(tabla_config["totales"]["Peso"]), border=1, align="R")
            pdf.cell(14, 7, txt=str(tabla_config["totales"]["Knh"]), border=1, align="R")
            pdf.cell(10, 7, txt=str(tabla_config["totales"]["H2O"]), border=1, align="R")
            pdf.cell(12, 7, txt=str(tabla_config["totales"]["Kh2o"]), border=1, align="R")
            pdf.cell(14, 7, txt=str(tabla_config["totales"]["Kns"]), border=1, align="R")
            pdf.cell(10, 7, txt=str(tabla_config["totales"]["Leyes Zn"]), border=1, align="R")
            pdf.cell(10, 7, txt=str(tabla_config["totales"]["Leyes Ag"]), border=1, align="R")
            pdf.cell(10, 7, txt=str(tabla_config["totales"]["Leyes Pb"]), border=1, align="R")
            pdf.cell(13, 7, txt=str(tabla_config["totales"]["KFinos Zn"]), border=1, align="R")
            pdf.cell(13, 7, txt=str(tabla_config["totales"]["KFinos Ag"]), border=1, align="R")
            pdf.cell(13, 7, txt=str(tabla_config["totales"]["KFinos Pb"]), border=1, align="R")
            pdf.cell(10, 7, txt=str(tabla_config["totales"]["Precio Sus"]), border=1, align="R")
            pdf.cell(15, 7, txt=str(tabla_config["totales"]["Valor Neto"]), border=1, align="R")
            pdf.cell(14, 7, txt=str(tabla_config["totales"]["Descuentos"]), border=1, align="R")
            pdf.cell(14, 7, txt=str(tabla_config["totales"]["Bono Trans"]), border=1, align="R")
            pdf.cell(14, 7, txt=str(tabla_config["totales"]["Bono Extra"]), border=1, align="R")
            pdf.cell(15, 7, txt=str(tabla_config["totales"]["Pagable"]), border=1, align="R")
            pdf.ln(7)
            pdf.cell(0, 7, txt=f"Nº de Lotes: {tabla_config['totales']['Nº de Filas']}", ln=True, align="L")

            pdf.output("Reporte General.pdf", "F")
            os.startfile('Reporte General.pdf')
            self.page.update()
            self.mostrar_mensaje4(f"Reporte Generado correctamente ", "éxito")


        except Exception as ex:
            self.mostrar_mensaje4(f"Error al generar el reporte: {str(ex)}", "error")            

    def exportar_a_excel(self, e):
        try:
            if not self.listview_container.content.controls:
                self.mostrar_mensaje4("No hay datos para exportar a Excel", "advertencia")
                return

            # Obtener los encabezados de las columnas
            encabezados = [control.value for control in self.column_titles.controls if isinstance(control, ft.Text)]

            # Obtener los datos del ListView con sus tipos correctos
            datos = []
            for child in self.listview_container.content.controls:
                if isinstance(child, ft.Container):
                    row_data = []
                    for cell in child.content.controls:
                        if isinstance(cell, ft.Text):
                            value = cell.value
                            # Intentar convertir a número si es posible
                            try:
                                # Limpiar el valor (quitar comas, puntos, etc.)
                                cleaned_value = str(value).replace(',', '').strip()
                                if cleaned_value.replace('.', '', 1).isdigit():
                                    value = float(cleaned_value)
                            except (ValueError, AttributeError):
                                pass
                            row_data.append(value)
                    datos.append(row_data)

            # Crear libro de Excel
            wb = Workbook()
            ws = wb.active
            ws.title = "Reporte de Compra"

            # Agregar encabezados
            ws.append(encabezados)

            # Agregar datos con tipos correctos
            for fila in datos:
                ws.append(fila)

            # Definir qué columnas son numéricas y su formato
            columnas_numericas = {
                'G': {'nombre': 'T.M.B.', 'formato': '0.000'},
                'H': {'nombre': 'T.M.H.', 'formato': '0.000'},
                'I': {'nombre': 'H2O', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'J': {'nombre': 'T.H.2.O.', 'formato': '0.000'},
                'K': {'nombre': 'T.N.S.', 'formato': '0.00000'},
                'L': {'nombre': 'Zn', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'M': {'nombre': 'Ag', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'N': {'nombre': 'Pb', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'O': {'nombre': 'KF Zn', 'formato': '0.000'},
                'P': {'nombre': 'KF Ag', 'formato': '0.000'},
                'Q': {'nombre': 'KF Pb', 'formato': '0.000'},
                'R': {'nombre': 'Precio Sus', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'S': {'nombre': 'Valor Neto', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'T': {'nombre': 'Descuentos', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'U': {'nombre': 'Bono Trans', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'V': {'nombre': 'Bono Extra', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'W': {'nombre': 'Pagable', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2}
            }

            # Aplicar formatos a las columnas numéricas
            for col_letter, col_info in columnas_numericas.items():
                for cell in ws[col_letter][1:]:  # Excluye el encabezado
                    if isinstance(cell.value, (int, float)):
                        cell.number_format = col_info['formato']

            # Ajustar ancho de columnas automáticamente
            for col in ws.columns:
                max_length = 0
                column = col[0].column_letter
                for cell in col:
                    try:
                        cell_length = len(str(cell.value))
                        if cell_length > max_length:
                            max_length = cell_length
                    except:
                        pass
                adjusted_width = (max_length + 2) * 1.2
                ws.column_dimensions[column].width = adjusted_width

            # Guardar archivo con nombre único
            fecha_actual = datetime.now().strftime("%Y%m%d_%H%M%S")
            nombre_archivo = f"Reporte_Compra_{fecha_actual}.xlsx"
            
            # Crear directorio si no existe
            os.makedirs("reportes_excel", exist_ok=True)
            ruta_completa = os.path.join("reportes_excel", nombre_archivo)
            
            wb.save(ruta_completa)

            # Mostrar mensaje de éxito
            self.mostrar_mensaje4(f"Reporte exportado correctamente a {nombre_archivo}", "éxito")
            
            # Abrir archivo automáticamente
            os.startfile(ruta_completa)

        except Exception as ex:
            self.mostrar_mensaje4(f"Error al exportar a Excel: {str(ex)}", "error")
            import traceback
            traceback.print_exc()


class FrameDiezSeis(ft.Control):
    def __init__(self, page, username = None):
        super().__init__()
        self.page = page
        self.username = username
        self.create_ui_elements()
        self.fill_denominations()

    def mostrar_mensaje4(self, mensaje, tipo="error"):
        """
        Muestra un mensaje en un SnackBar.
        
        Parámetros:
            mensaje (str): El mensaje a mostrar.
            tipo (str): Tipo de mensaje ("éxito", "error" o "advertencia").
        """
        # Definir el color de fondo según el tipo de mensaje
        if tipo == "éxito":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.GREEN)  # 70% de opacidad
        elif tipo == "advertencia":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.TEAL)   # 70% de opacidad
        else:  # Por defecto, es un error
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.RED)    # 70% de opacidad
        
        # Crear el contenido del SnackBar con bordes redondeados y transparencia
        snack_content = ft.Container(
            content=ft.Text(mensaje, size=18, color=ft.Colors.WHITE),  # Texto del mensaje en blanco
            bgcolor=color_fondo,                              # Color de fondo con transparencia
            border_radius=10,                                 # Bordes redondeados de 10
            padding=10,                                       # Espaciado interno
        )
        
        # Crear el SnackBar
        snack_bar = ft.SnackBar(
            content=snack_content,  # Usar el contenedor con bordes redondeados y transparencia
            open=True,              # Abrir automáticamente
            duration=5000,          # Duración de 5 segundos
            bgcolor=ft.Colors.TRANSPARENT,  # Fondo transparente para el SnackBar
        )
        
        # Agregar el SnackBar a la página y actualizar la UI
        self.page.overlay.append(snack_bar)
        self.page.update()

    def create_ui_elements(self):
        # Título
        self.titulo_container = Container(
            content=Text("REPORTE COMPRA DE MINERALES POR INICIAL", size=24, weight="bold", text_align="center", color=Colors.TEAL),
            alignment=alignment.center,
            padding=padding.all(0),
        )

        # Títulos de las columnas
        self.column_titles = ft.Row(
            controls=[
                ft.Text("Lote", width=50, weight="bold", size=10),
                ft.Text("Fecha Rep", width=70, weight="bold", size=10),
                ft.Text("Fecha Liq", width=70, weight="bold", size=10),
                ft.Text("Nombres", width=100, weight="bold", size=10),
                ft.Text("Cooperativa", width=80, weight="bold", size=10),
                ft.Text("Conjunto", width=80, weight="bold", size=10),
                ft.Text("T M B", width=50, weight="bold", size=10),
                ft.Text("T M H", width=50, weight="bold", size=10),
                ft.Text("H2O", width=50, weight="bold", size=10),
                ft.Text("T H 2 O", width=50, weight="bold", size=10),
                ft.Text("T N S", width=50, weight="bold", size=10),
                ft.Text("Zn", width=40, weight="bold", size=10),
                ft.Text("Ag", width=40, weight="bold", size=10),
                ft.Text("Pb", width=40, weight="bold", size=10),
                ft.Text("KF Zn", width=50, weight="bold", size=10),
                ft.Text("KF Ag", width=50, weight="bold", size=10),
                ft.Text("KF Pb", width=50, weight="bold", size=10),
                ft.Text("Precio Sus", width=50, weight="bold", size=10),
                ft.Text("Valor Neto", width=50, weight="bold", size=10),
                ft.Text("Descuentos", width=50, weight="bold", size=10),
                ft.Text("Bono Trans", width=50, weight="bold", size=10),
                ft.Text("Bono Extra", width=40, weight="bold", size=10),
                ft.Text("Pagable", width=60, weight="bold", size=10),
            ],
            spacing=2,
            expand=True,
        )

        # Contenedor para los resultados con Column en lugar de ListView
        self.listview_container = ft.Container(
            content=ft.Column(
                spacing=1,
                scroll=ft.ScrollMode.AUTO,
            ),
            height=300,
            #border=ft.border.all(1, ft.Colors.GREY_300),
        )

        # Entradas de fecha usando TextField
        self.entry_fecha_inicio = ft.TextField(
            label="Fecha Inicio (YYYY-MM-DD)",
            value=datetime.today().strftime('%Y-%m-%d'),
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )
        self.entry_fecha_fin = ft.TextField(
            label="Fecha Fin (YYYY-MM-DD)",
            value=datetime.today().strftime('%Y-%m-%d'),
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )

        # ComboBox para denominación
        self.combo_denominacion = ft.Dropdown(
            label="Inicial", 
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE),
            value="TODAS"
        )

        # Entrada para número de lote
        self.entry_num_lote_inicio = ft.TextField(
            label="Número de Lote", 
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE)
        )

        # Campo de búsqueda en tiempo real
        self.search_field = ft.TextField(
            label="Buscar por nombre o denominación",
            width=300,
            border_color="teal", 
            border_radius=10,
            border=ft.border.all(5, ft.Colors.WHITE),
            on_change=self.buscar_en_tiempo_real
        )

        # Checkboxes para incluir/excluir valores cero
        self.valor_cero_var = ft.Checkbox(label="Excluir valor cero", value=False)
        self.valor_cero_var_incluir = ft.Checkbox(label="Incluir solo valor cero", value=False)

        # Radio buttons para tipo de consulta
        self.consulta_tipo_var = ft.RadioGroup(
            content=ft.ResponsiveRow(
                controls=[
                    ft.Column(
                        controls=[ft.Radio(value="1", label="Fecha")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=10,
                    ),
                    ft.Column(
                        controls=[ft.Radio(value="2", label="Número de lote")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=10,
                    ),
                    ft.Column(
                        controls=[ft.Radio(value="3", label="Fecha Liq")],
                        col={"xs": 12, "sm": 4, "md": 4, "lg": 4},
                        spacing=2,
                    ),
                ],
                spacing=10,
            ),
            value="1"
        )

        # Botones
        self.boton_ejecutar = ft.ElevatedButton(
            text="Ejecutar consulta",
            on_click=lambda e: self.ejecutar_consulta1(e),
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_ejecutar
        )
        self.boton_exportar = ft.ElevatedButton(
            text="Visualizar",
            on_click=self.crear_reporte_general,
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_exportar
        )
        self.boton_exportar_xls = ft.ElevatedButton(
            text="Exportar a XLS",
            on_click=self.exportar_a_excel,
            width=150,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE,
            on_hover=self.on_hover_boton_exportar_xls
        )

        # Contenedor principal con scroll
        self.scrollable_content = ft.Column(
            controls=[
                self.titulo_container,
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.entry_fecha_inicio], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.entry_fecha_fin], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.combo_denominacion], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.entry_num_lote_inicio], col={"xs": 12, "sm": 6, "md": 4, "lg": 3}, spacing=10),
                    ],
                    spacing=10,
                ),
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.search_field], col={"xs": 12, "sm": 6, "md": 6, "lg": 6}, spacing=10),
                        ft.Column(controls=[self.valor_cero_var], col={"xs": 12, "sm": 6, "md": 3, "lg": 3}, spacing=10),
                        ft.Column(controls=[self.valor_cero_var_incluir], col={"xs": 12, "sm": 6, "md": 3, "lg": 3}, spacing=10),
                    ],
                    spacing=10,
                ),
                self.consulta_tipo_var,
                ft.ResponsiveRow(
                    controls=[
                        ft.Column(controls=[self.boton_ejecutar], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                        ft.Column(controls=[self.boton_exportar], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                        ft.Column(controls=[self.boton_exportar_xls], col={"xs": 12, "sm": 4, "md": 4, "lg": 4}, spacing=10),
                    ],
                    spacing=10,
                ),
                self.column_titles,
                self.listview_container,
            ],
            scroll=ft.ScrollMode.AUTO,
            expand=True,
        )

        self.controls = [self.scrollable_content]

    def on_hover_boton_ejecutar(self, e):
        self.boton_ejecutar.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_ejecutar.update()

    def on_hover_boton_exportar(self, e):
        self.boton_exportar.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_exportar.update()

    def on_hover_boton_exportar_xls(self, e):
        self.boton_exportar_xls.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_exportar_xls.update()

    def fill_denominations(self):
        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    cursor.execute("SELECT 'TODAS' AS NombreInicial UNION SELECT DISTINCT NombreInicial FROM Liquidacion ORDER BY NombreInicial")
                    denominaciones = cursor.fetchall()
                    self.combo_denominacion.options = [ft.dropdown.Option(denominacion[0]) for denominacion in denominaciones]
        except Exception as ex:
            self.mostrar_mensaje4(f"Error al cargar denominaciones: {str(ex)}", "error")

    def buscar_en_tiempo_real(self, e):
        """Realiza la búsqueda en tiempo real mientras se escribe"""
        search_term = self.search_field.value.strip()
        if len(search_term) >= 3 or not search_term:
            self.ejecutar_consulta1(e, search_term)

    def ejecutar_consulta1(self, e, search_term=""):
        denominacion = self.combo_denominacion.value
        try:
            fecha_inicio = datetime.strptime(self.entry_fecha_inicio.value, "%Y-%m-%d").strftime("%Y-%m-%d")
            fecha_fin = datetime.strptime(self.entry_fecha_fin.value, "%Y-%m-%d").strftime("%Y-%m-%d")
        except ValueError:
            self.mostrar_mensaje4("Formato de fecha incorrecto. Use YYYY-MM-DD.", "error")
            return

        consulta_tipo = self.consulta_tipo_var.value
        valor_cero = self.valor_cero_var.value
        num_lote_inicio = self.entry_num_lote_inicio.value

        try:
            with CConection.ConexionBasedeDatos() as cnx:
                with cnx.cursor() as cursor:
                    consulta = """
                        SELECT 
                            CONCAT(Liquidacion.NombreInicial, '-', Recepcion.Numlote) as LoteCompleto,
                            Recepcion.Fecha, 
                            Liquidacion.Fechaliq, 
                            Recepcion.NombresApellidos, 
                            Clientes.Denominacion, 
                            Liquidacion.NombreConjunto, 
                            ROUND((Recepcion.Peso)/1000, 3) as Peso, 
                            ROUND((Liquidacion.Knh)/1000, 3) as Knh, 
                            LeyesH2Oliq, 
                            ROUND((Liquidacion.Kh2o)/1000, 3) as Kh2o, 
                            ROUND((Liquidacion.Kns)/1000, 5) as Kns, 
                            leyesZnliq, leyesAgliq, leyespbliq, 
                            ROUND((Liquidacion.KFinosZn)/1000, 3) as FinosZn, 
                            ROUND((Liquidacion.KFinosAg), 3) as FinosAg, 
                            ROUND((Liquidacion.KFinosPb)/1000, 3) as FinosPb, 
                            TPrecioSus, VNetoBs, VTDescuentos, 
                            Liquidacion.bonotransporte, Liquidacion.bonoExtra, 
                            VTLiquidoPagable1
                        FROM Liquidacion 
                        LEFT JOIN Recepcion ON Recepcion.NumLote = Liquidacion.NumLote 
                        LEFT JOIN Proveedores ON Proveedores.NombresApellidos = Recepcion.NombresApellidos 
                        LEFT JOIN Clientes ON Clientes.Denominacion = Recepcion.Denominacion 
                        INNER JOIN Conjunto ON Conjunto.NombreConjunto = Liquidacion.NombreConjunto 
                        INNER JOIN Inicial ON Inicial.NombreInicial = Liquidacion.NombreInicial
                        WHERE 1=1
                    """

                    params = []

                    if denominacion != 'TODAS':
                        consulta += " AND Inicial.NombreInicial = %s"
                        params.append(denominacion)
                    
                    if consulta_tipo == "1":
                        consulta += " AND Recepcion.Fecha BETWEEN %s AND %s"
                        params.extend([fecha_inicio, fecha_fin])
                    elif consulta_tipo == "2":
                        num_lotes = [int(x) for x in num_lote_inicio.split(',')]
                        consulta += f" AND Recepcion.NumLote IN ({','.join(['%s']*len(num_lotes))})"
                        params.extend(num_lotes)
                    elif consulta_tipo == "3":
                        consulta += " AND Liquidacion.fechaliq BETWEEN %s AND %s"
                        params.extend([fecha_inicio, fecha_fin])
                    
                    if valor_cero:
                        consulta += " AND TPrecioSus = 0"
                    
                    if search_term:
                        consulta += " AND (Recepcion.NombresApellidos LIKE %s OR Recepcion.Denominacion LIKE %s)"
                        search_param = '%' + search_term + '%'
                        params.extend([search_param, search_param])
                    
                    consulta += " ORDER BY Liquidacion.NumLote"

                    cursor.execute(consulta, params)
                    resultados = cursor.fetchall()

                    if resultados:
                        self.mostrar_mensaje4(f"¡Éxito! Se encontraron {len(resultados)} registros.", "éxito")
                        self.mostrar_resultados(resultados)
                    else:
                        self.mostrar_mensaje4("No se encontraron registros que coincidan con los criterios de búsqueda.", "advertencia")

        except ValueError as e:
            self.mostrar_mensaje4("Error de entrada: Asegúrate de que los números de lote sean enteros y estén separados por comas.", "error")
        except Exception as ex:
            self.mostrar_mensaje4(f"Error al ejecutar la consulta: {str(ex)}", "error")

    def mostrar_resultados(self, resultados):
        # Limpiar los controles existentes
        self.listview_container.content.controls.clear()
        
        # Definir anchos personalizados para cada columna
        column_widths = {
            0: 50,   # LoteCompleto
            1: 70,    # Fecha Recepción
            2: 70,    # Fecha Liquidación
            3: 100,    # NombresApellidos
            4: 80,    # Denominacion
            5: 80,    # NombreConjunto
            6: 50,     # Peso
            7: 50,     # Knh
            8: 50,     # LeyesH2Oliq
            9: 50,     # Kh2o
            10: 50,    # Kns
            11: 40,     # leyesZnliq
            12: 40,     # leyesAgliq
            13: 40,     # leyespbliq
            14: 50,     # KFinosZn
            15: 50,     # KFinosAg
            16: 50,     # KFinosPb
            17: 50,     # TPrecioSus
            18: 50,     # VNetoBs
            19: 50,     # VTDescuentos
            20: 50,    # bonotransporte
            21: 40,     # bonoExtra
            22: 50     # VTLiquidoPagable1
        }
        
        for resultado in resultados:
            row_data = [
                str(resultado[0]),  # LoteCompleto
                str(resultado[1]),  # Fecha Recepción
                str(resultado[2]),  # Fecha Liquidación
                str(resultado[3]),  # NombresApellidos
                str(resultado[4]),  # Denominacion
                str(resultado[5]),  # NombreConjunto
                self._parse_float(resultado[6]),  # Peso
                self._parse_float(resultado[7]),  # Knh
                self._parse_float(resultado[8]),  # LeyesH2Oliq
                self._parse_float(resultado[9]),  # Kh2o
                self._parse_float(resultado[10]), # Kns
                self._parse_float(resultado[11]), # leyesZnliq
                self._parse_float(resultado[12]), # leyesAgliq
                self._parse_float(resultado[13]), # leyespbliq
                self._parse_float(resultado[14]), # KFinosZn
                self._parse_float(resultado[15]), # KFinosAg
                self._parse_float(resultado[16]), # KFinosPb
                self._parse_float(resultado[17]), # TPrecioSus
                self._parse_float(resultado[18]), # VNetoBs
                self._parse_float(resultado[19]), # VTDescuentos
                self._parse_float(resultado[20]), # bonotransporte
                self._parse_float(resultado[21]), # bonoExtra
                self._parse_float(resultado[22])  # VTLiquidoPagable1
            ]
            
            row_controls = []
            for i, dato in enumerate(row_data):
                width = column_widths.get(i, 50)
                text_align = ft.TextAlign.RIGHT if isinstance(dato, (int, Decimal)) else ft.TextAlign.LEFT
                
                row_controls.append(
                    ft.Text(
                        str(dato),
                        size=11,
                        width=width,
                        text_align=text_align
                    )
                )
            
            row = ft.Row(controls=row_controls, spacing=1)
            container = ft.Container(
                content=row,
                padding=1,
                border=ft.border.all(1, ft.Colors.TEAL),
                border_radius=5,
            )
            self.listview_container.content.controls.append(container)
        
        self.page.update()

    def _parse_float(self, value):
        """Convierte valores a float cuando es posible"""
        try:
            return Decimal(value) if value not in (None, "") else 0.0
        except (ValueError, TypeError):
            return value


    def set_username(self, username):
        self.username = username
    
    def crear_reporte_general(self, e):
        datos = []
        for child in self.listview_container.content.controls:
            if isinstance(child, ft.Container):
                row = child.content
                datos.append([cell.value for cell in row.controls if isinstance(cell, ft.Text)])
        
        if not datos:
            self.mostrar_mensaje4("No hay datos para generar el reporte.", "advertencia")            
            return
        

        try:
            total_peso = sum(float(fila[6]) for fila in datos)
            total_knh = sum(float(fila[7]) for fila in datos)
            total_h2o = sum(float(fila[9]) for fila in datos)
            total_kh2o = sum(float(fila[9]) for fila in datos)
            total_kns = sum(float(fila[10]) for fila in datos)
            total_leyes_zn = sum(float(fila[14]) for fila in datos)
            total_leyes_ag = sum(float(fila[15]) for fila in datos)
            total_leyes_pb = sum(float(fila[16]) for fila in datos)
            total_kfinos_zn = sum(float(fila[14]) for fila in datos)
            total_kfinos_ag = sum(float(fila[15]) for fila in datos)
            total_kfinos_pb = sum(float(fila[16]) for fila in datos)
            total_precio_sus = sum(float(fila[17]) for fila in datos)
            total_valor_neto = sum(float(fila[18]) for fila in datos)
            total_descuentos = sum(float(fila[19]) for fila in datos)
            total_bono_trans = sum(float(fila[20]) for fila in datos)
            total_bono_extra = sum(float(fila[21]) for fila in datos)
            total_pagable = sum(float(fila[22]) for fila in datos)

            h2o_percent = (total_h2o / total_knh) * 100 if total_knh != 0 else 0.0
            leyes_zn_percent = (total_leyes_zn / total_kns) * 100 if total_kns != 0 else 0.0
            leyes_ag_percent = (total_leyes_ag / total_kns) * 10 if total_kns != 0 else 0.0
            leyes_pb_percent = (total_leyes_pb / total_kns) * 100 if total_kns != 0 else 0.0

            tabla_config = {
                "columnas": [
                    {"nombre": "Lote", "ancho": 10, "align": "C"},
                    {"nombre": "Fecha", "ancho": 14, "align": "L"},
                    {"nombre": "Fecha Liq", "ancho": 14, "align": "L"},
                    {"nombre": "Nombre.", "ancho": 30, "align": "L"},
                    {"nombre": "Cooperativa.", "ancho": 20, "align": "L"},
                    {"nombre": "Conjunto", "ancho": 20, "align": "R"},
                    {"nombre": "T.M.B.", "ancho": 14, "align": "R"},
                    {"nombre": "T.M.H.", "ancho": 14, "align": "R"},
                    {"nombre": "H2O", "ancho": 10, "align": "R"},
                    {"nombre": "T.H.2.O.", "ancho": 12, "align": "R"},
                    {"nombre": "T.N.S.", "ancho": 14, "align": "R"},
                    {"nombre": "Ley Zn", "ancho": 10, "align": "R"},
                    {"nombre": "Ley Ag", "ancho": 10, "align": "R"},
                    {"nombre": "Ley Pb", "ancho": 10, "align": "R"},
                    {"nombre": "T F Zn", "ancho": 13, "align": "R"},
                    {"nombre": "K F Ag", "ancho": 13, "align": "R"},
                    {"nombre": "T F Pb", "ancho": 13, "align": "R"},
                    {"nombre": "Precio", "ancho": 10, "align": "R"},
                    {"nombre": "Valor Neto", "ancho": 15, "align": "R"},
                    {"nombre": "Dtos", "ancho": 14, "align": "R"},
                    {"nombre": "Bono Trans", "ancho": 14, "align": "R"},
                    {"nombre": "Bono Extra", "ancho": 14, "align": "R"},
                    {"nombre": "Pagable", "ancho": 15, "align": "R"}
                ],
                "filas": datos,
                "totales": {
                    "Peso": "{:.2f}".format(round(total_peso, 3)),
                    "Knh": "{:,.2f}".format(round(total_knh, 3)),
                    "H2O": "{:,.2f}".format(round(h2o_percent, 2)),
                    "Kh2o": "{:,.2f}".format(round(total_kh2o, 3)),
                    "Kns": "{:,.2f}".format(round(total_kns, 3)),
                    "Leyes Zn": "{:,.2f}".format(round(leyes_zn_percent, 2)),
                    "Leyes Ag": "{:,.2f}".format(round(leyes_ag_percent, 2)),
                    "Leyes Pb": "{:,.2f}".format(round(leyes_pb_percent, 2)),
                    "KFinos Zn": "{:,.2f}".format(round(total_kfinos_zn, 2)),
                    "KFinos Ag": "{:,.2f}".format(round(total_kfinos_ag, 2)),
                    "KFinos Pb": "{:,.2f}".format(round(total_kfinos_pb, 2)),
                    "Precio Sus": "{:,.2f}".format(round(total_precio_sus, 2)),
                    "Valor Neto": "{:,.2f}".format(round(total_valor_neto, 2)),
                    "Descuentos": "{:,.2f}".format(round(total_descuentos, 2)),
                    "Bono Trans": "{:,.2f}".format(round(total_bono_trans, 2)),
                    "Bono Extra": "{:,.2f}".format(round(total_bono_extra, 2)),
                    "Pagable": "{:,.2f}".format(round(total_pagable, 2)),
                    "Nº de Filas": len(datos)
                }
            }

            class PDFWithHeaderFooter(FPDF):
                def __init__(self, *args, **kwargs):
                    self.valor_cero_var = kwargs.pop('valor_cero_var', False)
                    self.valor_cero_var_incluir = kwargs.pop('valor_cero_var_incluir', False)
                    self.fecha_inicio = kwargs.pop('fecha_inicio', '')
                    self.fecha_fin = kwargs.pop('fecha_fin', '')
                    self.num_lote_inicio = kwargs.pop('num_lote_inicio', '')
                    self.denominacion = kwargs.pop('denominacion', 'TODAS')
                    self.consulta_tipo = kwargs.pop('consulta_tipo', '1')
                    self.username = kwargs.pop('username', None)
                    super().__init__(*args, **kwargs)

                def header(self):
                    if self.page_no() == 1:
                        self.set_font("Arial", size=11, style="B")
                        self.cell(0, 5, txt="EMPRESA MINERA VIRGEN DE COTOCA S.R.L.", ln=True, align="C")
                        self.cell(0, 5, txt="COMPRA DE MINERALES COMPLEJOS DE ZINC", ln=True, align="C")
                        self.ln(3)
                        
                        self.set_font("Arial", size=8)
                        self.set_x(250)
                        
                        subtitulo_left = ""
                        if self.valor_cero_var:
                            subtitulo_left = "Incluidos Valores Cero" if self.valor_cero_var_incluir else "Excluidos Valores Cero"

                        if self.fecha_inicio and self.fecha_fin:
                            subtitulo_left += f" - Del {self.fecha_inicio} al {self.fecha_fin}"

                        if self.num_lote_inicio:
                            subtitulo_left += f" - Lote {self.num_lote_inicio}"

                        if self.denominacion != 'TODAS':
                            subtitulo_left += f" - {self.denominacion}"
                        
                        self.cell(0, 7, txt=subtitulo_left, ln=0, align="L")
                        
                        subtitulo = ""
                        if self.consulta_tipo == "1":
                            subtitulo = "Reporte por Fecha de Recepcion"
                        elif self.consulta_tipo == "2":
                            subtitulo = "Reporte por Numero de Lote"
                        elif self.consulta_tipo == "3":
                            subtitulo = "Reporte por Fecha de Liquidacion"
                        
                        self.set_x(15)
                        self.cell(0, 7, txt=subtitulo, ln=True, align="L")
                        self.ln(0)

                def footer(self):
                    self.set_y(-15)
                    self.set_font("Arial", size=8)
                    self.cell(0, 10, f"Página {self.page_no()} de {{nb}}", 0, 0, "C")
                    self.set_y(-15)
                    self.set_font("Arial", size=7)
                    self.cell(0, 10, f"Fecha y hora de impresión: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", 0, 0, "L")
                    self.ln(2)
                    if self.username:
                        self.cell(0, 10, txt=f"Usuario: {self.username}", border=0, align='L', ln=1)
        
            pdf = PDFWithHeaderFooter(
                orientation='L', 
                unit='mm', 
                format='legal',
                valor_cero_var=self.valor_cero_var.value,
                valor_cero_var_incluir=self.valor_cero_var_incluir.value,
                fecha_inicio=self.entry_fecha_inicio.value,
                fecha_fin=self.entry_fecha_fin.value,
                num_lote_inicio=self.entry_num_lote_inicio.value,
                denominacion=self.combo_denominacion.value,
                consulta_tipo=self.consulta_tipo_var.value,
                username=self.username
            )
            
            pdf.set_auto_page_break(auto=True, margin=15)
            pdf.alias_nb_pages()
            pdf.add_page()
            
            primera_hoja = True
            while len(tabla_config["filas"]) > 0:
                pdf.set_font("Arial", size=7, style="B")
                for columna in tabla_config["columnas"]:
                    pdf.cell(columna["ancho"], 7, txt=columna["nombre"], border=1, align="C")
                pdf.ln(8)
                pdf.set_font("Arial", size=7)

                filas_por_hoja = 23 if primera_hoja else 26
                for i, fila in enumerate(tabla_config["filas"][:filas_por_hoja]):
                    for j, columna in enumerate(tabla_config["columnas"]):
                        if i % 2 == 0:
                            pdf.set_fill_color(240, 240, 240)
                        else:
                            pdf.set_fill_color(255, 255, 255)
                        pdf.cell(columna["ancho"], 7, txt=str(fila[j]), border=0, align=columna["align"], fill=True)
                    pdf.ln(7)

                del tabla_config["filas"][:filas_por_hoja]

                if len(tabla_config["filas"]) > 0:
                    pdf.add_page()
                    primera_hoja = False

            pdf.ln(2)
            pdf.set_font("Arial", size=7, style="B")
            pdf.cell(108, 7, txt="Totales", border=1, align="C", ln=False)
            pdf.cell(14, 7, txt=str(tabla_config["totales"]["Peso"]), border=1, align="R")
            pdf.cell(14, 7, txt=str(tabla_config["totales"]["Knh"]), border=1, align="R")
            pdf.cell(10, 7, txt=str(tabla_config["totales"]["H2O"]), border=1, align="R")
            pdf.cell(12, 7, txt=str(tabla_config["totales"]["Kh2o"]), border=1, align="R")
            pdf.cell(14, 7, txt=str(tabla_config["totales"]["Kns"]), border=1, align="R")
            pdf.cell(10, 7, txt=str(tabla_config["totales"]["Leyes Zn"]), border=1, align="R")
            pdf.cell(10, 7, txt=str(tabla_config["totales"]["Leyes Ag"]), border=1, align="R")
            pdf.cell(10, 7, txt=str(tabla_config["totales"]["Leyes Pb"]), border=1, align="R")
            pdf.cell(13, 7, txt=str(tabla_config["totales"]["KFinos Zn"]), border=1, align="R")
            pdf.cell(13, 7, txt=str(tabla_config["totales"]["KFinos Ag"]), border=1, align="R")
            pdf.cell(13, 7, txt=str(tabla_config["totales"]["KFinos Pb"]), border=1, align="R")
            pdf.cell(10, 7, txt=str(tabla_config["totales"]["Precio Sus"]), border=1, align="R")
            pdf.cell(15, 7, txt=str(tabla_config["totales"]["Valor Neto"]), border=1, align="R")
            pdf.cell(14, 7, txt=str(tabla_config["totales"]["Descuentos"]), border=1, align="R")
            pdf.cell(14, 7, txt=str(tabla_config["totales"]["Bono Trans"]), border=1, align="R")
            pdf.cell(14, 7, txt=str(tabla_config["totales"]["Bono Extra"]), border=1, align="R")
            pdf.cell(15, 7, txt=str(tabla_config["totales"]["Pagable"]), border=1, align="R")
            pdf.ln(7)
            pdf.cell(0, 7, txt=f"Nº de Lotes: {tabla_config['totales']['Nº de Filas']}", ln=True, align="L")

            pdf.output("Reporte General.pdf", "F")
            os.startfile('Reporte General.pdf')
            self.page.update()
            self.mostrar_mensaje4(f"Reporte Generado correctamente ", "éxito")


        except Exception as ex:
            self.mostrar_mensaje4(f"Error al generar el reporte: {str(ex)}", "error")            

    def exportar_a_excel(self, e):
        try:
            if not self.listview_container.content.controls:
                self.mostrar_mensaje4("No hay datos para exportar a Excel", "advertencia")
                return

            # Obtener los encabezados de las columnas
            encabezados = [control.value for control in self.column_titles.controls if isinstance(control, ft.Text)]

            # Obtener los datos del ListView con sus tipos correctos
            datos = []
            for child in self.listview_container.content.controls:
                if isinstance(child, ft.Container):
                    row_data = []
                    for cell in child.content.controls:
                        if isinstance(cell, ft.Text):
                            value = cell.value
                            # Intentar convertir a número si es posible
                            try:
                                # Limpiar el valor (quitar comas, puntos, etc.)
                                cleaned_value = str(value).replace(',', '').strip()
                                if cleaned_value.replace('.', '', 1).isdigit():
                                    value = float(cleaned_value)
                            except (ValueError, AttributeError):
                                pass
                            row_data.append(value)
                    datos.append(row_data)

            # Crear libro de Excel
            wb = Workbook()
            ws = wb.active
            ws.title = "Reporte de Compra"

            # Agregar encabezados
            ws.append(encabezados)

            # Agregar datos con tipos correctos
            for fila in datos:
                ws.append(fila)

            # Definir qué columnas son numéricas y su formato
            columnas_numericas = {
                'G': {'nombre': 'T.M.B.', 'formato': '0.000'},
                'H': {'nombre': 'T.M.H.', 'formato': '0.000'},
                'I': {'nombre': 'H2O', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'J': {'nombre': 'T.H.2.O.', 'formato': '0.000'},
                'K': {'nombre': 'T.N.S.', 'formato': '0.00000'},
                'L': {'nombre': 'Zn', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'M': {'nombre': 'Ag', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'N': {'nombre': 'Pb', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'O': {'nombre': 'KF Zn', 'formato': '0.000'},
                'P': {'nombre': 'KF Ag', 'formato': '0.000'},
                'Q': {'nombre': 'KF Pb', 'formato': '0.000'},
                'R': {'nombre': 'Precio Sus', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'S': {'nombre': 'Valor Neto', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'T': {'nombre': 'Descuentos', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'U': {'nombre': 'Bono Trans', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'V': {'nombre': 'Bono Extra', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2},
                'W': {'nombre': 'Pagable', 'formato': numbers.FORMAT_NUMBER_COMMA_SEPARATED2}
            }

            # Aplicar formatos a las columnas numéricas
            for col_letter, col_info in columnas_numericas.items():
                for cell in ws[col_letter][1:]:  # Excluye el encabezado
                    if isinstance(cell.value, (int, float)):
                        cell.number_format = col_info['formato']

            # Ajustar ancho de columnas automáticamente
            for col in ws.columns:
                max_length = 0
                column = col[0].column_letter
                for cell in col:
                    try:
                        cell_length = len(str(cell.value))
                        if cell_length > max_length:
                            max_length = cell_length
                    except:
                        pass
                adjusted_width = (max_length + 2) * 1.2
                ws.column_dimensions[column].width = adjusted_width

            # Guardar archivo con nombre único
            fecha_actual = datetime.now().strftime("%Y%m%d_%H%M%S")
            nombre_archivo = f"Reporte_Compra_{fecha_actual}.xlsx"
            
            # Crear directorio si no existe
            os.makedirs("reportes_excel", exist_ok=True)
            ruta_completa = os.path.join("reportes_excel", nombre_archivo)
            
            wb.save(ruta_completa)

            # Mostrar mensaje de éxito
            self.mostrar_mensaje4(f"Reporte exportado correctamente a {nombre_archivo}", "éxito")
            
            # Abrir archivo automáticamente
            os.startfile(ruta_completa)

        except Exception as ex:
            self.mostrar_mensaje4(f"Error al exportar a Excel: {str(ex)}", "error")
            import traceback
            traceback.print_exc()

class FrameDiezSiete(ft.Control):
    
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.controls = []  # Inicializa el atributo controls como una lista vacía
        self.create_ui_elements_diez_siete()  # Llama a un método para crear los elementos de la interfaz

    def create_ui_elements_diez_siete(self):
        # Agrega widgets a la lista controls
        self.controls.append(
            ft.Text("Este es el Frame diez siete", size=20, color=ft.Colors.BLACK)
        )
        self.controls.append(
            ft.ElevatedButton("Botón en Frame diez siete", on_click=self.on_button_click)
        )

    def on_button_click(self, e):
        print("Botón en Frame Ocho Dos clickeado")

class FrameDiezOcho(ft.Control):
    
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.controls = []  # Inicializa el atributo controls como una lista vacía
        self.create_ui_elements_diez_ocho()  # Llama a un método para crear los elementos de la interfaz

    def create_ui_elements_diez_ocho(self):
        # Agrega widgets a la lista controls
        self.controls.append(
            ft.Text("Este es el Frame diez Ocho", size=20, color=ft.Colors.BLACK)
        )
        self.controls.append(
            ft.ElevatedButton("Botón en Frame diez ocho", on_click=self.on_button_click)
        )

    def on_button_click(self, e):
        print("Botón en Frame Ocho Dos clickeado")



class FrameOnce(ft.Control):
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.controls = []
        self.base_size = 13  # Tamaño más pequeño para palabra larga
        self.size = self.base_size
        self.gap = 1.5
        self.duration = 2000
        self.running = True
        
        # Colores para cada letra (15 colores distintos)
        self.colors = [
            ft.Colors.RED_500,        # C
            ft.Colors.ORANGE_500,     # O
            ft.Colors.YELLOW_500,     # N
            ft.Colors.GREEN_500,      # F
            ft.Colors.TEAL_500,       # I
            ft.Colors.CYAN_500,       # G
            ft.Colors.BLUE_500,       # U
            ft.Colors.INDIGO_500,     # R
            ft.Colors.PURPLE_500,     # A
            ft.Colors.PINK_500,       # C
            ft.Colors.AMBER_500,      # I
            ft.Colors.LIGHT_BLUE_500, # O
            ft.Colors.LIME_500,       # N
            ft.Colors.BROWN_500,      # E
            ft.Colors.DEEP_ORANGE_500 # S
        ]
        
        # Definición de letras (fila, columna, índice_color)
        self.parts = [
            # C (3x5)
            (0,0,0), (0,1,0), (0,2,0), (1,0,0), (2,0,0), (3,0,0), (4,0,0), (4,1,0), (4,2,0),
            # O (3x5)
            (0,4,1), (0,5,1), (0,6,1), (1,4,1), (1,6,1), (2,4,1), (2,6,1), (3,4,1), (3,6,1), (4,4,1), (4,5,1), (4,6,1),
            # N (3x5)
            (0,8,2), (0,10,2), (1,8,2), (1,9,2), (1,10,2), (2,8,2), (2,9,2), (2,10,2), (3,8,2), (3,9,2), (3,10,2), (4,8,2), (4,10,2),
            # F (3x5)
            (0,12,3), (0,13,3), (0,14,3), (1,12,3), (2,12,3), (2,13,3), (3,12,3), (4,12,3),
            # I (3x5)
            (0,16,4), (0,17,4), (0,18,4), (1,17,4), (2,17,4), (3,17,4), (4,16,4), (4,17,4), (4,18,4),
            # G (3x5)
            (0,20,5), (0,21,5), (0,22,5), (1,20,5), (2,20,5), (2,21,5), (2,22,5), (3,20,5), (3,22,5), (4,20,5), (4,21,5), (4,22,5),
            # U (3x5)
            (0,24,6), (0,26,6), (1,24,6), (1,26,6), (2,24,6), (2,26,6), (3,24,6), (3,26,6), (4,24,6), (4,25,6), (4,26,6),
            # R (3x5)
            (0,28,7), (0,29,7), (0,30,7), (1,28,7), (1,30,7), (2,28,7), (2,29,7), (2,30,7), (3,28,7), (3,29,7), (4,28,7), (4,30,7),
            # A (3x5)
            (0,32,8), (0,33,8), (0,34,8), (1,32,8), (1,34,8), (2,32,8), (2,33,8), (2,34,8), (3,32,8), (3,34,8), (4,32,8), (4,34,8),
            # C (3x5)
            (0,36,9), (0,37,9), (0,38,9), (1,36,9), (2,36,9), (3,36,9), (4,36,9), (4,37,9), (4,38,9),
            # I (3x5)
            (0,40,10), (0,41,10), (0,42,10), (1,41,10), (2,41,10), (3,41,10), (4,40,10), (4,41,10), (4,42,10),
            # O (3x5)
            (0,44,11), (0,45,11), (0,46,11), (1,44,11), (1,46,11), (2,44,11), (2,46,11), (3,44,11), (3,46,11), (4,44,11), (4,45,11), (4,46,11),
            # N (3x5)
            (0,48,12), (0,50,12), (1,48,12), (1,49,12), (1,50,12), (2,48,12), (2,49,12), (2,50,12), (3,48,12), (3,49,12), (3,50,12), (4,48,12), (4,50,12),
            # E (3x5)
            (0,52,13), (0,53,13), (0,54,13), (1,52,13), (2,52,13), (2,53,13), (3,52,13), (4,52,13), (4,53,13), (4,54,13),
            # S (3x5)
            (0,56,14), (0,57,14), (0,58,14), (1,56,14), (2,56,14), (2,57,14), (3,58,14), (4,56,14), (4,57,14), (4,58,14)
        ]

        # Crear Stack principal
        self.canvas = ft.Stack(expand=True)
        
        # Crear bloques
        for _ in range(len(self.parts)):
            self.canvas.controls.append(
                ft.Container(
                    animate=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
                    animate_position=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
                    animate_rotation=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
                    animate_scale=ft.animation.Animation(self.duration, ft.AnimationCurve.EASE_IN_OUT),
                )
            )
        
        self.main_container = ft.Container(self.canvas, expand=True)
        self.controls.append(self.main_container)
        self.assemble()
        
        # Eventos
        self.page.on_resize = self.on_page_resize
        self.animation_thread = threading.Thread(target=self.auto_animate, daemon=True)
        self.animation_thread.start()
    
    def on_page_resize(self, e):
        """Ajuste responsivo mejorado"""
        if self.page.width < 500:
            self.size = self.base_size * 0.5
            self.gap = 0.8
        elif self.page.width < 800:
            self.size = self.base_size * 0.7
            self.gap = 1
        else:
            self.size = self.base_size
            self.gap = 1.5
        self.assemble()
    
    def auto_animate(self):
        while self.running:
            time.sleep(5)
            if not self.running: break
            self.randomize(None)
            time.sleep(5)
            if not self.running: break
            self.assemble(None)
    
    def randomize(self, e):
        random.seed()
        for i in range(len(self.parts)):
            c = self.canvas.controls[i]
            c.left = random.randrange(0, int(self.page.width * 0.9))
            c.top = random.randrange(0, int(self.page.height * 0.8))
            c.bgcolor = self.colors[random.randrange(0, len(self.colors))]
            c.width = random.randrange(int(self.size*1.5), int(self.size*3))
            c.height = c.width
            c.border_radius = random.randrange(0, int(self.size*1.5))
            c.rotate = ft.transform.Rotate(random.randrange(0, 360) * pi/180)
            c.scale = ft.transform.Scale(random.uniform(0.7, 1.3))
        self.update()
    
    def assemble(self, e=None):
        """Centrado perfecto con márgenes dinámicos"""
        max_col = max([col for (row, col, color) in self.parts])
        
        # Cálculo preciso del ancho
        total_width = (max_col + 1) * self.size + max_col * self.gap
        available_width = self.page.width - 40  # Margen mínimo de 20px cada lado
        
        # Ajustar tamaño si es necesario
        if total_width > available_width:
            self.size = (available_width - max_col * self.gap) / (max_col + 1)
            total_width = available_width
        
        # Posicionamiento vertical (33% desde arriba)
        total_height = 5 * (self.size + self.gap)
        center_x = (self.page.width - total_width) / 2
        center_y = (self.page.height - total_height) / 3
        
        for i, (row, col, color_idx) in enumerate(self.parts):
            c = self.canvas.controls[i]
            c.left = center_x + col * (self.size + self.gap)
            c.top = center_y + row * (self.size + self.gap)
            c.bgcolor = self.colors[color_idx]
            c.width = self.size
            c.height = self.size
            c.border_radius = 3
            c.rotate = ft.transform.Rotate(0)
            c.scale = ft.transform.Scale(1)
        
        self.update()
    
    def will_unmount(self):
        self.running = False
        if self.animation_thread.is_alive():
            self.animation_thread.join(timeout=1)

class FrameOnceUno(ft.Control):
    
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.controls = []  # Inicializa el atributo controls como una lista vacía
        self.create_ui_elements_once_uno()  # Llama a un método para crear los elementos de la interfaz

    def create_ui_elements_once_uno(self):
        # Agrega widgets a la lista controls
        self.controls.append(
            ft.Text("Este es el Frame Once Uno", size=20, color=ft.Colors.BLACK)
        )
        self.controls.append(
            ft.ElevatedButton("Botón en Frame Once Uno", on_click=self.on_button_click)
        )

    def on_button_click(self, e):
        print("Botón en Frame Ocho Dos clickeado")

class FrameOnceDos(ft.Control):
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.data_entries = []
        self.selected_index = None
        self.filtered_entries = []
        self.dropdownAntiguoNombre = None  # Inicializa el atributo aquí
        self.username = None  # Propiedad para almacenar el nombre de usuario
        self.create_ui_elements()
        self.actualizarListView() 
        self.actualizarListView_inicial() 

    def create_ui_elements(self):
        # Crear los widgets con tamaños ajustados
        self.texboxIdConjunto = ft.TextField(label="Id Conjunto.",text_align=ft.TextAlign.RIGHT, width=400, height=50, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texboxNombreConjunto = ft.TextField(label="NombreConjunto",text_align=ft.TextAlign.RIGHT, width=400, height=50, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        
        # Títulos de las columnas
        self.column_titles = Row(
            controls=[
                Text("    Id Conjunto", width=100, weight="bold", size=12),
                Text("Nombre Conjunto", width=350, weight="bold", size=12),
            ],
            spacing=5,
            expand=True,
        )

        # ListView para mostrar los datos
        self.listview = ListView(
            expand=True,
            spacing=5,
            padding=5,
            auto_scroll=True,
        )
        
        # Botones con el mismo tamaño
        
        self.boton_guardar_conjunto = ElevatedButton(
            text="GUARDAR", on_click=self.guardarconjunto, width=200,height=35,
            bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=self.on_hover_boton_guardar_rec
        )
        self.boton_editar_conjunto = ElevatedButton(
        text="EDITAR", on_click=self.modificarconjunto, width=200,height=35,
            bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=self.on_hover_boton_editar_rec
        )
        self.boton_eliminar_conjunto = ElevatedButton(
            text="ELIMINAR", on_click=self.eliminarconjunto, width=200,height=35,
            bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=self.on_hover_boton_eliminar_rec
        )

        self.selected_row_index = None

        # Título principal
        self.title_container = ft.Container(
            content=ft.Text(
                value="REGISTRO DE CONJUNTOS",
                size=24,
                weight="bold",
                color=ft.Colors.TEAL,
                text_align=ft.TextAlign.CENTER
            ),
            alignment=ft.alignment.center,
            padding=0,
        )

        # Contenedor de color teal con inputs de borde blanco
        self.teal_container = ft.Container(
            
            #bgcolor="#0f386a",
            padding=10,
            content=ft.Column(
                controls=[
                    ft.ResponsiveRow(
                        controls=[
                            ft.Column(controls=[self.texboxIdConjunto], col={"xs": 12, "sm": 6, "md": 6, "lg": 12, "xl": 12}),
                            ft.Column(controls=[self.texboxNombreConjunto], col={"xs": 12, "sm": 6, "md": 6, "lg": 12, "xl": 12}),
                        ],
                        alignment=ft.MainAxisAlignment.CENTER,
                        
                        spacing=10,
                    ),
                ],
                scroll=ft.ScrollMode.AUTO,
                expand=True  # Ajusta la altura según sea necesario
            ),
            expand=True,
            
            border_radius=10
        )

        self.listview_container = Container(
            content=Column(
                controls=[self.listview],
                alignment=alignment.center,
                scroll=ft.ScrollMode.AUTO,
                spacing=20,
                height=100,
                width=800,
            ),
            padding=padding.all(10),
        )

        # Contenedor para los botones
        self.buttons_container = ft.Container(
            content=ft.Column(
                controls=[
                    self.boton_guardar_conjunto,
                    self.boton_editar_conjunto,
                    self.boton_eliminar_conjunto,            
                ],
                alignment=ft.MainAxisAlignment.CENTER,
                spacing=10,
                expand=True
            ),
            padding=5,
            expand=True,
            border_radius=10
        )
        #######################################

        self.texboxidinicial = ft.TextField(label="Id inicial.",text_align=ft.TextAlign.RIGHT, width=400, height=50, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        self.texboxNombreinicial = ft.TextField(label="Nombre Inicial",text_align=ft.TextAlign.RIGHT, width=400, height=50, text_size=15, border_color="teal", border_radius=10,border=ft.border.all(0, ft.Colors.WHITE))
        
        # Títulos de las columnas
        self.column_titles_inicial = Row(
            controls=[
                Text("    Id Inicial", width=100, weight="bold", size=12),
                Text("Nombre Inicial", width=350, weight="bold", size=12),
            ],
            spacing=5,
            expand=True,
        )

        # ListView para mostrar los datos
        self.listview_inicial = ListView(
            expand=True,
            spacing=5,
            padding=5,
            auto_scroll=True,
        )
        
        # Botones con el mismo tamaño
        
        self.boton_guardar_inicial = ElevatedButton(
            text="GUARDAR", on_click=self.guardar_inicial, width=200,height=35,
            bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=self.on_hover_boton_guardar_inicial
        )
        self.boton_editar_inicial = ElevatedButton(
        text="EDITAR", on_click=self.modificar_inicial, width=200,height=35,
            bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=self.on_hover_boton_editar_inicial
        )
        self.boton_eliminar_inicial = ElevatedButton(
            text="ELIMINAR", on_click=self.eliminar_inicial, width=200,height=35,
            bgcolor=Colors.TEAL, color=Colors.WHITE, on_hover=self.on_hover_boton_eliminar_inicial
        )

        self.selected_row_index = None

        # Título principal
        self.title_container_inicial = ft.Container(
            content=ft.Text(
                value="REGISTRO DE INICIAL",
                size=24,
                weight="bold",
                color=ft.Colors.TEAL,
                text_align=ft.TextAlign.CENTER
            ),
            alignment=ft.alignment.center,
            padding=0,
        )

        # Contenedor de color teal con inputs de borde blanco
        self.teal_container_inicial = ft.Container(
            
            #bgcolor="#0f386a",
            padding=10,
            content=ft.Column(
                controls=[
                    ft.ResponsiveRow(
                        controls=[
                            ft.Column(controls=[self.texboxidinicial], col={"xs": 12, "sm": 6, "md": 6, "lg": 12, "xl": 12}),
                            ft.Column(controls=[self.texboxNombreinicial], col={"xs": 12, "sm": 6, "md": 6, "lg": 12, "xl": 12}),
                        ],
                        alignment=ft.MainAxisAlignment.CENTER,
                        
                        spacing=10,
                    ),
                ],
                scroll=ft.ScrollMode.AUTO,
                expand=True  # Ajusta la altura según sea necesario
            ),
            expand=True,
            
            border_radius=10
        )

        self.listview_container_incial = Container(
            content=Column(
                controls=[self.listview_inicial],
                alignment=alignment.center,
                scroll=ft.ScrollMode.AUTO,
                spacing=20,
                height=100,
                width=800,
            ),
            padding=padding.all(10),
        )

        # Contenedor para los botones
        self.buttons_container_inicial = ft.Container(
            content=ft.Column(
                controls=[
                    self.boton_guardar_inicial,
                    self.boton_editar_inicial,
                    self.boton_eliminar_inicial,            
                ],
                alignment=ft.MainAxisAlignment.CENTER,
                spacing=10,
                expand=True
            ),
            padding=5,
            expand=True,
            border_radius=10
        )    

        #######################################

        self.scrollable_content = ft.Column(
            controls=[
                ft.Row(
                    controls=[
                        ft.Column(
                            controls=[
                                self.teal_container
                            ],
                            expand=4
                        ),
                        ft.Column(
                            controls=[
                                self.column_titles,
                                self.listview_container
                            ],
                            expand=6
                        ),    

                        ft.Column(
                            controls=[
                                self.buttons_container
                            ],
                            expand=2
                        )

                        
                    ],
                    expand=True
                ),
                
            ],
            scroll=ft.ScrollMode.AUTO,  # Habilitar scroll
            expand=True
        )

        self.scrollable_content_inicial = ft.Column(
            controls=[
                ft.Row(
                    controls=[
                        ft.Column(
                            controls=[
                                self.teal_container_inicial
                            ],
                            expand=4
                        ),
                        ft.Column(
                            controls=[
                                self.column_titles_inicial,
                                self.listview_container_incial
                            ],
                            expand=6
                        ),    

                        ft.Column(
                            controls=[
                                self.buttons_container_inicial
                            ],
                            expand=2
                        )

                        
                    ],
                    expand=True
                ),
                
            ],
            scroll=ft.ScrollMode.AUTO,  # Habilitar scroll
            expand=True
        )

        # Asignar el título y el contenido desplazable a los controles
        self.controls = [
            self.title_container,  # Título fijo
            self.scrollable_content,  # Contenido con scroll
            self.title_container_inicial,  # Título fijo
            self.scrollable_content_inicial,  # Contenido con scroll

        ]

        # Contenedor principal

    def on_hover_boton_guardar_rec(self, e):
        self.boton_guardar_conjunto.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_guardar_conjunto.update()

    def on_hover_boton_editar_rec(self, e):
        self.boton_editar_conjunto.bgcolor = "orange" if e.data == "true" else "teal"
        self.boton_editar_conjunto.update()

    def on_hover_boton_eliminar_rec(self, e):
        self.boton_eliminar_conjunto.bgcolor = "red" if e.data == "true" else "teal"
        self.boton_eliminar_conjunto.update()
 
    def mostrar_mensaje112(self, mensaje, tipo="error"):
        # Definir el color de fondo según el tipo de mensaje
        if tipo == "éxito":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.GREEN)  # 70% de opacidad
        elif tipo == "advertencia":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.TEAL)   # 70% de opacidad
        else:  # Por defecto, es un error
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.RED)    # 70% de opacidad
        
        # Crear el contenido del SnackBar con bordes redondeados y transparencia
        snack_content = ft.Container(
            content=ft.Text(mensaje, size=18, color=ft.Colors.WHITE),  # Texto del mensaje en blanco
            bgcolor=color_fondo,                              # Color de fondo con transparencia
            border_radius=10,                                 # Bordes redondeados de 10
            padding=10,                                       # Espaciado interno
        )
        
        # Crear el SnackBar
        snack_bar = ft.SnackBar(
            content=snack_content,  # Usar el contenedor con bordes redondeados y transparencia
            open=True,              # Abrir automáticamente
            duration=5000,          # Duración de 5 segundos
            bgcolor=ft.Colors.TRANSPARENT,  # Fondo transparente para el SnackBar
        )
        
        # Agregar el SnackBar a la página y actualizar la UI
        self.page.overlay.append(snack_bar)
        self.page.update()

    def limpiar_campos(self):
        # Limpiar todos los campos de texto
        self.texboxIdConjunto.value = ""
        self.texboxNombreConjunto.value = ""
        self.page.update()

    def guardarconjunto(self, e):
        # Verificar que todos los widgets estén inicializados
        if any(var is None for var in [self.texboxNombreConjunto,]):
            self.mostrar_mensaje112("Los widgets no están inicializados", tipo="advertencia")            
            #self.page.add(ft.SnackBar(ft.Text('Los widgets no están inicializados'), open=True))
            return

        # Obtener valores de los widgets
        values = []
        for widget in [self.texboxNombreConjunto, ]:
            value = widget.value
            if value is None or value == '':
                self.mostrar_mensaje112(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                return
            values.append(value)

        try:
            # Insertar valores en la base de datos
            CConjunto.IngresarConjunto(self.page,*values)
            self.actualizarListView()
            
            # Limpiar todos los widgets
            self.limpiar_campos()
                      
        except ValueError as e:
            self.mostrar_mensaje112(f"Error: {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje112(f"Error {e}", tipo="error")

    def actualizarListView(self):
        try:
            # Limpiar la lista
            self.listview.controls.clear()

            # Obtener los nuevos datos
            datos = CConjunto.mostrarConjunto()

            # Insertar los nuevos datos en la lista
            for index, row in enumerate(datos):
                self.listview.controls.append(
                    GestureDetector(
                        content=Container(
                            content=Row(
                                controls=[
                                    Text(row[0], width=70),
                                    Text(row[1], width=300),
                                ],
                                alignment=ft.MainAxisAlignment.START,
                            ),
                            padding=10,
                            border=border.all(1, Colors.TEAL),
                            border_radius=10,
                        ),
                        on_tap=lambda e, row=row, index=index: self.seleccionarRegistro(row, index)
                    )
                )
            self.page.update()
        except ValueError as error:
            print('Error al Actualizar Lista {}'.format(error))

    def seleccionarRegistro(self, row, index):
        try:
            self.selected_row_index = index

            # Establecer los valores en los campos de texto
            self.texboxIdConjunto.value = row[0]
            self.texboxNombreConjunto.value = row[1]
            # Marcar la fila seleccionada
            for i, control in enumerate(self.listview.controls):
                container = control.content
                if i == self.selected_row_index:  # Ajuste del índice
                    container.border = border.all(2, Colors.TEAL)
                    for cell in container.content.controls:
                        cell.color = Colors.TEAL
                else:
                    container.border = border.all(1, Colors.TEAL)
                    for cell in container.content.controls:
                        cell.color = Colors.WHITE
            self.page.update()
        except Exception as error:
            print(f'Error al seleccionar Registro {error}')

    def modificarconjunto(self, e):
        # Verificar si los widgets están inicializados  
        if any(var is None for var in [self.texboxNombreConjunto, self.texboxIdConjunto]):
            self.mostrar_mensaje112("Los widgets no están inicializados", tipo="advertencia")            
            return

        values = []
        for widget in [self.texboxNombreConjunto, self.texboxIdConjunto]:
            value = widget.value
            if value is None or value == '':
                self.mostrar_mensaje112(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                return
            values.append(value)
        
        try:
            CConjunto.ModificarConjunto(self.page, *values)
            self.actualizarListView()
            self.limpiar_campos()

        except ValueError as e:
            self.mostrar_mensaje112(f"Error:  {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje112(f"Error  {e}", tipo="error")

    def eliminarconjunto(self, e):
        # Verificar si los widgets están inicializados  
        if any(var is None for var in [self.texboxIdConjunto, self.texboxNombreConjunto]):
            self.mostrar_mensaje112("Los widgets no están inicializados", tipo="advertencia")            
            return

        values = []
        for widget in [self.texboxIdConjunto, self.texboxNombreConjunto]:
            value = widget.value
            if not value:
                self.mostrar_mensaje112(f'Seleccione Un Numero de Lote', tipo="advertencia")                           
                return
            values.append(value)

        try:
            CConjunto.EliminarConjunto(self.page, *values)
            self.actualizarListView()
            self.limpiar_campos()

        except ValueError as e:
            self.mostrar_mensaje112(f"Error de Eliminacion: {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje112(f"Error: No se eliminaron los registros: {e}", tipo="error")
    
    ###############################

    def on_hover_boton_guardar_inicial(self, e):
        self.boton_guardar_inicial.bgcolor = "green" if e.data == "true" else "teal"
        self.boton_guardar_inicial.update()

    def on_hover_boton_editar_inicial(self, e):
        self.boton_editar_inicial.bgcolor = "orange" if e.data == "true" else "teal"
        self.boton_editar_inicial.update()

    def on_hover_boton_eliminar_inicial(self, e):
        self.boton_eliminar_inicial.bgcolor = "red" if e.data == "true" else "teal"
        self.boton_eliminar_inicial.update()

    def limpiar_campos_inicial(self):
        # Limpiar todos los campos de texto
        self.texboxidinicial.value = ""
        self.texboxNombreinicial.value = ""
        self.page.update()

    def guardar_inicial(self, e):
        # Verificar que todos los widgets estén inicializados
        if any(var is None for var in [self.texboxNombreinicial,]):
            self.mostrar_mensaje112("Los widgets no están inicializados", tipo="advertencia")            
            #self.page.add(ft.SnackBar(ft.Text('Los widgets no están inicializados'), open=True))
            return

        # Obtener valores de los widgets
        values = []
        for widget in [self.texboxNombreinicial, ]:
            value = widget.value
            if value is None or value == '':
                self.mostrar_mensaje112(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                return
            values.append(value)

        try:
            # Insertar valores en la base de datos
            CInicial.IngresarInicial(self.page,*values)
            self.actualizarListView_inicial()
            
            # Limpiar todos los widgets
            self.limpiar_campos_inicial()
                      
        except ValueError as e:
            self.mostrar_mensaje112(f"Error: {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje112(f"Error {e}", tipo="error")

    def actualizarListView_inicial(self):
        try:
            # Limpiar la lista
            self.listview_inicial.controls.clear()

            # Obtener los nuevos datos
            datos = CInicial.mostrarInicial()

            # Insertar los nuevos datos en la lista
            for index, row in enumerate(datos):
                self.listview_inicial.controls.append(
                    GestureDetector(
                        content=Container(
                            content=Row(
                                controls=[
                                    Text(row[0], width=70),
                                    Text(row[1], width=300),
                                ],
                                alignment=ft.MainAxisAlignment.START,
                            ),
                            padding=10,
                            border=border.all(1, Colors.TEAL),
                            border_radius=10,
                        ),
                        on_tap=lambda e, row=row, index=index: self.seleccionarRegistro_inicial(row, index)
                    )
                )
            self.page.update()
        except ValueError as error:
            print('Error al Actualizar Lista {}'.format(error))

    def seleccionarRegistro_inicial(self, row, index):
        try:
            self.selected_row_index = index

            # Establecer los valores en los campos de texto
            self.texboxidinicial.value = row[0]
            self.texboxNombreinicial.value = row[1]

            # Marcar la fila seleccionada
            for i, control in enumerate(self.listview_inicial.controls):
                container = control.content
                if i == self.selected_row_index:  # Ajuste del índice
                    container.border = border.all(2, Colors.TEAL)
                    for cell in container.content.controls:
                        cell.color = Colors.TEAL
                else:
                    container.border = border.all(1, Colors.TEAL)
                    for cell in container.content.controls:
                        cell.color = Colors.WHITE

            self.page.update()
        except Exception as error:
            print(f'Error al seleccionar Registro {error}')

    def modificar_inicial(self, e):
        # Verificar si los widgets están inicializados  
        if any(var is None for var in [self.texboxNombreinicial, self.texboxidinicial]):
            self.mostrar_mensaje112("Los widgets no están inicializados", tipo="advertencia")            
            return

        values = []
        for widget in [self.texboxNombreinicial, self.texboxidinicial]:
            value = widget.value
            if value is None or value == '':
                self.mostrar_mensaje112(f'El campo {widget.label} no puede estar vacío', tipo="advertencia")                           
                return
            values.append(value)
        
        try:
            CInicial.ModificarInicial(self.page, *values)
            self.actualizarListView_inicial()
            self.limpiar_campos_inicial()

        except ValueError as e:
            self.mostrar_mensaje112(f"Error:  {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje112(f"Error  {e}", tipo="error")

    def eliminar_inicial(self, e):
        # Verificar si los widgets están inicializados  
        if any(var is None for var in [self.texboxidinicial, self.texboxNombreinicial]):
            self.mostrar_mensaje112("Los widgets no están inicializados", tipo="advertencia")            
            return

        values = []
        for widget in [self.texboxidinicial, self.texboxNombreinicial]:
            value = widget.value
            if not value:
                self.mostrar_mensaje112(f'Seleccione Un Numero de Lote', tipo="advertencia")                           
                return
            values.append(value)

        try:
            CInicial.EliminarInicial(self.page, *values)
            self.actualizarListView_inicial()
            self.limpiar_campos_inicial()

        except ValueError as e:
            self.mostrar_mensaje112(f"Error de Eliminacion: {e}", tipo="error")
        except Exception as e:
            self.mostrar_mensaje112(f"Error: No se eliminaron los registros: {e}", tipo="error")

    ###############################

class FrameOnceTres(ft.Control):
    
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.controls = []  # Inicializa el atributo controls como una lista vacía
        self.create_ui_elements_once_tres()  # Llama a un método para crear los elementos de la interfaz

    def create_ui_elements_once_tres(self):
        # Agrega widgets a la lista controls
        self.controls.append(
            ft.Text("Este es el Frame once tres", size=20, color=ft.Colors.BLACK)
        )
        self.controls.append(
            ft.ElevatedButton("Botón en Frame Once tres", on_click=self.on_button_click)
        )

    def on_button_click(self, e):
        print("Botón en Frame Ocho Dos clickeado")

class FrameOnceCuatro(ft.Control):
    
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.controls = []  # Inicializa el atributo controls como una lista vacía
        self.create_ui_elements_once_cuatro()  # Llama a un método para crear los elementos de la interfaz

    def create_ui_elements_once_cuatro(self):
        # Agrega widgets a la lista controls
        self.controls.append(
            ft.Text("Este es el Frame once coatro", size=20, color=ft.Colors.BLACK)
        )
        self.controls.append(
            ft.ElevatedButton("Botón en Frame once Cuatro", on_click=self.on_button_click)
        )

    def on_button_click(self, e):
        print("Botón en Frame Ocho Dos clickeado")

class FrameDoce(ft.Control):
    
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.controls = []  # Inicializa el atributo controls como una lista vacía
        self.create_ui_elements_doce()  # Llama a un método para crear los elementos de la interfaz

    def create_ui_elements_doce(self):
        # Agrega widgets a la lista controls
        self.controls.append(
            ft.Text("Este es el Frame dece", size=20, color=ft.Colors.BLACK)
        )
        self.controls.append(
            ft.ElevatedButton("Botón en Frame doce", on_click=self.on_button_click)
        )

    def on_button_click(self, e):
        print("Botón en Frame Ocho Dos clickeado")                                                                


# =============================================
# MODIFICACIÓN DE AppComplejos CON MEJORAS DE SEGURIDAD
# =============================================

class AppComplejos:
    def __init__(self):
        self.page = None
        self.user_access = {}
        self.username = None
        self.user_id = None
        self.current_ip = None
        self.session_start_time = None
        self.session_timeout = SESSION_TIMEOUT
        self.mfa_required = False
        self.mfa_pending = False
        self.mfa_user_id = None
        self.mfa_username = None
        self.mfa_token_input = None  # Campo para el código MFA
        self.side_menu = None  # Agregado para almacenar la instancia del menú

        import atexit
        atexit.register(self.cleanup_on_exit)

    def cleanup_on_exit(self):
        """Limpia los recursos y registra el cierre de sesión al salir"""
        if hasattr(self, 'user_id') and self.user_id:
            current_ip = ip_validator.get_current_ip()
            LoginLog.log_logout(self.user_id, current_ip)

    def check_session_timeout(self):
        """Verifica si la sesión ha expirado por inactividad"""
        if not hasattr(self, 'session_start_time') or self.session_start_time is None:
            return False
            
        current_time = time.time()
        if (current_time - self.session_start_time) > self.session_timeout:
            if self.page:
                if hasattr(self, 'user_id') and self.user_id:
                    LoginLog.log_logout(self.user_id, self.current_ip)
                
                self.page.snack_bar = ft.SnackBar(
                    content=ft.Text("Sesión expirada por inactividad", color=ft.Colors.WHITE),
                    bgcolor=ft.Colors.RED
                )
                self.page.snack_bar.open = True
                self.page.go("/login")
                
                log_security_event("SESSION_TIMEOUT", "Sesión terminada por inactividad", 
                                 self.user_id, self.current_ip, "WARNING")
            return True
        return False

    def show_mfa_verification(self):
        """Muestra la pantalla de verificación de 2FA"""
        self.page.controls.clear()
        
        self.mfa_code_input = ft.TextField(
            label="Código de verificación",
            width=300,
            border_color="teal",
            border_radius=10,
            autofocus=True,
            keyboard_type="number",
            max_length=6
        )
        
        verify_button = ft.ElevatedButton(
            "Verificar",
            on_click=self.verify_mfa_login,
            width=300,
            bgcolor=ft.Colors.TEAL,
            color=ft.Colors.WHITE
        )
        
        self.page.add(
            ft.Container(
                content=ft.Column(
                    controls=[
                        ft.Text("Autenticación de Dos Factores", size=24, weight="bold", text_align="center"),
                        ft.Text("Ingresa el código de 6 dígitos de tu aplicación de autenticación", 
                               size=16, text_align="center"),
                        self.mfa_code_input,
                        verify_button,
                        ft.Text("Si perdiste acceso a tu autenticador, contacta al administrador.",
                               size=12, color=ft.Colors.GREY)
                    ],
                    alignment=ft.MainAxisAlignment.CENTER,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                    spacing=20
                ),
                padding=20,
                alignment=ft.alignment.center
            )
        )
        self.page.update()

    def verify_mfa_click(self, e):
        """Maneja la verificación del código MFA"""
        token = self.mfa_token_input.value.strip()
        
        if not token or len(token) != 6:
            self.mostrar_mensaje100("El código debe tener 6 dígitos", "error")
            return
        
        if verify_2fa(self.user_id, token):
            self.mfa_pending = False
            log_security_event("2FA_SUCCESS", "Verificación MFA exitosa", 
                             self.user_id, self.current_ip, "INFO")
            
            # Redirigir a la página principal después de verificación exitosa
            self.page.go("/main")
            
            # Mostrar menú lateral y contenido principal
            side_menu = SideMenu(self.page, self.navigate, self.user_access)
            side_menu.set_username(self.username)
            side_menu.show_side_menu(ft.Text(f"Bienvenido {sanitize_output(self.username)}", size=20))
        else:
            log_security_event("2FA_FAILED", "Código MFA incorrecto", 
                             self.user_id, self.current_ip, "WARNING")
            self.mostrar_mensaje100("Código de verificación incorrecto", "error")
            self.mfa_token_input.focus()

    def verify_mfa_login(self, e):
        """Verifica el código 2FA durante el login"""
        code = self.mfa_code_input.value.strip()
        
        if len(code) != 6 or not code.isdigit():
            self.mostrar_mensaje100("El código debe tener 6 dígitos", "error")
            return
            
        if verify_2fa(self.mfa_user_id, code):
            self.mfa_pending = False
            self.username = self.mfa_username
            self.user_id = self.mfa_user_id
            
            log_security_event("2FA_SUCCESS", "Verificación MFA exitosa", 
                             self.mfa_user_id, self.current_ip, "INFO")
            
            # Redirigir a la página principal
            side_menu = SideMenu(self.page, self.navigate, self.user_access)
            side_menu.set_username(self.mfa_username)
            side_menu.show_side_menu(ft.Text(f"Bienvenido {sanitize_output(self.mfa_username)}", size=20))
            self.page.go("/main")
        else:
            log_security_event("2FA_FAILED", "Código MFA incorrecto", 
                             self.mfa_user_id, self.current_ip, "WARNING")
            self.mostrar_mensaje100("Código de verificación incorrecto", "error")
            self.mfa_code_input.focus()        

    def navigate(self, section):
        """Método de navegación modificado para verificar MFA"""
        if self.check_session_timeout():
            return
            
        # Si MFA es requerido y está pendiente, redirigir a verificación
        if self.mfa_required and self.mfa_pending and section != "mfa_verification":
            self.page.go("/mfa_verification")
            return
            
        # Crear instancia de SideMenu si no existe
        if self.side_menu is None:
            self.side_menu = SideMenu(self.page, self.navigate, self.user_access)
            self.side_menu.set_username(self.username)

        # Resto de la lógica de navegación
        if section == "frame_uno":
            user_registration = FrameUno(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=user_registration.controls))
        elif section == "frame_dos":
            frame_dos = FrameDos(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_dos.controls))
        elif section == "frame_tres":
            frame_tres = FrameTres(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_tres.controls))
        elif section == "frame_cuatro":
            frame_cuatro = FrameCuatro(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_cuatro.controls))
        elif section == "frame_cinco":
            frame_cinco = FrameCinco(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_cinco.controls))
        elif section == "frame_seis":
            frame_seis = FrameSeis(self.page, self.username)
            self.side_menu.show_side_menu(ft.Column(controls=frame_seis.controls))
        elif section == "frame_siete":
            frame_siete = FrameSiete(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_siete.controls))
        elif section == "frame_ocho":
            frame_ocho = FrameOcho(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_ocho.controls))
        elif section == "frame_ocho_uno":
            frame_ocho_uno = FrameOchoUno(self.page, self.username) 
            #frame_ocho_uno = FrameOchoUno(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_ocho_uno.controls))
        elif section == "frame_ocho_dos":
            frame_ocho_dos = FrameOchoDos(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_ocho_dos.controls))
        elif section == "frame_ocho_tres":
            frame_ocho_tres = FrameOchoTres(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_ocho_tres.controls))
        elif section == "frame_ocho_cuatro":
            frame_ocho_cuatro = FrameOchoCuatro(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_ocho_cuatro.controls))        
        elif section == "frame_nueve":
            frame_nueve = FrameNueve(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_nueve.controls))
        elif section == "frame_nueve_uno":
            frame_nueve_uno = FrameNueveUno(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_nueve_uno.controls))
        elif section == "frame_nueve_dos":
            frame_nueve_dos = FrameNueveDos(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_nueve_dos.controls))
        elif section == "frame_nueve_tres":
            frame_nueve_tres = FrameNueveTres(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_nueve_tres.controls))
        elif section == "frame_nueve_cuatro":
            frame_nueve_cuatro = FrameNueveCuatro(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_nueve_cuatro.controls))    
        elif section == "frame_diez":
            frame_diez = FrameDiez(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_diez.controls))
        elif section == "frame_diez_uno":
            frame_diez_uno = FrameDiezUno(self.page, self.username)
            self.side_menu.show_side_menu(ft.Column(controls=frame_diez_uno.controls))
        elif section == "frame_diez_dos":
            frame_diez_dos = FrameDiezDos(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_diez_dos.controls))
        elif section == "frame_diez_tres":
            frame_diez_tres = FrameDiezTres(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_diez_tres.controls))
        elif section == "frame_diez_cuatro":
            frame_diez_cuatro = FrameDiezCuatro(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_diez_cuatro.controls))
        elif section == "frame_diez_cinco":
            frame_diez_cinco = FrameDiezCinco(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_diez_cinco.controls))
        elif section == "frame_diez_seis":
            frame_diez_seis = FrameDiezSeis(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_diez_seis.controls))
        elif section == "frame_diez_siete":
            frame_diez_siete = FrameDiezSiete(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_diez_siete.controls))
        elif section == "frame_diez_ocho":
            frame_diez_ocho = FrameDiezOcho(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_diez_ocho.controls))                                
        elif section == "frame_once":
            frame_once = FrameOnce(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_once.controls))
        elif section == "frame_once_uno":
            frame_once_uno = FrameOnceUno(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_once_uno.controls))
        elif section == "frame_once_dos":
            frame_once_dos = FrameOnceDos(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_once_dos.controls))
        elif section == "frame_once_tres":
            frame_once_tres = FrameOnceTres(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_once_tres.controls))
        elif section == "frame_once_cuatro":
            frame_once_cuatro = FrameOnceCuatro(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_once_cuatro.controls))                                                    
        elif section == "frame_doce":
            frame_doce = FrameDoce(self.page)
            self.side_menu.show_side_menu(ft.Column(controls=frame_doce.controls))  
        elif section == "main":
            self.side_menu.show_side_menu(ft.Text(f"Bienvenido {sanitize_output(self.username)}", size=20))

    def main(self, page: ft.Page):
        self.page = page
        self.page.window.maximized = True
        app = AppComplejos(page)
        page.title = "SISTEMA DE LIQUIDACION MERCEDES AI"
        
        self.page.vertical_alignment = ft.MainAxisAlignment.CENTER
        self.page.horizontal_alignment = ft.CrossAxisAlignment.CENTER
        self.page.session_timeout = self.session_timeout

        def login_click(e):
            nonlocal login_username_input, login_password_input
            
            username = login_username_input.value
            password = login_password_input.value
            self.current_ip = ip_validator.get_current_ip()

            if verify_user(username, password):
                log_login_attempt(username, True)
                self.username = username
                self.session_start_time = time.time()
                
                try:
                    conn = CConection.ConexionBasedeDatos()
                    if conn is None:
                        raise Exception("No se pudo conectar a la base de datos")

                    with conn:
                        with conn.cursor() as cursor:
                            # Obtener información del usuario incluyendo 2FA
                            cursor.execute(
                                "SELECT id, two_factor_enabled FROM users WHERE username = %s", 
                                (username,)
                            )
                            user_id, mfa_enabled = cursor.fetchone()
                            
                            # Obtener permisos del usuario
                            cursor.execute("""
                                SELECT access_frame_uno, access_frame_dos, access_frame_tres, 
                                       access_frame_cuatro, access_frame_cinco, access_frame_seis, 
                                       access_frame_siete, access_frame_ocho, access_frame_ocho_uno, 
                                       access_frame_ocho_dos, access_frame_ocho_tres, access_frame_ocho_cuatro, 
                                       access_frame_nueve, access_frame_nueve_uno, access_frame_nueve_dos, 
                                       access_frame_nueve_tres, access_frame_nueve_cuatro, access_frame_diez, 
                                       access_frame_once, access_frame_doce 
                                FROM users WHERE username = %s
                            """, (username,))
                            access = cursor.fetchone()

                            if access:
                                    self.user_access = {
                                    "access_frame_uno": access[0],
                                    "access_frame_dos": access[1],
                                    "access_frame_tres": access[2],
                                    "access_frame_cuatro": access[3],
                                    "access_frame_cinco": access[4],
                                    "access_frame_seis": access[5],
                                    "access_frame_siete": access[6],
                                    "access_frame_ocho": access[7],
                                    "access_frame_ocho_uno": access[8],
                                    "access_frame_ocho_dos": access[9],
                                    "access_frame_ocho_tres": access[10],
                                    "access_frame_ocho_cuatro": access[11],
                                    "access_frame_nueve": access[12],
                                    "access_frame_nueve_uno": access[13],
                                    "access_frame_nueve_dos": access[14],
                                    "access_frame_nueve_tres": access[15],
                                    "access_frame_nueve_cuatro": access[16],
                                    "access_frame_diez": access[17],
                                    "access_frame_once": access[18],
                                    "access_frame_doce": access[19]
                                    }
                    
                    if mfa_enabled:
                        self.mfa_pending = True
                        self.mfa_user_id = user_id
                        self.mfa_username = username
                        self.show_mfa_verification()
                    else:
                        # Mostrar interfaz principal directamente
                        side_menu = SideMenu(page, self.navigate, self.user_access)
                        #side_menu.set_username(self.username)
                        #self.frame_seis.set_username(self.username)  # Actualizar el nombre de usuario en SideMenu
                        #self.frame_ocho_uno.set_username(self.username)  # Actualizar el nombre de usuario en SideMenu
                        #self.frame_diez_uno.set_username(self.username)  # Actualizar el nombre de usuario en SideMenu
                        side_menu.show_side_menu(ft.Text(f"Bienvenido {sanitize_output(username)}", size=20))
                        self.page.go("/main")
                    
                except Exception as e:
                    logging.error(f"Error en login: {str(e)}")
                    self.page.add(ft.Text("Error al iniciar sesión", color=ft.Colors.RED))
            else:
                log_login_attempt(username, False)
                self.page.add(ft.Text("Credenciales incorrectas", color=ft.Colors.RED, size=20))

        def on_window_close(e):
            if e.data == "close":
                try:
                    if hasattr(self, 'user_id') and self.user_id:
                        current_ip = ip_validator.get_current_ip()
                        LoginLog.log_logout(self.user_id, current_ip)
                except Exception as e:
                    logging.error(f"Error al registrar cierre de sesión: {e}")
                finally:
                    page.window_destroy()

        page.window_prevent_close = True
        page.on_window_close = on_window_close

        current_ip = ip_validator.get_current_ip()
        ip_display = ft.Text(f"Tu IP actual: {sanitize_output(current_ip)}", size=12, color=ft.Colors.WHITE)

        login_username_input = ft.TextField(
            label="Usuario", 
            width=300, 
            color="white", 
            bgcolor="teal", 
            border_color="white",
            border_radius=15,
            label_style=ft.TextStyle(color="white"),
            autocorrect=False,
            enable_suggestions=False
        )
        
        login_password_input = ft.TextField(
            label="Contraseña", 
            password=True, 
            can_reveal_password=False,
            width=300, 
            color="white", 
            bgcolor="teal", 
            border_color="white",
            border_radius=15,
            label_style=ft.TextStyle(color="white"),
            autocorrect=False,
            enable_suggestions=False
        )
        
        login_button = ft.ElevatedButton(
            "INICIAR SESION",
            on_click=login_click, 
            bgcolor=ft.Colors.WHITE, 
            color=ft.Colors.TEAL, 
            width=300,
            height=40
        )

        # Crear instancias de los frames
        self.user_registration = FrameUno(self.page)
        self.frame_dos = FrameDos(self.page)
        self.frame_tres = FrameTres(self.page)
        self.frame_cuatro = FrameCuatro(self.page)
        self.frame_cinco = FrameCinco(self.page)
        self.frame_seis = FrameSeis(self.page)
        self.frame_siete = FrameSiete(self.page)
        self.frame_ocho = FrameOcho(self.page)
        self.frame_ocho_uno = FrameOchoUno(self.page)
        self.frame_ocho_dos = FrameOchoDos(self.page)
        self.frame_ocho_tres = FrameOchoTres(self.page)
        self.frame_ocho_cuatro = FrameOchoCuatro(self.page)
        self.frame_nueve = FrameNueve(self.page)
        self.frame_nueve_uno = FrameNueveUno(self.page)
        self.frame_nueve_dos = FrameNueveDos(self.page)
        self.frame_nueve_tres = FrameNueveTres(self.page)
        self.frame_nueve_cuatro = FrameNueveCuatro(self.page)
        self.frame_diez = FrameDiez(self.page)
        self.frame_diez_uno = FrameDiezUno(self.page)
        self.frame_diez_dos = FrameDiezDos(self.page)
        self.frame_diez_tres = FrameDiezTres(self.page)
        self.frame_diez_cuatro = FrameDiezCuatro(self.page)
        self.frame_diez_cinco = FrameDiezCinco(self.page)
        self.frame_diez_seis = FrameDiezSeis(self.page)
        self.frame_diez_siete = FrameDiezSiete(self.page)
        self.frame_diez_ocho = FrameDiezOcho(self.page)
        self.frame_once = FrameOnce(self.page)
        self.frame_once_uno = FrameOnceUno(self.page)
        self.frame_once_dos = FrameOnceDos(self.page)
        self.frame_once_tres = FrameOnceTres(self.page)
        self.frame_once_cuatro = FrameOnceCuatro(self.page)
        self.frame_doce = FrameDoce(self.page)

        page.add(
            ft.Container(
                content=ft.Column(
                    controls=[
                        ft.Text(sanitize_output("Inicio de Sesion"), 
                            color="White",
                            weight="w700",
                            size=26,
                            text_align="center"),
                        login_username_input,
                        login_password_input,
                        ip_display,
                        login_button,
                    ],
                    alignment=ft.MainAxisAlignment.CENTER,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                ),
                padding=20,
                bgcolor="teal",
                border_radius=15,
                width=350,
                height=500,
            )
        )

    def mostrar_mensaje100(self, mensaje, tipo="error"):
        """Muestra un mensaje en un SnackBar con protección XSS"""
        sanitized_msg = sanitize_output(mensaje)
        
        color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.RED)  # Por defecto error
        if tipo == "éxito":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.GREEN)
        elif tipo == "advertencia":
            color_fondo = ft.Colors.with_opacity(0.7, ft.Colors.TEAL)
        
        snack_content = ft.Container(
            content=ft.Text(sanitized_msg, size=18, color=ft.Colors.WHITE),
            bgcolor=color_fondo,
            border_radius=10,
            padding=10,
        )
        
        snack_bar = ft.SnackBar(
            content=snack_content,
            open=True,
            duration=5000,
            bgcolor=ft.Colors.TRANSPARENT,
        )
        
        self.page.overlay.append(snack_bar)
        self.page.update()
        
app= AppCompejos()

if __name__ == "__main__":
    port = int(os.getenv("PORT", "8000"))  # Usa 8000 como puerto por defecto
    uvicorn.run(app, host="0.0.0.0", port=port)

asgi_app = app

